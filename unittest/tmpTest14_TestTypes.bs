
Type Terrain
  Declare Width as Integer
  Declare Height as Integer

  Function Void Terrain()
  End Function
%``//START INJECTION OF FILE extSimObjEmpty.inj

%``public void StopMovement(){

%``

%``}

%``

%``public void move(Coord coord){

%``

%``}

%``

%``public Coord GetPos(){

%``  return new Coord();

%``}

%``

%``public boolean IsDead(){

%``  return false;

%``}

%``//END INJECTION OF FILE extSimObjEmpty.inj

End Type

Type Coord
  Declare X as Decimal
  Declare Y as Decimal

  Function String ToString()
    Return "(" + X + "," + Y + ")"
  End Function
%``//START INJECTION OF FILE Coord.inj

%``    public Coord(){

%``    }

%``    

%``    public Coord(double x, double y){

%``        X = x;

%``        Y = y;

%``    }

%``

%``    public void NewPos(Vector vec, double velocity, double deltaT){

%``        this.X = this.X + deltaT * (vec.X * velocity);

%``        this.Y = this.Y + deltaT * (vec.Y * velocity);

%``    }

%``//END INJECTION OF FILE Coord.inj

%``//START INJECTION OF FILE extSimObjEmpty.inj

%``public void StopMovement(){

%``

%``}

%``

%``public void move(Coord coord){

%``

%``}

%``

%``public Coord GetPos(){

%``  return new Coord();

%``}

%``

%``public boolean IsDead(){

%``  return false;

%``}

%``//END INJECTION OF FILE extSimObjEmpty.inj

End Type

Type Barrier
  Declare Vertices as List of Coord

  Function Void AddVertex(vertex as Coord)
    %``Vertices.add(vertex);
  End Function
%``//START INJECTION OF FILE extSimObjEmpty.inj

%``public void StopMovement(){

%``

%``}

%``

%``public void move(Coord coord){

%``

%``}

%``

%``public Coord GetPos(){

%``  return new Coord();

%``}

%``

%``public boolean IsDead(){

%``  return false;

%``}

%``//END INJECTION OF FILE extSimObjEmpty.inj

End Type

Type Soldier
  Declare Pos as Coord
  Declare Velocity as Decimal
  Declare _IsDead as Boolean

  Function Void Soldier()
  End Function

  Function Boolean IsDead()
    Return _IsDead
  End Function

  //Specificly generated by the compiler
  Function Void MoveToXY(x as Integer, y as Integer)
  End Function
  Function Void Wait(seconds as Integer)
  End Function
  Function Void MoveToCoord(pos as Coord)
  End Function
%``//START INJECTION OF FILE Soldier.inj

%``

%``private List<FireBulletListener> _listeners = new ArrayList<FireBulletListener>();

%``//private double accuracy = 0.0024999999999971; //accuracy er beregnet udfra at en hjemmev√¶rnsmand skal kunne ramme en torso(0.5m bred) fra 200m afstand

%``private double accuracy = 0.02;

%``

%``public int Side = 0;

%``public final static double DefaultVelocity = 2.2; //meter per second

%``public double Size = 0.25;            //radius of a soldier

%``public boolean IsEnemyDetected = false;

%``public int Fov = 50;

%``public int Ammo = 30;

%``public int FireRate = 1000; //firerate in milliseconds

%``public double CL_FireRate = FireRate;

%``public Soldier Enemy;

%``public Vector Direction = new Vector();

%``public int Magazines = 4;

%``public String Model = "Error";

%``

%``public Coord GetPos(){

%``    return Pos;

%``}

%``

%``public void move(Coord target){

%``    if(Velocity == 0){

%``        Velocity = DefaultVelocity;

%``    }

%``    Direction = DSTFunctions.FindUnitVector(Pos, target);

%``}

%``

%``public void move(Coord target, double velocity){

%``    Velocity = velocity;

%``    Direction = DSTFunctions.FindUnitVector(Pos, target);

%``}

%``

%``public void StopMovement(){

%``    Velocity = 0;

%``}

%``

%``public void EnemyDetected(Soldier enemy){

%``    Enemy = enemy;

%``    IsEnemyDetected = true;

%``}

%``

%``public boolean CanStillSeeEnemy(){

%``    if(Enemy == null){

%``        IsEnemyDetected = false;

%``        return false;

%``    }

%``    if(!Enemy.IsDead() && Vector.GetVectorByPoints(Pos, Enemy.GetPos()).GetLength() < Fov){

%``        return true;

%``    }

%``    else{

%``        IsEnemyDetected = false;

%``        return false;

%``    }

%``}

%``

%``public synchronized void addFireBulletListener( FireBulletListener l ) {

%``    _listeners.add( l );

%``}

%``

%``public synchronized void removeFireBulletListener( FireBulletListener l ) {

%``    _listeners.remove( l );

%``}

%``

%``private synchronized void _fireFireBulletEvent(Bullet bullet) {

%``    FireBulletEvent be = new FireBulletEvent( this, bullet );

%``    Iterator listeners = _listeners.iterator();

%``    while( listeners.hasNext() ) {

%``        ( (FireBulletListener) listeners.next() ).BulletFired(be);

%``    }

%``}

%``

%``public void TryShoot(Coord target){

%``    if(Ammo > 0 && CL_FireRate >= FireRate){

%``        Random rand = new Random();

%``        Vector bulletUnit = Vector.GetVectorByPoints(Pos, target).Normalize();

%``        Vector normal = new Vector();

%``        normal.X = (-1) * bulletUnit.Y;

%``        normal.Y = bulletUnit.X;

%``        normal.Scale(accuracy);

%``        normal.Scale(rand.nextDouble() * 2 - 1);

%``        Bullet bullet = new Bullet(GetPos(),Vector.GetVectorByPoints(GetPos(), new Coord(GetPos().X + bulletUnit.X + normal.X, GetPos().Y + bulletUnit.Y + normal.Y)), Side);

%``        _fireFireBulletEvent(bullet);

%``        Ammo--;

%``        CL_FireRate = 0;

%``    }

%``}

%``

%``public void serviceTimers(double deltaT){

%``    if(CL_FireRate < FireRate){

%``        CL_FireRate += deltaT;

%``    }

%``}

%``

%``public void Kill(){

%``    StopMovement();

%``    IsEnemyDetected = false;

%``    Enemy = null;

%``    Model = "X";

%``    Direction.Scale(0);

%``    _IsDead = true;

%``}

%``//END INJECTION OF FILE Soldier.inj

End Type

Type Group
  Declare Soldiers as List of Soldier

  Function Void AddSoldier(s as Soldier)
    %``Soldiers.add(s);
  End Function

  Function Boolean IsDead()
    Declare isDead as Boolean
    Foreach Soldier s in Soldiers Do
      %``isDead = s.IsDead();
      If NOT isDead Then
        Return false
      End If
    End Foreach
    Return true
  End Function

  //Specificly generated by the compiler
  Function Void MoveToXY(x as Integer, y as Integer)
  End Function
  Function Void Wait(seconds as Integer)
  End Function
  Function Void MoveToCoord(pos as Coord)
  End Function

%``//START INJECTION OF FILE Group.inj

%``public void Take(Step controller){

%``        if(!IsControlled()){

%``            for(Soldier s: Soldiers){

%``                s.Take(controller);

%``            }

%``            Semaphor = true;

%``            Controller = controller;

%``        }

%``    }

%``

%``    public void Release(){

%``        for(Soldier s: Soldiers){

%``            s.Release();

%``        }

%``        super.Release();

%``    }

%``

%``

%``    public void move(Coord target, double velocity){

%``        SetVelocity(velocity);

%``        SetDirection(DSTFunctions.FindUnitVector(DSTFunctions.CenterOfMass(this.getAliveSoldiersCoords()), target));

%``    }

%``

%``    public void move(Coord target){

%``        for(Soldier s : Soldiers){

%``            if(s.Velocity == 0){

%``                s.Velocity = s.DefaultVelocity;

%``            }

%``        }

%``        SetDirection(DSTFunctions.FindUnitVector(DSTFunctions.CenterOfMass(this.getAliveSoldiersCoords()), target));

%``    }

%``

%``    public void SetVelocity(double velocity){

%``        for(Soldier s : Soldiers)

%``            s.Velocity = velocity;

%``    }

%``

%``    public void SetDirection(Vector direction){

%``        for(Soldier s : Soldiers){

%``            s.Direction = direction;

%``        }

%``    }

%``

%``    public List<Coord> GetCoordList(){

%``        List<Coord> res = new ArrayList<>();

%``        for(Soldier s : Soldiers){

%``            res.add(s.GetPos());

%``        }

%``        return res;

%``    }

%``

%``    public List<Coord> getAliveSoldiersCoords(){

%``        List<Coord> res = new ArrayList<>();

%``        for(Soldier s : Soldiers){

%``            if(!s.IsDead()){

%``                res.add(s.GetPos());

%``            }

%``        }

%``        return res;

%``    }

%``

%``    public void StopMovement(){

%``        for(Soldier s : Soldiers)

%``            s.StopMovement();

%``    }

%``

%``    public Coord GetPos(){

%``        return DSTFunctions.CenterOfMass(getAliveSoldiersCoords());

%``    }

%``//END INJECTION OF FILE Group.inj

End Type

Type Platoon
  Declare Groups as List of Group

  Function Void AddGroup(g as Group)
    %``Groups.add(g);
  End Function

  Function Void AddSoldier(s as Soldier)
    %``Group nGroup = new Group();
    %``nGroup.AddSoldier(s);
    %``AddGroup(nGroup);
  End Function

  Function Boolean IsDead()
    Declare isDead as Boolean
    Foreach Group g in Groups Do
      %``isDead = g.IsDead();
      If NOT isDead Then
        Return false
      End If
    End Foreach
    Return true
  End Function

  //Specificly generated by the compiler
  Function Void MoveToXY(x as Integer, y as Integer)
  End Function
  Function Void Wait(seconds as Integer)
  End Function
  Function Void MoveToCoord(pos as Coord)
  End Function

%``//START INJECTION OF FILE Platoon.inj

%``public void Take(Step controller){

%``        if(!IsControlled()){

%``            for(Group g: Groups){

%``                g.Take(controller);

%``            }

%``            Semaphor = true;

%``            Controller = controller;

%``        }

%``    }

%``

%``    public void Release(){

%``        for(Group g: Groups){

%``            g.Release();

%``        }

%``        super.Release();

%``    }

%``

%``    public void move(Coord target){

%``        move(target, Soldier.DefaultVelocity);

%``    }

%``

%``    public void move(Coord target, double velocity){

%``        for(Group g : Groups){

%``            g.SetVelocity(velocity);

%``        }

%``        SetDirection(DSTFunctions.FindUnitVector(DSTFunctions.CenterOfMass(this.getAliveSoldiersCoords()), target));

%``    }

%``

%``    public void SetVelocity(double velocity){

%``        for(Group g : Groups)

%``            g.SetVelocity(velocity);

%``    }

%``

%``    public void SetDirection(Vector direction){

%``        for(Group g : Groups){

%``            g.SetDirection(direction);

%``        }

%``    }

%``

%``    public List<Coord> GetCoordList(){

%``        List<Coord> res = new ArrayList<>();

%``        for(Group g : Groups)

%``            res.addAll(g.GetCoordList());

%``        return res;

%``    }

%``

%``    public List<Coord> getAliveSoldiersCoords(){

%``        List<Coord> res = new ArrayList<>();

%``        for(Group g : Groups)

%``            res.addAll(g.getAliveSoldiersCoords());

%``        return res;

%``    }

%``

%``    public void StopMovement(){

%``        for(Group g : Groups)

%``            g.StopMovement();

%``    }

%``

%``    public Coord GetPos(){

%``        return DSTFunctions.CenterOfMass(getAliveSoldiersCoords());

%``    }

%``//END INJECTION OF FILE Platoon.inj

End Type

Type Force
  Declare Platoons as List of Platoon

  Function Void AddPlatoon(p as Platoon)
    %``Platoons.add(p);
  End Function

  Function Void AddGroup(g as Group)
    %``Platoon nPlatoon = new Platoon();
    %``nPlatoon.AddGroup(g);
    %``AddPlatoon(nPlatoon);
  End Function

  Function Void AddSoldier(s as Soldier)
    %``Group nGroup = new Group();
    %``nGroup.AddSoldier(s);
    %``AddGroup(nGroup);
  End Function

  Function Boolean IsDead()
  Declare isDead as Boolean
    Foreach Platoon p in Platoons Do
      %``isDead = p.IsDead();
      If NOT isDead Then
        Return false
      End If
    End Foreach
    Return true
  End Function

  //Specificly generated by the compiler
  Function Void MoveToXY(x as Integer, y as Integer)
  End Function
  Function Void Wait(seconds as Integer)
  End Function
  Function Void MoveToCoord(pos as Coord)
  End Function

%``//START INJECTION OF FILE Force.inj

%``public void Take(Step controller){

%``        if(!IsControlled()){

%``            for(Platoon p: Platoons){

%``                p.Take(controller);

%``            }

%``            Semaphor = true;

%``            Controller = controller;

%``        }

%``    }

%``

%``    public void Release(){

%``        for(Platoon p: Platoons){

%``            p.Release();

%``        }

%``        super.Release();

%``    }

%``

%``    public void move(Coord target){

%``        move(target, Soldier.DefaultVelocity);

%``    }

%``

%``    public void move(Coord target, double velocity){

%``        for(Platoon p : Platoons)

%``            p.SetVelocity(velocity);

%``        SetDirection(DSTFunctions.FindUnitVector(DSTFunctions.CenterOfMass(getAliveSoldiersCoords()), target));

%``    }

%``

%``    public void SetDirection(Vector direction){

%``        for(Platoon p : Platoons)

%``            p.SetDirection(direction);

%``    }

%``

%``    public List<Coord> GetCoordList(){

%``        List<Coord> res = new ArrayList<>();

%``        for(Platoon p : Platoons)

%``            res.addAll(p.GetCoordList());

%``        return res;

%``    }

%``

%``    public List<Coord> getAliveSoldiersCoords(){

%``        List<Coord> res = new ArrayList<>();

%``        for(Platoon p : Platoons)

%``            res.addAll(p.getAliveSoldiersCoords());

%``        return res;

%``     }

%``

%``    public void StopMovement(){

%``        for(Platoon p: Platoons)

%``            p.StopMovement();

%``    }

%``

%``    public Coord GetPos(){

%``        return DSTFunctions.CenterOfMass(getAliveSoldiersCoords());

%``    }

%``//END INJECTION OF FILE Force.inj

End Type

// IO
Function Void PrintLine(s as String)
    %``System.out.println(s);
End Function

Function Void Print(s as String)
    %``System.out.print(s);
End Function

Function String Input()
    Declare s as String
    %``Scanner sc = new Scanner(System.in);
    %``s = sc.nextLine();
    Return s
End Function

// Conversion
Function Boolean IsIntegerParseable(s as String)
    %``try {
    %``    Integer.parseInt(s);
    %``    return true;
    %``} catch (NumberFormatException nfe) {}
    Return false
End Function

Function Boolean IsDecimalParseable(s as String)
    %``try {
    %``    Double.parseDouble(s);
    %``    return true;
    %``} catch (NumberFormatException nfe) {}
    Return false
End Function

Function Integer ConvertToInteger(s as String)
    Declare i as Integer
    %``if (!IsIntegerParseable(s)) {
    %``    System.err.println("String '" + s + "' is not an Integer.");
    %``    return 0;
    %``} else {
    %``    i = Integer.parseInt(s);
    %``}
    Return i
End Function

Function Decimal ConvertToDecimal(s as String)
    Declare d as Decimal
     %``if (!IsDecimalParseable(s)) {
    %``    System.err.println("String '" + s + "' is not a Decimal.");
    %``    return 0;
    %``} else {
    %``    d = Double.parseDouble(s);
    %``}
    Return d
End Function

//Steps

Function Void MoveSXY(s as Soldier, x as Integer, y as Integer)
  //MoveStep
End Function

//RunSimulation
Function Void RunSimulation(force1 as Force, force2 as Force, terrain as Terrain, force1Sim as String, force2Sim as String)

End Function

Begin Declarations
  //Declare Terrain
  Declare terrain as Terrain
  terrain.Width = 1800
  terrain.Height = 900

  //Declare Barriers
  Declare bar1vertex1 as Coord
  bar1vertex1 = (30, 50)
  Declare bar1vertex2 as Coord
  bar1vertex2 = (50, 30)
  Declare bar1vertex3 as Coord
  bar1vertex3 = (100, 100)
  Declare bar1vertex4 as Coord
  bar1vertex4 = (300, 600)
  Declare bar1 as Barrier
  bar1.AddVertex(bar1vertex1)
  bar1.AddVertex(bar1vertex2)
  bar1.AddVertex(bar1vertex3)
  bar1.AddVertex(bar1vertex4)

  Declare bar2vertex1 as Coord
  bar2vertex1 = (960, 800)
  Declare bar2vertex2 as Coord
  bar2vertex2 = (900, 840)
  Declare bar2vertex3 as Coord
  bar2vertex3 = (800, 890)
  Declare bar2vertex4 as Coord
  bar2vertex4 = (950, 800)
  Declare bar2 as Barrier
  bar2.AddVertex(bar2vertex1)
  bar2.AddVertex(bar2vertex2)
  bar2.AddVertex(bar2vertex3)
  bar2.AddVertex(bar2vertex4)

  //Declare Allies
  Declare aSol1 as Soldier
  aSol1.Pos = (30, 30)
  Declare aSol2 as Soldier
  aSol2.Pos = (38, 30)
  Declare aSol3 as Soldier
  aSol3.Pos = (34, 38)
  Declare aGroup1 as Group
  aGroup1.AddSoldier(aSol1)
  aGroup1.AddSoldier(aSol2)
  aGroup1.AddSoldier(aSol3)

  Declare aSol4 as Soldier
  aSol4.Pos = (40, 30)
  Declare aSol5 as Soldier
  aSol5.Pos = (48, 30)
  Declare aSol6 as Soldier
  aSol6.Pos = (44, 38)
  Declare aGroup2 as Group
  aGroup2.AddSoldier(aSol4)
  aGroup2.AddSoldier(aSol5)
  aGroup2.AddSoldier(aSol6)

  Declare aGeneral as Soldier
  aGeneral.Pos = (450, 100)
  Declare allies as Force
  allies.AddGroup(aGroup1)
  allies.AddGroup(aGroup2)
  allies.AddSoldier(aGeneral)

  Declare base as Coord
  base = (100, 250)

  //Declare Enemies
  Declare eSol1 as Soldier
  eSol1.Pos = (960, 30)
  Declare eSol2 as Soldier
  eSol2.Pos = (968, 30)
  Declare eSol3 as Soldier
  eSol3.Pos = (964, 38)
  Declare eGroup1 as Group
  eGroup1.AddSoldier(eSol1)
  eGroup1.AddSoldier(eSol2)
  eGroup1.AddSoldier(eSol3)
  Declare enemies as Force
  enemies.AddGroup(eGroup1)

End Declarations

Begin Declare Simulations
  Simulation ProtectTheGeneral allies
    Step 1
      allies.MoveToXY(300, 250)
      aGeneral.Wait(60)
    Step 2
      aGroup1.MoveToXY(600, 300)
      aGroup2.MoveToXY(600, 200)
    Step 3
      aGroup1.MoveToXY(600, 250)
      aGroup2.MoveToXY(600, 250)
      aGeneral.MoveToCoord(base)
    Interrupts

  End Simulation

  Simulation Defend enemies
    Step 1
      enemies.MoveToXY(950, 250)
    Step 2
      enemies.MoveToXY(600, 250)
    Step 3
      enemies.Wait(60)
    Step 4
      enemies.MoveToXY(300, 600)
    Interrupts
  End Simulation
End Declare Simulations

Begin Program
  RunSimulation(allies, enemies, terrain, "ProtectTheGeneral", "Defend")
End Program
