
Type Terrain
  Declare Width as Integer
  Declare Height as Integer

  Function Void Terrain()
  End Function
#Include("extSimObjEmpty.inj")
End Type

Type Coord
  Declare X as Decimal
  Declare Y as Decimal

  Function String ToString()
    Return "(" + X + "," + Y + ")"
  End Function
#Include("Coord.inj")
#Include("extSimObjEmpty.inj")
End Type

Type Barrier
  Declare Vertices as List of Coord

  Function Void AddVertex(vertex as Coord)
    %``Vertices.add(vertex);
  End Function
#Include("extSimObjEmpty.inj")
End Type

Type Soldier
  Declare Pos as Coord
  Declare Velocity as Decimal

  Function Void Soldier()
  End Function

  //Specificly generated by the compiler
  Function Void MoveToXY(x as Integer, y as Integer)
  End Function
#Include("Soldier.inj")
End Type

Type Group
  Declare Soldiers as List of Soldier
  Function Void AddSoldier(s as Soldier)
    %``Soldiers.add(s);
  End Function

  //Specificly generated by the compiler
  Function Void MoveToXY(x as Integer, y as Integer)
  End Function

#Include("Group.inj")
End Type

Type Platoon
  Declare Groups as List of Group
  Function Void AddGroup(g as Group)
    %``Groups.add(g);
  End Function

  Function Void AddSoldier(s as Soldier)
    %``Group nGroup = new Group();
    %``nGroup.AddSoldier(s);
    %``AddGroup(nGroup);
  End Function

  //Specificly generated by the compiler
  Function Void MoveToXY(x as Integer, y as Integer)
  End Function

#Include("Platoon.inj")
End Type

Type Force
  Declare Platoons as List of Platoon
  Function Void AddPlatoon(p as Platoon)
    %``Platoons.add(p);
  End Function

  Function Void AddGroup(g as Group)
    %``Platoon nPlatoon = new Platoon();
    %``nPlatoon.AddGroup(g);
    %``AddPlatoon(nPlatoon);
  End Function

  Function Void AddSoldier(s as Soldier)
    %``Group nGroup = new Group();
    %``nGroup.AddSoldier(s);
    %``AddGroup(nGroup);
  End Function

  //Specificly generated by the compiler
  Function Void MoveToXY(x as Integer, y as Integer)
  End Function
  
#Include("Force.inj")
End Type
// IO
Function Void PrintLine(s as String)
    %``System.out.println(s);
End Function

Function Void Print(s as String)
    %``System.out.print(s);
End Function

Function String Input()
    Declare s as String
    %``Scanner sc = new Scanner(System.in);
    %``s = sc.nextLine();
    Return s
End Function

// Conversion
Function Boolean IsIntegerParseable(s as String)
    %``try {
    %``    Integer.parseInt(s);
    %``    return true;
    %``} catch (NumberFormatException nfe) {}
    Return false
End Function

Function Boolean IsDecimalParseable(s as String)
    %``try {
    %``    Double.parseDouble(s);
    %``    return true;
    %``} catch (NumberFormatException nfe) {}
    Return false
End Function

Function Integer ConvertToInteger(s as String)
    Declare i as Integer
    %``if (!IsIntegerParseable(s)) {
    %``    System.err.println("String '" + s + "' is not an Integer.");
    %``    return 0;
    %``} else {
    %``    i = Integer.parseInt(s);
    %``}
    Return i
End Function

Function Decimal ConvertToDecimal(s as String)
    Declare d as Decimal
     %``if (!IsDecimalParseable(s)) {
    %``    System.err.println("String '" + s + "' is not a Decimal.");
    %``    return 0;
    %``} else {
    %``    d = Double.parseDouble(s);
    %``}
    Return d
End Function

//Steps

Function Void MoveSXY(s as Soldier, x as Integer, y as Integer)
  //MoveStep
End Function

//RunSimulation
Function Void RunSimulation(force1 as Force, force2 as Force, terrain as Terrain, force1Sim as String, force2Sim as String)

End Function
