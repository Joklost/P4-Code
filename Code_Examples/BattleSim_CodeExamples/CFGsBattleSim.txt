
/*
 * End of line bør repræsenteres på en eller anden måde
 */
////////////////////////////////////////////////////////////////////////////////
Start               : Includes Defines TypeDcls FunctionDcls Program FunctionDcls "$"
Includes            : Include Includes
                    |
Include             : "Include (" String ")" EOL  // Header-filer indeholder TypeDcls og FunctionDcls
Defines             : Define Defines
                    |
Define              : "Define " Id " " StdTypes EOL
TypeDcls            : TypeDcl TypeDcls
                    |
TypeDcl             : "Type " Id EOL MemberDcl MemberDcls FunctionDcls " End Type" EOL
MemberDcls          : MemberDcl EOL MemberDcls
                    |
MemberDcl           : Id " as " TypeId
FunctionDcls        : FunctionDcl EOL FunctionDcls
                    |
FunctionDcl         : "Function " TypeId Id "(" Param ")" EOL Stmts " End Function" //******* ÆNDRET
Param               : MemberDcl Params                                           //******* ÆNDRET
                    |                                                            //******* ÆNDRET
Params              : ", " Param                                                 //******* ÆNDRET
                    |                       // FOLLOW - ) ??                     //******* ÆNDRET
Program             : "Begin Program " EOL Stmts " End Program" EOL
////////////////////////////////////////////////////////////////////////////////
Stmts               : Stmt EOL Stmts
                    |
Stmt                : Dcl
                    | Assignment
                    | IfStmt
                    | LoopStmt
                    | SwitchStmt
                    | "Return " ReturnV                                         //******** Ændret
                    | FunctionCall                                              //******** Ændret
ReturnV             : Variable                                                  //******** Ændret
                    | // follow set????                                                          //******** Ændret
/* *** potential horizontal ambiguity: Stmts[#1]: Stmt <--> Stmts */
////////////////////////////////////////////////////////////////////////////////
IfStmt                : "If " Arithmetic " Then " EOL Stmts ElifStmt            //******** Ændret
ElifStmt              : " End If"                                               //******** Ændret
                      | " Else " EOL Stmts " End If"                                //******** Ændret
/* *** potential horizontal ambiguity: IfStmt[#1]: "If " Arithmetic " Then " Stmts <--> V1 */
////////////////////////////////////////////////////////////////////////////////
SwitchStmt          : "Switch " Variable EOL SwitchCases SwitchDefault " End Switch'"
SwitchCases         : SwitchCase EOL SwitchCases
                    |
SwitchCase          : "Case " Variable EOL Stmts
SwitchDefault       : "Default " EOL Stmts
                    |
/* *** potential horizontal ambiguity: SwitchStmt[#1]: "Switch " Variable SwitchCases <--> S1
 * *** potential horizontal ambiguity: SwitchCases[#1]: SwitchCase <--> SwitchCases */
////////////////////////////////////////////////////////////////////////////////
Arithmetic          : "(" Arithmetic ")"              //First: (
                    | Variable Operator               //First: "id", "num", "string", "bool"
                    | LeftUnOperator Variable         //First: NOT, -, ++, --
Operator            : BinOperator Variable            //First: *, +, /, -, %, AND, OR, EQUALS, GREATERTHAN, LESSTHAN, GREATERTHANEQUALS, LESSTHANEQUALS
                    | UnOperator                      //First: ++, --
                    |                                 //Follow: EOL, ), Then, Do
Assignment          : NestedId AssignMode EOL                                   //******** Ændret
AssignMode          : AssignOperator RightAssign                                //******** Ændret
                    | "(" Id MultiAssign Variable ")"                           //******** Ændret
MultiAssign         : ", " Id MultiAssign Variable ", "
                    | ") = ("
AssignOperator      : " = "
                    | " += "
                    | " -= "
                    | " %= "
                    | " *= "
                    | " /= "
////////////////////////////////////////////////////////////////////////////////
RightAssign         : Arithmetic                    // First: (, "id", "num", "string", "bool", "NOT", -, ++, --
                    | Variable                      // First: "id", "num", "string", "bool"
                    | FunctionCall                  // First: "id"
////////////////////////////////////////////////////////////////////////////////
FunctionCall        : NestedId "(" Arguments ")"    // First: "id"
//FunctionCall        : "(" Arguments ")"    // First: "id"
                    |
////////////////////////////////////////////////////////////////////////////////
Arguments             : Arg1             // First: "id", "num", "string", "bool"******** Ændret
                      |                  // Follow: )                           ******** Ændret
Arg1                  : Variable Arg2    // First: "id", "num", "string", "bool"******** Ændret
Arg2                  : ", " Arg1        // First: ,                            ******** Ændret
                      |                  // Follow: )                           ******** Ændret
////////////////////////////////////////////////////////////////////////////////
LoopStmt            : WhileStmt
                    | ForStmt
                    | ForeachStmt
WhileStmt           : "While " Arithmetic " Do " EOL Stmts " End While"
ForeachStmt         : "Foreach " TypeId " " Id " In " NestedId " Do " EOL Stmts " End Foreach"    // Foreach Unit unit In units.unitList Do
ForStmt             : "For " Integer ForIterator Integer " Do " EOL Stmts " End For"
ForIterator         : " To "
                    | " DownTo "
BinOperator         : " * "
                    | " + "
                    | " / "
                    | " - "
                    | " % "
                    | LogicOperator
                    | RelaOperator
LogicOperator       : " AND "
                    | " OR "
RelaOperator        : " EQUALS "
                    | " GREATERTHAN "
                    | " LESSTHAN "
                    | " GREATERTHANEQUALS "
                    | " LESSERTHANEQUALS "
UnOperator          : "++"
                    | "--"
LeftUnOperator      : " NOT"
                    | " -"
                    | UnOperator
Variable            : NestedId
                    | StdTypes
StdTypes            : Number
                    | String
                    | Boolean
Dcl                 : "Declare" Id Dcls " as " TypeId EOL   // Declare units as Unit[90]
Dcls                : ", " Id Dcls
                    |
TypeId              : Id ArrayDcl                                               //****** Ændret
                    | "Number" ArrayDcl                                         //****** Ændret
                    | "String" ArrayDcl                                         //****** Ændret
                    | "Boolean" ArrayDcl                                        //****** Ændret
                    | "Void"                                                    //****** Ændret
                    | "List<" TypeId ">"            // List<Unit>
ArrayDcl            : "[" Integer "]"                                           //****** Ændret
                    |                                                           //****** Ændret
// Follow set: "id", >, If, While, Foreach, For, Switch, Return, End, Default, Function
//ListDcl             :
//                    | TypeId "[" Integer "]"
NestedId            : Id N
N                   : "." NestedId
                    | "[" Integer "]" N
                    |
Id                  : "id"
Number              : "num"
String              : "str"
Boolean             : "bool"
Integer             : "int"
EOL                 : "\n"
                    | "\r"

////////////////////////////////////////////////////////////////////////////////
/* Regular Expressions - testet på https://regex101.com/   // Nedenstående er keywords i sproget
 * Id                  : ^(?=[a-zA-Z_]+[a-zA-Z0-9_]*)(?!.*(AND|OR|NOT|EQUALS|GREATERTHAN|GREATERTHANEQUALS|LESSTHAN|LESSTHANEQUALS|If|While|Do|Foreach|Function|End|Begin|Program|For|Type|as|Number|String|Boolean|Declare|In|Return||Else||List|Include|Switch|Default|Case|NULL|Define|Void)).+$

 * Number              : ^[+-]?[0-9]*\.?[0-9]+$
 * String              : ^"([^"\\]*(\\.[^"\\]*)*)"$
 * Boolean             : ^(true|false)$
 * Integer             : ^[0-9]+$
 * RegEx'en virker ikke med https://services.brics.dk/java/grammar/demo.html
 * hvor der er testet for ambiguity.                                          */
////////////////////////////////////////////////////////////////////////////////
