Include("stdlib.bs")
Include("math.bs")

Type Vertex
  d as Number
  pi as Vertex
End Type

Type Edge
  weight as Number
  startP as Vertex
  endP as Vertex
End Type

Type Graph
  vertexList as List<Vertex>
  edgeList as List<Edge>
End Type

Begin Program
  Declare graph as Graph
  Declare S,A,B,C,D as Vertex
  Declare SA, AB, AC, BC, BD as Edge

  SA.weight = 2
  AB.weight = 6
  AC.weight = 4
  BC.weight = 1
  BD.weight = 3

  SA.startP = S
  AB.startP = A
  AC.startP = A
  BC.startP = B
  BD.startP = B

  SA.endP = A
  AB.endP = B
  AC.endP = C
  BC.endP = C
  BD.endP = D

  graph.vertexList.Add(S)
  graph.vertexList.Add(A)
  graph.vertexList.Add(B)
  graph.vertexList.Add(C)
  graph.vertexList.Add(D)

  graph.edgeList.Add(SA)
  graph.edgeList.Add(AB)
  graph.edgeList.Add(AC)
  graph.edgeList.Add(BC)
  graph.edgeList.Add(BD)

  InitializeSingleSource(graph, S)

  For 1 To graph.vertexList.Count() - 1 Do
      Relax(edges.startP, edges.endP, edges.weight)
      Foreach Edge edges In graph.edgeList Do
    End Foreach
  End For
  Foreach Edge edges In graph.edgeList Do
    If edges.endP.d GREATERTHAN edges.startP.d + edges.weight Then
      Return false
    End If
  End Foreach
  Return true
End Program

Function Void InitializeSingleSource(graph as Graph, source as Vertex)
  Foreach Vertex v In graph Do
    v.d = infinity                  //included in math.bs library
    v.pi = NULL
  End Foreach
  s.d = 0
End Function

Function Void Relax(u as Vertex, v as Vertex, w as Number)
  If v.d GREATERTHAN u.d + w Then
    v.d = u.d + w
    v.pi = u
  End If
End Function
