Begin Declarations

  Declare a, aa as Integer
  a = 10
  aa = 0
  Declare b, bb as Decimal
  b = 4.7
  bb = 4
  Declare c, cc as Boolean
  c = false
  cc = true
  Declare d, dd as String
  d = "test"
  dd = "test2"
  Declare e as Void


  Declare str1, str2 as String
  str1 = "tis"
  str2 = "tis"

End Declarations

Declare Simulations


End Declare Simulations


Function Void Hej()
  //Return 3      // er ulovligt, da Hej() har retur typen void
  Return
End Function

Function Integer Test(param as Integer)
  Return param
End Function

//Function Integer Test2(param as Integer)
  //Return "tre"    // illegal return value
  // SKAL have en retur værdi
//End Function

Begin Program

  // tester assignable:
  //a = a + b   // giver en fejl, da Integer + Decimal ikke implicit konverteres til Integer
  b = b + a   // derimod virker denne, da Integer konverteres til decimal implicit
  //c = 3       // giver en fejl, da c er af typen Boolean
  c = true
  //d = 3       // giver en fejl, da Integer ikke implicit konverteres til string
  d = dd
  dd = "hej"
  //d = c       // giver en fejl, da d er String og c er Boolean
  //e = 3       // giver en fejl, da e er Void
  dd = NULL   // giver ikke fejl, da String kan være NULL
  //a = NULL    // er ikke sikker om dette skal være muligt
  //b = NULL    // er ikke sikker om dette skal være muligt
  //c = NULL    // er ikke sikker om dette skal være muligt

  // tester binaryResultType:
  Declare coord as Coord
  coord = (1, 2)          // virker
  //coord = (2.2, 3)      // resulterer i errorType
  //coord = (3, 3.4)      // resulterer i errorType
  //dd = coord            // kan ikke assignes direkte

  dd = "t" + "t"
  dd = 1 + "t"
  dd = "t" + 1
  dd = 1.0 + "t"
  dd = "t" + 1.0
  dd = true + "t"
  dd = "t" + false
  //dd = "t" + NULL   // errorType
  dd = coord + "t"
  dd = "t" + (2, 2)

  // +, -, *, /, %
  a = 1 + 1
  b = 1.0 + 1
  b = 1 + 1.0
  b = 1.0 + 1.9

  // AND, OR
  c = true AND true
  c = false OR false
  //c = 1 AND 1         // errorType
  //c = 1.0 OR 1.0      // errorType

  // ==
  c = "str" == "str"
  //c = "str" == 1.0    // errorType
  //c = 1.9 == "str"    // errorType
  //c = true == "str"   // errorType
  //c = "str" == 11     // errorType
  c = coord == coord

  // ==, <, >, <=, <=
  c = 1 == 1
  c = 1.0 == 1
  c = 1 == 1.0
  c = 1.0 == 1.0

  // unaryResultType

  // NOT
  c = NOT c
  //c = NOT 1         // errorType
  //c = NOT 1.0       // errorType

  // ++, --, -
  a = a++
  a = -a
  a = a--
  b = b++
  b = -b
  b = b--
  //c = c++           // errorType
  //d = d++           // errorType

  While c == c Do
  End While

  While c Do
  End While

//  While d Do      // d er ikke boolean
//  End While


//  Declare ia as Integer[1][1] // kan ikke bruges til foreach
  Declare ia as Integer[1]
  Foreach Integer i in ia Do
  End Foreach

  Declare sl as List of String
  Foreach String s in sl Do
  End Foreach

  //Foreach String s in d Do  // d er ikke liste eller array
  //End Foreach


  // for:
  For 1 To 10 Do
  End For

  //For c To a Do         // virker ikke
  //End For

  //For b DownTo b Do     // virker ikke; begge expressions skal være int
  //End For

  //For b To 100 Do     // skal give en fejl, da det eneste der kan itereres over er ints
  //  a = a++
  //  //b++             // giver syntax error, da det i grammatikken ikke er lovligt at skrive var++ som en statement..
  //End For

  If b > a Then
    b = a
  Else
    a = 10
  End If

  If (a > a) AND (a < a) Then
  Else If a == a Then
  Else If NOT (a == a) Then
  Else
  End If

  //If a Then     // virker ikke. Expression i If skal resulter i boolean
  //End If

  // switch:
  Switch a
    Case 1
    Case 2
    Case 3
      a = 3
    Default
  End Switch

  //Switch a      // der må ikke være to cases med samme label
  //  Case 1
  //  Case 1
  //  Default
  //End Switch

  //Switch c        // boolean er ikke en legal switch type
  //  Case true
  //  Case 2
  //  Default
  //End Switch

  Return          // er lovligt, da det er en måde hvor man kan afslutte programmet før tid

End Program
