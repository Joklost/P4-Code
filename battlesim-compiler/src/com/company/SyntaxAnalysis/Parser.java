
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package com.company.SyntaxAnalysis;

import java_cup.runtime.*;
import com.company.AST.Nodes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\007\000\002\003" +
    "\011\000\002\014\012\000\002\015\004\000\002\015\003" +
    "\000\002\016\012\000\002\017\004\000\002\017\003\000" +
    "\002\020\005\000\002\021\004\000\002\055\004\000\002" +
    "\055\003\000\002\056\013\000\002\057\004\000\002\057" +
    "\003\000\002\060\004\000\002\060\003\000\002\061\004" +
    "\000\002\004\003\000\002\004\005\000\002\005\011\000" +
    "\002\006\005\000\002\007\004\000\002\007\005\000\002" +
    "\010\005\000\002\010\003\000\002\011\010\000\002\012" +
    "\004\000\002\012\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\005\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\003\000\002\013\003\000\002\036\004\000\002\036\004" +
    "\000\002\025\007\000\002\026\006\000\002\022\011\000" +
    "\002\023\014\000\002\024\013\000\002\027\007\000\002" +
    "\030\010\000\002\030\003\000\002\031\007\000\002\031" +
    "\005\000\002\032\011\000\002\033\004\000\002\033\003" +
    "\000\002\034\005\000\002\035\004\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\007\000" +
    "\002\037\004\000\002\037\004\000\002\037\004\000\002" +
    "\037\004\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\041\004\000\002\042\004\000\002\042\005\000\002" +
    "\043\003\000\002\043\005\000\002\044\003\000\002\044" +
    "\003\000\002\045\003\000\002\045\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\047\005\000\002\047\003\000\002" +
    "\050\006\000\002\050\011\000\002\050\005\000\002\050" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\052\005\000\002\052\005\000\002\052\003\000\002" +
    "\052\003\000\002\053\006\000\002\053\011\000\002\054" +
    "\003\000\002\062\004\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\004\070\004\001\002\000\056\002\uff88\003" +
    "\uff88\005\uff88\006\uff88\010\uff88\011\uff88\012\uff88\013\uff88" +
    "\015\uff88\021\uff88\023\uff88\024\uff88\027\uff88\031\uff88\032" +
    "\uff88\070\uff88\077\uff88\100\uff88\101\uff88\102\uff88\107\uff88" +
    "\110\uff88\001\002\000\004\002\u010c\001\002\000\006\011" +
    "\013\102\014\001\002\000\010\011\ufff5\070\010\102\ufff5" +
    "\001\002\000\056\002\uff89\003\uff89\005\uff89\006\uff89\010" +
    "\uff89\011\uff89\012\uff89\013\uff89\015\uff89\021\uff89\023\uff89" +
    "\024\uff89\027\uff89\031\uff89\032\uff89\070\uff89\077\uff89\100" +
    "\uff89\101\uff89\102\uff89\107\uff89\110\uff89\001\002\000\004" +
    "\070\004\001\002\000\006\011\ufff6\102\ufff6\001\002\000" +
    "\020\004\046\017\043\020\051\025\053\033\044\074\047" +
    "\107\016\001\002\000\004\107\016\001\002\000\004\070" +
    "\uffee\001\002\000\106\007\uff8a\016\uff8a\022\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061" +
    "\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a" +
    "\071\uff8a\072\uff8a\073\uff8a\107\uff8a\001\002\000\004\070" +
    "\004\001\002\000\006\021\021\070\010\001\002\000\004" +
    "\107\016\001\002\000\006\011\ufff2\021\ufff2\001\002\000" +
    "\006\011\013\021\021\001\002\000\004\070\004\001\002" +
    "\000\006\011\ufff3\021\ufff3\001\002\000\006\012\033\110" +
    "\031\001\002\000\012\011\013\012\ufff0\070\010\110\ufff0" +
    "\001\002\000\004\070\uffed\001\002\000\004\070\004\001" +
    "\002\000\006\012\ufff1\110\ufff1\001\002\000\004\102\034" +
    "\001\002\000\004\070\004\001\002\000\010\011\ufff4\070" +
    "\010\102\ufff4\001\002\000\010\012\uffef\070\010\110\uffef" +
    "\001\002\000\006\016\042\040\041\001\002\000\006\016" +
    "\uff9b\040\uff9b\001\002\000\004\107\016\001\002\000\020" +
    "\004\046\017\043\020\051\025\053\033\044\074\047\107" +
    "\016\001\002\000\014\035\uff96\036\uff96\040\uff96\070\uff96" +
    "\107\uff96\001\002\000\014\035\uff93\036\uff93\040\uff93\070" +
    "\uff93\107\uff93\001\002\000\004\070\004\001\002\000\014" +
    "\035\uff94\036\uff94\040\uff94\070\uff94\107\uff94\001\002\000" +
    "\014\035\uff92\036\uff92\040\uff92\070\uff92\107\uff92\001\002" +
    "\000\014\035\uff91\036\uff91\040\uff91\070\uff91\107\uff91\001" +
    "\002\000\014\035\uff95\036\uff95\040\uff95\070\uff95\107\uff95" +
    "\001\002\000\014\035\uff97\036\056\040\uff97\070\uff97\107" +
    "\uff97\001\002\000\004\075\054\001\002\000\016\004\046" +
    "\017\043\020\051\033\044\074\047\107\016\001\002\000" +
    "\012\035\uff98\040\uff98\070\uff98\107\uff98\001\002\000\024" +
    "\030\060\034\073\046\057\062\072\103\062\104\074\105" +
    "\071\106\063\107\016\001\002\000\024\030\060\034\073" +
    "\046\057\062\072\103\062\104\074\105\071\106\063\107" +
    "\016\001\002\000\052\007\uff9d\035\uff9d\037\uff9d\040\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\051\uff9d\052" +
    "\uff9d\060\uff9d\061\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\067\uff9d\070\uff9d\073\uff9d\001\002\000\052\007\uffb3\035" +
    "\uffb3\037\uffb3\040\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\051\uffb3\052\uffb3\060\uffb3\061\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\073\uffb3\001\002" +
    "\000\052\007\uff9f\035\uff9f\037\uff9f\040\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\051\uff9f\052\uff9f\060\uff9f" +
    "\061\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070" +
    "\uff9f\073\uff9f\001\002\000\052\007\uffa0\035\uffa0\037\uffa0" +
    "\040\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\051" +
    "\uffa0\052\uffa0\060\uffa0\061\uffa0\063\uffa0\064\uffa0\065\uffa0" +
    "\066\uffa0\067\uffa0\070\uffa0\073\uffa0\001\002\000\076\007" +
    "\uff8e\034\uff8e\035\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e" +
    "\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\051\uff8e\052" +
    "\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e" +
    "\061\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\073\uff8e\001\002\000\100\007\uff8d" +
    "\034\uff8d\035\uff8d\036\146\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\051\uff8d" +
    "\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060" +
    "\uff8d\061\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d" +
    "\070\uff8d\071\uff8d\072\uff8d\073\uff8d\001\002\000\056\007" +
    "\uffb2\034\142\035\uffb2\037\uffb2\040\uffb2\041\143\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2\060" +
    "\uffb2\061\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2" +
    "\070\uffb2\073\uffb2\001\002\000\040\037\135\043\100\044" +
    "\113\045\104\046\076\047\106\051\103\052\101\060\077" +
    "\061\115\063\112\064\105\065\114\066\111\067\102\001" +
    "\002\000\052\007\uffb1\035\uffb1\037\uffb1\040\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1\060" +
    "\uffb1\061\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1" +
    "\070\uffb1\073\uffb1\001\002\000\052\007\uffa1\035\uffa1\037" +
    "\uffa1\040\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\051\uffa1\052\uffa1\060\uffa1\061\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\067\uffa1\070\uffa1\073\uffa1\001\002\000\024" +
    "\030\060\034\073\046\057\062\072\103\062\104\074\105" +
    "\071\106\063\107\016\001\002\000\024\030\060\034\073" +
    "\046\057\062\072\103\062\104\074\105\071\106\063\107" +
    "\016\001\002\000\052\007\uff9e\035\uff9e\037\uff9e\040\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052" +
    "\uff9e\060\uff9e\061\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e" +
    "\067\uff9e\070\uff9e\073\uff9e\001\002\000\042\035\110\040" +
    "\107\043\100\044\113\045\104\046\076\047\106\051\103" +
    "\052\101\060\077\061\115\063\112\064\105\065\114\066" +
    "\111\067\102\001\002\000\024\030\060\034\073\046\057" +
    "\062\072\103\062\104\074\105\071\106\063\107\016\001" +
    "\002\000\024\030\060\034\073\046\057\062\072\103\062" +
    "\104\074\105\071\106\063\107\016\001\002\000\052\007" +
    "\uffb5\035\uffb5\037\uffb5\040\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\051\uffb5\052\uffb5\060\uffb5\061\uffb5\063" +
    "\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\073\uffb5" +
    "\001\002\000\024\030\060\034\073\046\057\062\072\103" +
    "\062\104\074\105\071\106\063\107\016\001\002\000\024" +
    "\030\060\034\073\046\057\062\072\103\062\104\074\105" +
    "\071\106\063\107\016\001\002\000\024\030\060\034\073" +
    "\046\057\062\072\103\062\104\074\105\071\106\063\107" +
    "\016\001\002\000\024\030\060\034\073\046\057\062\072" +
    "\103\062\104\074\105\071\106\063\107\016\001\002\000" +
    "\024\030\060\034\073\046\057\062\072\103\062\104\074" +
    "\105\071\106\063\107\016\001\002\000\024\030\060\034" +
    "\073\046\057\062\072\103\062\104\074\105\071\106\063" +
    "\107\016\001\002\000\024\030\060\034\073\046\057\062" +
    "\072\103\062\104\074\105\071\106\063\107\016\001\002" +
    "\000\052\007\uffb9\035\uffb9\037\uffb9\040\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\060\uffb9" +
    "\061\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070" +
    "\uffb9\073\uffb9\001\002\000\024\030\060\034\073\046\057" +
    "\062\072\103\062\104\074\105\071\106\063\107\016\001" +
    "\002\000\024\030\060\034\073\046\057\062\072\103\062" +
    "\104\074\105\071\106\063\107\016\001\002\000\052\007" +
    "\uffb4\035\uffb4\037\uffb4\040\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\051\uffb4\052\uffb4\060\uffb4\061\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\073\uffb4" +
    "\001\002\000\024\030\060\034\073\046\057\062\072\103" +
    "\062\104\074\105\071\106\063\107\016\001\002\000\024" +
    "\030\060\034\073\046\057\062\072\103\062\104\074\105" +
    "\071\106\063\107\016\001\002\000\050\007\uffbf\035\uffbf" +
    "\037\uffbf\040\uffbf\043\100\044\113\045\104\046\076\047" +
    "\106\051\103\052\101\060\077\063\112\064\105\065\114" +
    "\066\111\067\102\070\uffbf\073\uffbf\001\002\000\052\007" +
    "\uffba\035\uffba\037\uffba\040\uffba\043\100\044\113\045\104" +
    "\046\076\047\106\051\103\052\101\060\uffba\061\uffba\063" +
    "\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba\073\uffba" +
    "\001\002\000\050\007\uffbe\035\uffbe\037\uffbe\040\uffbe\043" +
    "\100\044\113\045\104\046\076\047\106\051\103\052\101" +
    "\060\uffbe\061\uffbe\064\105\065\114\066\111\067\102\070" +
    "\uffbe\073\uffbe\001\002\000\052\007\uffbd\035\uffbd\037\uffbd" +
    "\040\uffbd\043\100\044\113\045\104\046\076\047\106\051" +
    "\103\052\101\060\uffbd\061\uffbd\063\uffbd\064\uffbd\065\uffbd" +
    "\066\uffbd\067\uffbd\070\uffbd\073\uffbd\001\002\000\040\035" +
    "\123\043\100\044\113\045\104\046\076\047\106\051\103" +
    "\052\101\060\077\061\115\063\112\064\105\065\114\066" +
    "\111\067\102\001\002\000\052\007\uffb8\035\uffb8\037\uffb8" +
    "\040\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\051" +
    "\uffb8\052\uffb8\060\uffb8\061\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\067\uffb8\070\uffb8\073\uffb8\001\002\000\052\007" +
    "\uffc2\035\uffc2\037\uffc2\040\uffc2\043\100\044\113\045\uffc2" +
    "\046\uffc2\047\uffc2\051\uffc2\052\uffc2\060\uffc2\061\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\073\uffc2" +
    "\001\002\000\052\007\uffbc\035\uffbc\037\uffbc\040\uffbc\043" +
    "\100\044\113\045\104\046\076\047\106\051\103\052\101" +
    "\060\uffbc\061\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067" +
    "\uffbc\070\uffbc\073\uffbc\001\002\000\052\007\uffc5\035\uffc5" +
    "\037\uffc5\040\uffc5\043\100\044\113\045\uffc5\046\uffc5\047" +
    "\106\051\103\052\101\060\uffc5\061\uffc5\063\uffc5\064\uffc5" +
    "\065\uffc5\066\uffc5\067\uffc5\070\uffc5\073\uffc5\001\002\000" +
    "\052\007\uffc3\035\uffc3\037\uffc3\040\uffc3\043\100\044\113" +
    "\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\060\uffc3\061" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\073\uffc3\001\002\000\052\007\uffbb\035\uffbb\037\uffbb\040" +
    "\uffbb\043\100\044\113\045\104\046\076\047\106\051\103" +
    "\052\101\060\uffbb\061\uffbb\063\uffbb\064\uffbb\065\uffbb\066" +
    "\uffbb\067\uffbb\070\uffbb\073\uffbb\001\002\000\052\007\uffc1" +
    "\035\uffc1\037\uffc1\040\uffc1\043\100\044\113\045\uffc1\046" +
    "\uffc1\047\uffc1\051\uffc1\052\uffc1\060\uffc1\061\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\073\uffc1\001" +
    "\002\000\050\007\uffc0\035\uffc0\037\uffc0\040\uffc0\043\100" +
    "\044\113\045\104\046\076\047\106\051\103\052\101\061" +
    "\uffc0\063\112\064\105\065\114\066\111\067\102\070\uffc0" +
    "\073\uffc0\001\002\000\052\007\uffc4\035\uffc4\037\uffc4\040" +
    "\uffc4\043\100\044\113\045\uffc4\046\uffc4\047\106\051\103" +
    "\052\101\060\uffc4\061\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\070\uffc4\073\uffc4\001\002\000\052\007\uffb7" +
    "\035\uffb7\037\uffb7\040\uffb7\043\100\044\113\045\uffb7\046" +
    "\uffb7\047\uffb7\051\uffb7\052\uffb7\060\uffb7\061\uffb7\063\uffb7" +
    "\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\073\uffb7\001" +
    "\002\000\014\035\uff9a\036\136\040\uff9a\070\uff9a\107\uff9a" +
    "\001\002\000\024\030\060\034\073\046\057\062\072\103" +
    "\062\104\074\105\071\106\063\107\016\001\002\000\040" +
    "\037\140\043\100\044\113\045\104\046\076\047\106\051" +
    "\103\052\101\060\077\061\115\063\112\064\105\065\114" +
    "\066\111\067\102\001\002\000\012\035\uff99\040\uff99\070" +
    "\uff99\107\uff99\001\002\000\052\007\uffaa\035\uffaa\037\uffaa" +
    "\040\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\051" +
    "\uffaa\052\uffaa\060\uffaa\061\uffaa\063\uffaa\064\uffaa\065\uffaa" +
    "\066\uffaa\067\uffaa\070\uffaa\073\uffaa\001\002\000\026\030" +
    "\060\034\073\035\156\046\057\062\072\103\062\104\074" +
    "\105\071\106\063\107\016\001\002\000\004\107\016\001" +
    "\002\000\076\007\uff8f\034\uff8f\035\uff8f\037\uff8f\040\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f" +
    "\057\uff8f\060\uff8f\061\uff8f\063\uff8f\064\uff8f\065\uff8f\066" +
    "\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\001\002" +
    "\000\100\007\uff90\034\uff90\035\uff90\036\146\037\uff90\040" +
    "\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056" +
    "\uff90\057\uff90\060\uff90\061\uff90\063\uff90\064\uff90\065\uff90" +
    "\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90\001" +
    "\002\000\024\030\060\034\073\046\057\062\072\103\062" +
    "\104\074\105\071\106\063\107\016\001\002\000\040\037" +
    "\150\043\100\044\113\045\104\046\076\047\106\051\103" +
    "\052\101\060\077\061\115\063\112\064\105\065\114\066" +
    "\111\067\102\001\002\000\100\007\uff8c\034\uff8c\035\uff8c" +
    "\036\151\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044" +
    "\uff8c\045\uff8c\046\uff8c\047\uff8c\051\uff8c\052\uff8c\053\uff8c" +
    "\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\063" +
    "\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c" +
    "\072\uff8c\073\uff8c\001\002\000\024\030\060\034\073\046" +
    "\057\062\072\103\062\104\074\105\071\106\063\107\016" +
    "\001\002\000\040\037\153\043\100\044\113\045\104\046" +
    "\076\047\106\051\103\052\101\060\077\061\115\063\112" +
    "\064\105\065\114\066\111\067\102\001\002\000\076\007" +
    "\uff8b\034\uff8b\035\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b" +
    "\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b" +
    "\061\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070" +
    "\uff8b\071\uff8b\072\uff8b\073\uff8b\001\002\000\042\035\uffa7" +
    "\040\uffa7\043\100\044\113\045\104\046\076\047\106\051" +
    "\103\052\101\060\077\061\115\063\112\064\105\065\114" +
    "\066\111\067\102\001\002\000\006\035\160\040\157\001" +
    "\002\000\052\007\uffa9\035\uffa9\037\uffa9\040\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9\060" +
    "\uffa9\061\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9" +
    "\070\uffa9\073\uffa9\001\002\000\024\030\060\034\073\046" +
    "\057\062\072\103\062\104\074\105\071\106\063\107\016" +
    "\001\002\000\052\007\uffa8\035\uffa8\037\uffa8\040\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\051\uffa8\052\uffa8" +
    "\060\uffa8\061\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067" +
    "\uffa8\070\uffa8\073\uffa8\001\002\000\042\035\uffa6\040\uffa6" +
    "\043\100\044\113\045\104\046\076\047\106\051\103\052" +
    "\101\060\077\061\115\063\112\064\105\065\114\066\111" +
    "\067\102\001\002\000\052\007\uffb6\035\uffb6\037\uffb6\040" +
    "\uffb6\043\100\044\113\045\uffb6\046\uffb6\047\uffb6\051\uffb6" +
    "\052\uffb6\060\uffb6\061\uffb6\063\uffb6\064\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\070\uffb6\073\uffb6\001\002\000\046\003\uffd4" +
    "\005\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4\015\uffd4\021" +
    "\uffd4\023\uffd4\024\uffd4\027\uffd4\031\uffd4\032\uffd4\070\010" +
    "\100\uffd4\101\uffd4\107\uffd4\110\uffd4\001\002\000\006\016" +
    "\uff9c\040\uff9c\001\002\000\004\107\016\001\002\000\004" +
    "\034\167\001\002\000\006\035\333\107\016\001\002\000" +
    "\004\070\004\001\002\000\030\003\212\005\205\006\201" +
    "\010\207\012\202\015\216\021\021\023\203\027\204\107" +
    "\016\110\213\001\002\000\044\003\uffe4\005\uffe4\006\uffe4" +
    "\010\uffe4\012\uffe4\015\uffe4\021\uffe4\023\uffe4\024\uffe4\027" +
    "\uffe4\031\uffe4\032\uffe4\070\010\100\uffe4\101\uffe4\107\uffe4" +
    "\110\uffe4\001\002\000\042\003\uffe3\005\uffe3\006\uffe3\010" +
    "\uffe3\012\uffe3\015\uffe3\021\uffe3\023\uffe3\024\uffe3\027\uffe3" +
    "\031\uffe3\032\uffe3\100\uffe3\101\uffe3\107\uffe3\110\uffe3\001" +
    "\002\000\026\034\142\041\143\042\324\043\317\044\326" +
    "\053\322\054\325\055\320\056\321\057\327\001\002\000" +
    "\042\003\uffdd\005\uffdd\006\uffdd\010\uffdd\012\uffdd\015\uffdd" +
    "\021\uffdd\023\uffdd\024\uffdd\027\uffdd\031\uffdd\032\uffdd\100" +
    "\uffdd\101\uffdd\107\uffdd\110\uffdd\001\002\000\042\003\uffde" +
    "\005\uffde\006\uffde\010\uffde\012\uffde\015\uffde\021\uffde\023" +
    "\uffde\024\uffde\027\uffde\031\uffde\032\uffde\100\uffde\101\uffde" +
    "\107\uffde\110\uffde\001\002\000\042\003\uffe2\005\uffe2\006" +
    "\uffe2\010\uffe2\012\uffe2\015\uffe2\021\uffe2\023\uffe2\024\uffe2" +
    "\027\uffe2\031\uffe2\032\uffe2\100\uffe2\101\uffe2\107\uffe2\110" +
    "\uffe2\001\002\000\042\003\uffe5\005\uffe5\006\uffe5\010\uffe5" +
    "\012\uffe5\015\uffe5\021\uffe5\023\uffe5\024\uffe5\027\uffe5\031" +
    "\uffe5\032\uffe5\100\uffe5\101\uffe5\107\uffe5\110\uffe5\001\002" +
    "\000\024\030\060\034\073\046\057\062\072\103\062\104" +
    "\074\105\071\106\063\107\016\001\002\000\004\011\310" +
    "\001\002\000\026\030\060\034\073\046\057\062\072\070" +
    "\004\103\062\104\074\105\071\106\063\107\016\001\002" +
    "\000\016\030\060\103\062\104\074\105\071\106\063\107" +
    "\016\001\002\000\024\030\060\034\073\046\057\062\072" +
    "\103\062\104\074\105\071\106\063\107\016\001\002\000" +
    "\004\070\004\001\002\000\020\004\046\017\043\020\051" +
    "\025\053\033\044\074\047\107\016\001\002\000\042\003" +
    "\uffdf\005\uffdf\006\uffdf\010\uffdf\012\uffdf\015\uffdf\021\uffdf" +
    "\023\uffdf\024\uffdf\027\uffdf\031\uffdf\032\uffdf\100\uffdf\101" +
    "\uffdf\107\uffdf\110\uffdf\001\002\000\042\003\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\012\uffe0\015\uffe0\021\uffe0\023\uffe0\024" +
    "\uffe0\027\uffe0\031\uffe0\032\uffe0\100\uffe0\101\uffe0\107\uffe0" +
    "\110\uffe0\001\002\000\004\070\231\001\002\000\042\003" +
    "\uffd8\005\uffd8\006\uffd8\010\uffd8\012\uffd8\015\uffd8\021\uffd8" +
    "\023\uffd8\024\uffd8\027\uffd8\031\uffd8\032\uffd8\100\uffd8\101" +
    "\uffd8\107\uffd8\110\uffd8\001\002\000\042\003\uffd7\005\uffd7" +
    "\006\uffd7\010\uffd7\012\uffd7\015\uffd7\021\uffd7\023\uffd7\024" +
    "\uffd7\027\uffd7\031\uffd7\032\uffd7\100\uffd7\101\uffd7\107\uffd7" +
    "\110\uffd7\001\002\000\042\003\uffe1\005\uffe1\006\uffe1\010" +
    "\uffe1\012\uffe1\015\uffe1\021\uffe1\023\uffe1\024\uffe1\027\uffe1" +
    "\031\uffe1\032\uffe1\100\uffe1\101\uffe1\107\uffe1\110\uffe1\001" +
    "\002\000\004\107\016\001\002\000\010\041\143\071\222" +
    "\072\220\001\002\000\024\030\uffa5\034\uffa5\046\uffa5\062" +
    "\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\001\002" +
    "\000\024\030\060\034\073\046\057\062\072\103\062\104" +
    "\074\105\071\106\063\107\016\001\002\000\024\030\uffa4" +
    "\034\uffa4\046\uffa4\062\uffa4\103\uffa4\104\uffa4\105\uffa4\106" +
    "\uffa4\107\uffa4\001\002\000\040\007\224\043\100\044\113" +
    "\045\104\046\076\047\106\051\103\052\101\060\077\061" +
    "\115\063\112\064\105\065\114\066\111\067\102\001\002" +
    "\000\004\070\004\001\002\000\030\003\212\005\205\006" +
    "\201\010\207\012\226\015\216\021\021\023\203\027\204" +
    "\107\016\110\213\001\002\000\004\015\227\001\002\000" +
    "\004\070\004\001\002\000\044\003\uffd0\005\uffd0\006\uffd0" +
    "\010\uffd0\012\uffd0\015\uffd0\021\uffd0\023\uffd0\024\uffd0\027" +
    "\uffd0\031\uffd0\032\uffd0\070\010\100\uffd0\101\uffd0\107\uffd0" +
    "\110\uffd0\001\002\000\042\003\uffd9\005\uffd9\006\uffd9\010" +
    "\uffd9\012\uffd9\015\uffd9\021\uffd9\023\uffd9\024\uffd9\027\uffd9" +
    "\031\uffd9\032\uffd9\100\uffd9\101\uffd9\107\uffd9\110\uffd9\001" +
    "\002\000\004\107\016\001\002\000\004\022\234\001\002" +
    "\000\004\107\016\001\002\000\006\007\236\041\143\001" +
    "\002\000\004\070\004\001\002\000\030\003\212\005\205" +
    "\006\201\010\207\012\240\015\216\021\021\023\203\027" +
    "\204\107\016\110\213\001\002\000\004\010\241\001\002" +
    "\000\004\070\004\001\002\000\044\003\uffd1\005\uffd1\006" +
    "\uffd1\010\uffd1\012\uffd1\015\uffd1\021\uffd1\023\uffd1\024\uffd1" +
    "\027\uffd1\031\uffd1\032\uffd1\070\010\100\uffd1\101\uffd1\107" +
    "\uffd1\110\uffd1\001\002\000\044\003\uffda\005\uffda\006\uffda" +
    "\010\uffda\012\uffda\015\uffda\021\uffda\023\uffda\024\uffda\027" +
    "\uffda\031\uffda\032\uffda\070\010\100\uffda\101\uffda\107\uffda" +
    "\110\uffda\001\002\000\040\043\100\044\113\045\104\046" +
    "\076\047\106\051\103\052\101\060\077\061\115\063\112" +
    "\064\105\065\114\066\111\067\102\073\245\001\002\000" +
    "\004\070\004\001\002\000\032\003\212\005\205\006\201" +
    "\010\207\012\251\015\216\021\021\023\203\024\250\027" +
    "\204\107\016\110\213\001\002\000\042\003\uffcd\005\uffcd" +
    "\006\uffcd\010\uffcd\012\uffcd\015\uffcd\021\uffcd\023\uffcd\024" +
    "\uffcd\027\uffcd\031\uffcd\032\uffcd\100\uffcd\101\uffcd\107\uffcd" +
    "\110\uffcd\001\002\000\006\005\256\070\004\001\002\000" +
    "\004\005\253\001\002\000\042\003\uffcf\005\uffcf\006\uffcf" +
    "\010\uffcf\012\uffcf\015\uffcf\021\uffcf\023\uffcf\024\uffcf\027" +
    "\uffcf\031\uffcf\032\uffcf\100\uffcf\101\uffcf\107\uffcf\110\uffcf" +
    "\001\002\000\004\070\004\001\002\000\044\003\uffcb\005" +
    "\uffcb\006\uffcb\010\uffcb\012\uffcb\015\uffcb\021\uffcb\023\uffcb" +
    "\024\uffcb\027\uffcb\031\uffcb\032\uffcb\070\010\100\uffcb\101" +
    "\uffcb\107\uffcb\110\uffcb\001\002\000\030\003\212\005\205" +
    "\006\201\010\207\012\263\015\216\021\021\023\203\027" +
    "\204\107\016\110\213\001\002\000\024\030\060\034\073" +
    "\046\057\062\072\103\062\104\074\105\071\106\063\107" +
    "\016\001\002\000\040\043\100\044\113\045\104\046\076" +
    "\047\106\051\103\052\101\060\077\061\115\063\112\064" +
    "\105\065\114\066\111\067\102\073\260\001\002\000\004" +
    "\070\004\001\002\000\032\003\212\005\205\006\201\010" +
    "\207\012\251\015\216\021\021\023\203\024\250\027\204" +
    "\107\016\110\213\001\002\000\042\003\uffce\005\uffce\006" +
    "\uffce\010\uffce\012\uffce\015\uffce\021\uffce\023\uffce\024\uffce" +
    "\027\uffce\031\uffce\032\uffce\100\uffce\101\uffce\107\uffce\110" +
    "\uffce\001\002\000\004\005\264\001\002\000\004\070\004" +
    "\001\002\000\044\003\uffcc\005\uffcc\006\uffcc\010\uffcc\012" +
    "\uffcc\015\uffcc\021\uffcc\023\uffcc\024\uffcc\027\uffcc\031\uffcc" +
    "\032\uffcc\070\010\100\uffcc\101\uffcc\107\uffcc\110\uffcc\001" +
    "\002\000\004\070\004\001\002\000\006\041\143\070\uffa3" +
    "\001\002\000\004\070\uffa2\001\002\000\006\031\275\032" +
    "\273\001\002\000\010\031\uffc8\032\uffc8\070\010\001\002" +
    "\000\004\070\004\001\002\000\004\012\301\001\002\000" +
    "\014\030\060\103\062\104\074\105\071\106\063\001\002" +
    "\000\006\031\uffc9\032\uffc9\001\002\000\004\070\004\001" +
    "\002\000\032\003\212\005\205\006\201\010\207\015\216" +
    "\021\021\023\203\027\204\031\uffc7\032\uffc7\107\016\110" +
    "\213\001\002\000\004\027\302\001\002\000\004\070\004" +
    "\001\002\000\044\003\uffca\005\uffca\006\uffca\010\uffca\012" +
    "\uffca\015\uffca\021\uffca\023\uffca\024\uffca\027\uffca\031\uffca" +
    "\032\uffca\070\010\100\uffca\101\uffca\107\uffca\110\uffca\001" +
    "\002\000\030\003\212\005\205\006\201\010\207\012\uffc6" +
    "\015\216\021\021\023\203\027\204\107\016\110\213\001" +
    "\002\000\044\003\uffdb\005\uffdb\006\uffdb\010\uffdb\012\uffdb" +
    "\015\uffdb\021\uffdb\023\uffdb\024\uffdb\027\uffdb\031\uffdb\032" +
    "\uffdb\070\010\100\uffdb\101\uffdb\107\uffdb\110\uffdb\001\002" +
    "\000\040\043\100\044\113\045\104\046\076\047\106\051" +
    "\103\052\101\060\077\061\115\063\112\064\105\065\114" +
    "\066\111\067\102\070\004\001\002\000\044\003\uffdc\005" +
    "\uffdc\006\uffdc\010\uffdc\012\uffdc\015\uffdc\021\uffdc\023\uffdc" +
    "\024\uffdc\027\uffdc\031\uffdc\032\uffdc\070\010\100\uffdc\101" +
    "\uffdc\107\uffdc\110\uffdc\001\002\000\004\070\uffec\001\002" +
    "\000\040\007\312\043\100\044\113\045\104\046\076\047" +
    "\106\051\103\052\101\060\077\061\115\063\112\064\105" +
    "\065\114\066\111\067\102\001\002\000\004\070\004\001" +
    "\002\000\030\003\212\005\205\006\201\010\207\012\314" +
    "\015\216\021\021\023\203\027\204\107\016\110\213\001" +
    "\002\000\004\006\315\001\002\000\004\070\004\001\002" +
    "\000\044\003\uffd2\005\uffd2\006\uffd2\010\uffd2\012\uffd2\015" +
    "\uffd2\021\uffd2\023\uffd2\024\uffd2\027\uffd2\031\uffd2\032\uffd2" +
    "\070\010\100\uffd2\101\uffd2\107\uffd2\110\uffd2\001\002\000" +
    "\042\003\uffd6\005\uffd6\006\uffd6\010\uffd6\012\uffd6\015\uffd6" +
    "\021\uffd6\023\uffd6\024\uffd6\027\uffd6\031\uffd6\032\uffd6\100" +
    "\uffd6\101\uffd6\107\uffd6\110\uffd6\001\002\000\024\030\uffac" +
    "\034\uffac\046\uffac\062\uffac\103\uffac\104\uffac\105\uffac\106" +
    "\uffac\107\uffac\001\002\000\024\030\uffab\034\uffab\046\uffab" +
    "\062\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab\001" +
    "\002\000\024\030\uffaf\034\uffaf\046\uffaf\062\uffaf\103\uffaf" +
    "\104\uffaf\105\uffaf\106\uffaf\107\uffaf\001\002\000\024\030" +
    "\060\034\073\046\057\062\072\103\062\104\074\105\071" +
    "\106\063\107\016\001\002\000\024\030\uffb0\034\uffb0\046" +
    "\uffb0\062\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0" +
    "\001\002\000\024\030\uffae\034\uffae\046\uffae\062\uffae\103" +
    "\uffae\104\uffae\105\uffae\106\uffae\107\uffae\001\002\000\042" +
    "\003\uffd5\005\uffd5\006\uffd5\010\uffd5\012\uffd5\015\uffd5\021" +
    "\uffd5\023\uffd5\024\uffd5\027\uffd5\031\uffd5\032\uffd5\100\uffd5" +
    "\101\uffd5\107\uffd5\110\uffd5\001\002\000\024\030\uffad\034" +
    "\uffad\046\uffad\062\uffad\103\uffad\104\uffad\105\uffad\106\uffad" +
    "\107\uffad\001\002\000\040\043\100\044\113\045\104\046" +
    "\076\047\106\051\103\052\101\060\077\061\115\063\112" +
    "\064\105\065\114\066\111\067\102\070\004\001\002\000" +
    "\044\003\uffd3\005\uffd3\006\uffd3\010\uffd3\012\uffd3\015\uffd3" +
    "\021\uffd3\023\uffd3\024\uffd3\027\uffd3\031\uffd3\032\uffd3\070" +
    "\010\100\uffd3\101\uffd3\107\uffd3\110\uffd3\001\002\000\006" +
    "\035\341\040\340\001\002\000\004\070\uffea\001\002\000" +
    "\006\035\uffe7\040\uffe7\001\002\000\004\016\336\001\002" +
    "\000\020\004\046\017\043\020\051\025\053\033\044\074" +
    "\047\107\016\001\002\000\006\035\uffeb\040\uffeb\001\002" +
    "\000\004\107\016\001\002\000\004\070\uffe9\001\002\000" +
    "\006\035\uffe8\040\uffe8\001\002\000\004\013\353\001\002" +
    "\000\010\011\013\013\345\070\010\001\002\000\004\026" +
    "\346\001\002\000\004\070\004\001\002\000\030\003\212" +
    "\005\205\006\201\010\207\012\350\015\216\021\021\023" +
    "\203\027\204\107\016\110\213\001\002\000\004\026\351" +
    "\001\002\000\004\070\004\001\002\000\006\013\uffff\070" +
    "\010\001\002\000\004\021\364\001\002\000\004\013\356" +
    "\001\002\000\004\002\000\001\002\000\004\014\357\001" +
    "\002\000\004\070\004\001\002\000\030\003\212\005\205" +
    "\006\201\010\207\012\361\015\216\021\021\023\203\027" +
    "\204\107\016\110\213\001\002\000\004\014\362\001\002" +
    "\000\004\070\004\001\002\000\006\002\uffe6\070\010\001" +
    "\002\000\004\076\365\001\002\000\004\070\004\001\002" +
    "\000\006\012\372\077\370\001\002\000\010\012\ufffc\070" +
    "\010\077\ufffc\001\002\000\004\107\016\001\002\000\006" +
    "\012\ufffd\077\ufffd\001\002\000\004\021\373\001\002\000" +
    "\004\076\374\001\002\000\004\070\004\001\002\000\006" +
    "\013\ufffe\070\010\001\002\000\004\107\016\001\002\000" +
    "\006\041\143\070\004\001\002\000\006\100\u0102\101\u0103" +
    "\001\002\000\010\070\010\100\ufff9\101\ufff9\001\002\000" +
    "\004\104\u010a\001\002\000\004\070\004\001\002\000\004" +
    "\012\u0106\001\002\000\006\100\ufffa\101\ufffa\001\002\000" +
    "\004\077\u0107\001\002\000\004\070\004\001\002\000\010" +
    "\012\ufffb\070\010\077\ufffb\001\002\000\030\003\212\005" +
    "\205\006\201\010\207\012\ufff7\015\216\021\021\023\203" +
    "\027\204\107\016\110\213\001\002\000\004\070\004\001" +
    "\002\000\032\003\212\005\205\006\201\010\207\015\216" +
    "\021\021\023\203\027\204\100\ufff8\101\ufff8\107\016\110" +
    "\213\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\010\002\004\055\005\062\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\010\005\014" +
    "\056\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\342\062\343\001\001\000\002\001\001\000\010" +
    "\050\164\051\051\054\047\001\001\000\004\054\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\017" +
    "\001\001\000\006\025\021\057\022\001\001\000\006\047" +
    "\036\054\037\001\001\000\002\001\001\000\010\004\023" +
    "\005\014\025\024\001\001\000\006\060\025\062\026\001" +
    "\001\000\002\001\001\000\004\061\031\001\001\000\004" +
    "\005\027\001\001\000\002\001\001\000\004\062\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\163\001\001\000\010" +
    "\050\044\051\051\054\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\051\054\054\047" +
    "\001\001\000\002\001\001\000\016\037\066\041\060\046" +
    "\067\052\065\053\063\054\064\001\001\000\016\037\161" +
    "\041\060\046\067\052\065\053\063\054\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\037\133\041\060\046\067\052\065\053" +
    "\063\054\064\001\001\000\016\037\074\041\060\046\067" +
    "\052\065\053\063\054\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\037\132\041\060\046\067\052\065" +
    "\053\063\054\064\001\001\000\016\037\131\041\060\046" +
    "\067\052\065\053\063\054\064\001\001\000\002\001\001" +
    "\000\016\037\130\041\060\046\067\052\065\053\063\054" +
    "\064\001\001\000\016\037\127\041\060\046\067\052\065" +
    "\053\063\054\064\001\001\000\016\037\126\041\060\046" +
    "\067\052\065\053\063\054\064\001\001\000\016\037\125" +
    "\041\060\046\067\052\065\053\063\054\064\001\001\000" +
    "\016\037\124\041\060\046\067\052\065\053\063\054\064" +
    "\001\001\000\016\037\123\041\060\046\067\052\065\053" +
    "\063\054\064\001\001\000\016\037\121\041\060\046\067" +
    "\052\065\053\063\054\064\001\001\000\002\001\001\000" +
    "\016\037\120\041\060\046\067\052\065\053\063\054\064" +
    "\001\001\000\016\037\117\041\060\046\067\052\065\053" +
    "\063\054\064\001\001\000\002\001\001\000\016\037\116" +
    "\041\060\046\067\052\065\053\063\054\064\001\001\000" +
    "\016\037\115\041\060\046\067\052\065\053\063\054\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\037\136\041\060\046\067\052\065\053\063" +
    "\054\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\037\153\041\060\043\154\046\067" +
    "\052\065\053\063\054\064\001\001\000\006\053\143\054" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\146\041\060\046\067\052\065\053\063\054\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\037\151" +
    "\041\060\046\067\052\065\053\063\054\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\160\041\060\046" +
    "\067\052\065\053\063\054\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\165\001\001\000\004\007\167" +
    "\001\001\000\010\006\333\010\331\054\334\001\001\000" +
    "\006\012\170\062\171\001\001\000\034\013\177\022\210" +
    "\023\207\024\175\025\172\026\176\027\214\032\174\036" +
    "\213\041\205\052\173\053\063\054\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\322\042\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\037\310\041\060\046\067\052" +
    "\065\053\063\054\064\001\001\000\002\001\001\000\020" +
    "\037\305\041\060\046\067\052\065\053\063\054\064\062" +
    "\304\001\001\000\014\045\265\046\267\052\266\053\063" +
    "\054\064\001\001\000\016\037\243\041\060\046\067\052" +
    "\065\053\063\054\064\001\001\000\004\062\242\001\001" +
    "\000\010\050\231\051\051\054\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\052\216\053" +
    "\063\054\064\001\001\000\004\044\220\001\001\000\002" +
    "\001\001\000\016\037\222\041\060\046\067\052\065\053" +
    "\063\054\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\224\062\171\001\001\000\034\013\177\022" +
    "\210\023\207\024\175\025\172\026\176\027\214\032\174" +
    "\036\213\041\205\052\173\053\063\054\064\001\001\000" +
    "\002\001\001\000\004\062\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\232\001\001\000\002\001" +
    "\001\000\010\052\234\053\063\054\064\001\001\000\002" +
    "\001\001\000\006\012\236\062\171\001\001\000\034\013" +
    "\177\022\210\023\207\024\175\025\172\026\176\027\214" +
    "\032\174\036\213\041\205\052\173\053\063\054\064\001" +
    "\001\000\002\001\001\000\004\062\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\245\062\171\001\001\000\040\013\177\022\210\023\207" +
    "\024\175\025\172\026\176\027\214\030\251\031\246\032" +
    "\174\036\213\041\205\052\173\053\063\054\064\001\001" +
    "\000\002\001\001\000\006\012\254\062\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\253\001\001" +
    "\000\002\001\001\000\034\013\177\022\210\023\207\024" +
    "\175\025\172\026\176\027\214\032\174\036\213\041\205" +
    "\052\173\053\063\054\064\001\001\000\016\037\256\041" +
    "\060\046\067\052\065\053\063\054\064\001\001\000\002" +
    "\001\001\000\006\012\260\062\171\001\001\000\040\013" +
    "\177\022\210\023\207\024\175\025\172\026\176\027\214" +
    "\030\261\031\246\032\174\036\213\041\205\052\173\053" +
    "\063\054\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\264\001\001\000\002\001\001\000\006\033" +
    "\270\062\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\275\035\273\001\001\000\002\001\001\000" +
    "\006\012\303\062\171\001\001\000\002\001\001\000\004" +
    "\046\276\001\001\000\002\001\001\000\006\012\277\062" +
    "\171\001\001\000\034\013\177\022\210\023\207\024\175" +
    "\025\172\026\176\027\214\032\174\036\213\041\205\052" +
    "\173\053\063\054\064\001\001\000\002\001\001\000\004" +
    "\062\302\001\001\000\002\001\001\000\034\013\177\022" +
    "\210\023\207\024\175\025\172\026\176\027\214\032\174" +
    "\036\213\041\205\052\173\053\063\054\064\001\001\000" +
    "\002\001\001\000\004\062\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\312\062" +
    "\171\001\001\000\034\013\177\022\210\023\207\024\175" +
    "\025\172\026\176\027\214\032\174\036\213\041\205\052" +
    "\173\053\063\054\064\001\001\000\002\001\001\000\004" +
    "\062\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\327\041\060\046\067\052\065\053\063\054\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\330\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\336\051\051\054\047\001" +
    "\001\000\002\001\001\000\006\006\341\054\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\353\001" +
    "\001\000\004\005\027\001\001\000\002\001\001\000\006" +
    "\012\346\062\171\001\001\000\034\013\177\022\210\023" +
    "\207\024\175\025\172\026\176\027\214\032\174\036\213" +
    "\041\205\052\173\053\063\054\064\001\001\000\002\001" +
    "\001\000\004\062\351\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\357\062\171\001\001\000\034" +
    "\013\177\022\210\023\207\024\175\025\172\026\176\027" +
    "\214\032\174\036\213\041\205\052\173\053\063\054\064" +
    "\001\001\000\002\001\001\000\004\062\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\365\062\366" +
    "\001\001\000\004\016\370\001\001\000\002\001\001\000" +
    "\004\054\375\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\374\001\001\000\002\001" +
    "\001\000\010\052\376\053\063\054\064\001\001\000\006" +
    "\017\377\062\u0100\001\001\000\006\020\u0104\021\u0103\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u0108" +
    "\062\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\u0107\001\001\000\002\001\001" +
    "\000\034\013\177\022\210\023\207\024\175\025\172\026" +
    "\176\027\214\032\174\036\213\041\205\052\173\053\063" +
    "\054\064\001\001\000\006\012\u010a\062\171\001\001\000" +
    "\034\013\177\022\210\023\207\024\175\025\172\026\176" +
    "\027\214\032\174\036\213\041\205\052\173\053\063\054" +
    "\064\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 /*token_num++; */return s.next_token(); 
    }


    public boolean errorFound = false;
    private Scanner s;
    public Parser(com.company.SyntaxAnalysis.Scanner s, boolean useMe) {
        super(s);
        this.s = s;
    }
    public void report_error(String message, Object info) {
        errorFound = true;
        System.err.print(message);
        System.err.flush();
        if (info instanceof Symbol) {
            if (((Symbol)info).left != -1) {
                System.err.println(" at line " + (((Symbol)info).left + 1 - Preprocessor.STDLIB_LINES) + " column " + (((Symbol)info).right + 1) + " of input");
            } else {
                System.err.println("");
            }
        } else {
            System.err.println("");
        }

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Start start_val = (Start)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= TypeDcls FunctionDcls DclBlock SimBlock Program 
            {
              Start RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeDeclarationList tl = (TypeDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fds1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fds1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		FunctionDclList fds1 = (FunctionDclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DclBlock db = (DclBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimBlock s = (SimBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Start(db, s, tl, fds1, p, dbleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DclBlock ::= MultEOL BEGIN DECLARATIONS Stmts END DECLARATIONS MultEOL 
            {
              DclBlock RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new DclBlock(ss, ssleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DclBlock",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SimBlock ::= BEGIN DECLARE SIMULATIONS Simulations END DECLARE SIMULATIONS MultEOL 
            {
              SimBlock RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimulationList s = (SimulationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = new SimBlock(s, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimBlock",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Simulations ::= Simulations Simulation 
            {
              SimulationList RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimulationList ss = (SimulationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simulation s = (Simulation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ss; ss.addElement(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simulations",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Simulations ::= MultEOL 
            {
              SimulationList RESULT =null;
		 RESULT = new SimulationList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simulations",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Simulation ::= SIMULATION Identifier ObjectId SimSteps Interrupts END SIMULATION MultEOL 
            {
              Simulation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		IdentifierReferencing oi = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimStepList sis = (SimStepList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Interrupts is = (Interrupts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Simulation(id, oi, sis, is, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simulation",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SimSteps ::= SimSteps SimStep 
            {
              SimStepList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimStepList sl = (SimStepList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimStep s = (SimStep)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sl; sl.addElement(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimSteps",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SimSteps ::= MultEOL 
            {
              SimStepList RESULT =null;
		 RESULT = new SimStepList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimSteps",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SimStep ::= STEP INTEGER_LITERAL Stmts 
            {
              SimStep RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimStep(i, ss, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimStep",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Interrupts ::= INTERRUPTS Stmts 
            {
              Interrupts RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Interrupts(ss, ssleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Interrupts",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TypeDcls ::= TypeDcls TypeDcl 
            {
              TypeDeclarationList RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeDeclarationList tl = (TypeDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDeclaration t = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tl; tl.addElement(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDcls",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeDcls ::= MultEOL 
            {
              TypeDeclarationList RESULT =null;
		 RESULT = new TypeDeclarationList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDcls",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeDcl ::= TYPE Identifier MultEOL Dcls FunctionDcls JavaStringList END TYPE MultEOL 
            {
              TypeDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DeclarationList dl = (DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		FunctionDclList fdl = (FunctionDclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		JavaStringList j = (JavaStringList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new TypeDeclaration(i, dl, fdl, j, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDcl",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Dcls ::= Dcls Dcl 
            {
              DeclarationList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclarationList dl = (DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dcl d = (Dcl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dl; dl.addElement(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dcls",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Dcls ::= Dcl 
            {
              DeclarationList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dcl d = (Dcl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclarationList(0); RESULT.addElement(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dcls",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // JavaStringList ::= JavaStringList JavaString 
            {
              JavaStringList RESULT =null;
		int jlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int jlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JavaStringList jl = (JavaStringList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JavaString j = (JavaString)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = jl; jl.addElement(j); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JavaStringList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // JavaStringList ::= MultEOL 
            {
              JavaStringList RESULT =null;
		 RESULT = new JavaStringList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JavaStringList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // JavaString ::= JAVASTRING MultEOL 
            {
              JavaString RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new JavaString(j, jleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JavaString",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionDcls ::= FunctionDcl 
            {
              FunctionDclList RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDcl fd = (FunctionDcl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionDclList(0); RESULT.addElement(fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDcls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionDcls ::= FunctionDcls MultEOL FunctionDcl 
            {
              FunctionDclList RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FunctionDclList fds = (FunctionDclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDcl fd = (FunctionDcl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fds; fds.addElement(fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDcls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionDcl ::= FUNCTION TypeId Identifier Params Stmts END FUNCTION 
            {
              FunctionDcl RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParamList p = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunctionDcl(ti, id, p, ss, tileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDcl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Param ::= Identifier AS TypeId 
            {
              Param RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Param(id, ti, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Param",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Params ::= LPAREN RPAREN 
            {
              ParamList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ParamList(lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Params",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Params ::= LPAREN ParamList RPAREN 
            {
              ParamList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Params",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParamList ::= ParamList COMMA Param 
            {
              ParamList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pl; pl.addElement(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamList ::= Param 
            {
              ParamList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamList(pleft); RESULT.addElement(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Program ::= BEGIN PROGRAM Stmts END PROGRAM MultEOL 
            {
              Program RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Program(ss, ssleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stmts ::= Stmts Stmt 
            {
              StmtList RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.addElement(s); RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stmts ::= MultEOL 
            {
              StmtList RESULT =null;
		 RESULT = new StmtList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stmt ::= Dcl 
            {
              Stmt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dcl d = (Dcl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stmt ::= Assignment 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stmt ::= IfStmt 
            {
              Stmt RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStmt is = (IfStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stmt ::= WhileStmt 
            {
              Stmt RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStmt ws = (WhileStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stmt ::= ForeachStmt 
            {
              Stmt RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForeachStmt fs = (ForeachStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stmt ::= ForStmt 
            {
              Stmt RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForStmt fs = (ForStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stmt ::= SwitchStmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SwitchStmt s = (SwitchStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stmt ::= RETURN Expression MultEOL 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnExpr(e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stmt ::= RETURN MultEOL 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(rleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stmt ::= FunctionCall MultEOL 
            {
              Stmt RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCallStmt(fc, fcleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stmt ::= error EOL 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stmt ::= JAVASTRING 
            {
              Stmt RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new JavaStringStmt(j, jleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stmt ::= UnaryStmt 
            {
              Stmt RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnaryStmt u = (UnaryStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // UnaryStmt ::= ObjectId PLUSPLUS 
            {
              UnaryStmt RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierReferencing oi = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PlusPlusStmt(oi, oileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // UnaryStmt ::= ObjectId MINUSMINUS 
            {
              UnaryStmt RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierReferencing oi = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MinusMinusStmt(oi, oileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryStmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Dcl ::= DECLARE DclIds AS TypeId MultEOL 
            {
              Dcl RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DclIdList ds = (DclIdList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Dcl(ds, ti, dsleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dcl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Assignment ::= ObjectId AssignOp Expression MultEOL 
            {
              Assignment RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IdentifierReferencing oi = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AssignOp ao = (AssignOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assignment(oi, ao, e, oileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WhileStmt ::= WHILE Expression DO Stmts END WHILE MultEOL 
            {
              WhileStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new WhileStmt(e, ss, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ForeachStmt ::= FOREACH TypeId Identifier IN ObjectId DO Stmts END FOREACH MultEOL 
            {
              ForeachStmt RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int oileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		IdentifierReferencing oi = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ForeachStmt(ti, id, oi, s, tileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForeachStmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ForStmt ::= FOR ObjectId ForIterator Expression DO Stmts END FOR MultEOL 
            {
              ForStmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		IdentifierReferencing i = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ForIterator fi = (ForIterator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ForStmt(i, fi, e, ss, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IfStmt ::= IF Expression THEN Stmts ElseIfStmt 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElifStmt els = (ElifStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(e, ss, els, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ElseIfStmt ::= ELSE IF Expression THEN Stmts ElseIfStmt 
            {
              ElifStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElifStmt es = (ElifStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElseIfStmt(e, s, es, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ElseIfStmt ::= ElseStmt 
            {
              ElifStmt RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElifStmt es = (ElifStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ElseStmt ::= ELSE Stmts END IF MultEOL 
            {
              ElifStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ElseStmt(s, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ElseStmt ::= END IF MultEOL 
            {
              ElifStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new EndIfStmt(eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SwitchStmt ::= SWITCH Variable SwitchCases SwitchDef END SWITCH MultEOL 
            {
              SwitchStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int swcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int swcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SwitchCaseList swcs = (SwitchCaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int swdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int swdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SwitchDef swd = (SwitchDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new SwitchStmt(v, swcs, swd, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SwitchCases ::= SwitchCases SwitchCase 
            {
              SwitchCaseList RESULT =null;
		int swcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int swcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SwitchCaseList swcs = (SwitchCaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SwitchCase swc = (SwitchCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 swcs.addElement(swc); RESULT = swcs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCases",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SwitchCases ::= MultEOL 
            {
              SwitchCaseList RESULT =null;
		 RESULT = new SwitchCaseList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCases",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SwitchCase ::= CASE StdLiteral Stmts 
            {
              SwitchCase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StdLiteral v = (StdLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SwitchCase(v, ss, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCase",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SwitchDef ::= DEFAULT Stmts 
            {
              SwitchDef RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SwitchDef(ss, dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchDef",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expression ::= Expression PLUS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expression ::= Expression MINUS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expression ::= Expression MULT Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expression ::= Expression DIV Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expression ::= Expression MOD Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expression ::= Expression AND Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expression ::= Expression OR Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expression ::= Expression EQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicEqualsExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expression ::= Expression LESSTHAN Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThanExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expression ::= Expression GREATERTHAN Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThanExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expression ::= Expression LESSTHANEQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThanEqualsExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expression ::= Expression GREATERTHANEQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualsExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expression ::= LPAREN Expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expression ::= LPAREN Expression COMMA Expression RPAREN 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CoordExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expression ::= NOT Expression 
            {
              Expression RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpr(e, notleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expression ::= MINUS Expression 
            {
              Expression RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnMinusExpr(e, minleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expression ::= Expression PLUSPLUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PlusPlusExpr(e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expression ::= Expression MINUSMINUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MinusMinusExpr(e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expression ::= FunctionCall 
            {
              Expression RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionCallExpr(fc, fcleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expression ::= ObjectId 
            {
              Expression RESULT =null;
		int nidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierReferencing nid = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ObjectIdExpr(nid, nidleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expression ::= StdLiteral 
            {
              Expression RESULT =null;
		int stdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StdLiteral std = (StdLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StdLiteralExpr(std, stdleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // AssignOp ::= EQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // AssignOp ::= PLUSEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // AssignOp ::= MINUSEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AssignOp ::= MODEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AssignOp ::= MULTEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AssignOp ::= DIVEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FunctionCall ::= ObjectId Arguments 
            {
              FunctionCall RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierReferencing ni = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArgumentList arg = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionCall(ni, arg, nileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Arguments ::= LPAREN RPAREN 
            {
              ArgumentList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArgumentList(lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Arguments ::= LPAREN ArgumentList RPAREN 
            {
              ArgumentList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = al; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ArgumentList ::= Expression 
            {
              ArgumentList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentList(eleft); RESULT.addElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ArgumentList ::= ArgumentList COMMA Expression 
            {
              ArgumentList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = al; al.addElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ForIterator ::= TO 
            {
              ForIterator RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ToIterator(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForIterator",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ForIterator ::= DOWNTO 
            {
              ForIterator RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DownToIterator(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForIterator",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Variable ::= ObjectId 
            {
              Variable RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierReferencing ni = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableObjectId(ni, nileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Variable ::= StdLiteral 
            {
              Variable RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StdLiteral st = (StdLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableStdLiteral(st, stleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // StdLiteral ::= DECIMAL_LITERAL 
            {
              StdLiteral RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double dec = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecimalLiteral(dec, decleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // StdLiteral ::= STRING_LITERAL 
            {
              StdLiteral RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(str, strleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // StdLiteral ::= BOOLEAN_LITERAL 
            {
              StdLiteral RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanLiteral(bool, boolleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // StdLiteral ::= INTEGER_LITERAL 
            {
              StdLiteral RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer in = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(in, inleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // StdLiteral ::= NULL_LITERAL 
            {
              StdLiteral RESULT =null;
		int nulleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nulright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nul = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NullLiteral(nulleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DclIds ::= DclIds COMMA Identifier 
            {
              DclIdList RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DclIdList ds = (DclIdList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ds; ds.addElement(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DclIds",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DclIds ::= Identifier 
            {
              DclIdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DclIdList(0); RESULT.addElement(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DclIds",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TypeId ::= TypeName LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeName tn = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array1D(tn, e, tnleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TypeId ::= TypeName LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TypeName tn = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array2D(tn, e1, e2, tnleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TypeId ::= LIST OF TypeName 
            {
              TypeIdentifier RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeName tn = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ListOf(tn, tnleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TypeId ::= TypeName 
            {
              TypeIdentifier RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeName tn = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tn; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TypeName ::= DECIMAL 
            {
              TypeName RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decimal(dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TypeName ::= STRING 
            {
              TypeName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringT(sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TypeName ::= BOOLEAN 
            {
              TypeName RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanT(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TypeName ::= INTEGER 
            {
              TypeName RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerT(ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TypeName ::= VOID 
            {
              TypeName RESULT =null;
		int voleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int voright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VoidT(voleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TypeName ::= Identifier 
            {
              TypeName RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CustomTypeIdentifier(id, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ObjectId ::= ObjectId DOT Identifier 
            {
              IdentifierReferencing RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierReferencing o = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ObjectReferencing(o, i, oleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ObjectId",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ObjectId ::= ObjectId DOT ArrayRef 
            {
              IdentifierReferencing RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierReferencing o = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierReferencing a = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ObjectReferencing(o, a, oleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ObjectId",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ObjectId ::= ArrayRef 
            {
              IdentifierReferencing RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierReferencing a = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ObjectId",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ObjectId ::= Identifier 
            {
              IdentifierReferencing RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ObjectId",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ArrayRef ::= Identifier LBRACE Expression RBRACE 
            {
              IdentifierReferencing RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array1DReferencing(id, e, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayRef",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ArrayRef ::= Identifier LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              IdentifierReferencing RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array2DReferencing(id, e1, e2, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayRef",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Identifier(id, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MultEOL ::= MultEOL EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultEOL",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MultEOL ::= EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultEOL",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
