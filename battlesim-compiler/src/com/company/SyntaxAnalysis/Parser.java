
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package com.company;

import java_cup.runtime.*;
import com.company.AST.Nodes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\002\007\000\002\003" +
    "\010\000\002\014\010\000\002\015\004\000\002\015\003" +
    "\000\002\016\012\000\002\017\004\000\002\017\003\000" +
    "\002\020\005\000\002\021\004\000\002\004\003\000\002" +
    "\004\005\000\002\005\011\000\002\006\005\000\002\007" +
    "\004\000\002\007\005\000\002\010\005\000\002\010\003" +
    "\000\002\011\007\000\002\012\004\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\005\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\025\007\000\002\026\006\000" +
    "\002\022\011\000\002\023\014\000\002\024\013\000\002" +
    "\027\007\000\002\030\010\000\002\030\003\000\002\031" +
    "\007\000\002\031\005\000\002\032\011\000\002\033\004" +
    "\000\002\033\003\000\002\034\005\000\002\035\004\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\007\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\040\004\000\002\041\004\000\002" +
    "\041\005\000\002\042\003\000\002\042\005\000\002\043" +
    "\003\000\002\043\003\000\002\044\003\000\002\044\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\046\005\000\002" +
    "\046\003\000\002\047\006\000\002\047\011\000\002\047" +
    "\005\000\002\047\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\051\005\000\002\051\005" +
    "\000\002\051\003\000\002\051\003\000\002\052\006\000" +
    "\002\052\011\000\002\054\004\000\002\054\003\000\002" +
    "\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\004\013\005\001\002\000\004\002\373\001" +
    "\002\000\004\026\366\001\002\000\004\021\007\001\002" +
    "\000\004\104\340\001\002\000\004\070\012\001\002\000" +
    "\006\011\017\013\016\001\002\000\052\002\uff8e\003\uff8e" +
    "\005\uff8e\006\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\015" +
    "\uff8e\021\uff8e\023\uff8e\024\uff8e\027\uff8e\031\uff8e\032\uff8e" +
    "\070\uff8e\105\uff8e\106\uff8e\107\uff8e\116\uff8e\001\002\000" +
    "\012\002\ufff6\011\ufff6\013\ufff6\070\014\001\002\000\052" +
    "\002\uff8f\003\uff8f\005\uff8f\006\uff8f\010\uff8f\011\uff8f\012" +
    "\uff8f\013\uff8f\015\uff8f\021\uff8f\023\uff8f\024\uff8f\027\uff8f" +
    "\031\uff8f\032\uff8f\070\uff8f\105\uff8f\106\uff8f\107\uff8f\116" +
    "\uff8f\001\002\000\004\070\012\001\002\000\004\014\333" +
    "\001\002\000\036\004\030\017\022\020\032\025\034\033" +
    "\023\074\031\076\033\077\037\100\035\101\041\102\026" +
    "\103\025\110\024\111\040\001\002\000\004\070\012\001" +
    "\002\000\012\002\ufff5\011\ufff5\013\ufff5\070\014\001\002" +
    "\000\014\035\uffa2\036\uffa2\040\uffa2\070\uffa2\116\uffa2\001" +
    "\002\000\014\035\uff97\036\uff97\040\uff97\070\uff97\116\uff97" +
    "\001\002\000\014\035\uff98\036\uff98\040\uff98\070\uff98\116" +
    "\uff98\001\002\000\014\035\uff9a\036\uff9a\040\uff9a\070\uff9a" +
    "\116\uff9a\001\002\000\014\035\uff9b\036\uff9b\040\uff9b\070" +
    "\uff9b\116\uff9b\001\002\000\004\116\055\001\002\000\014" +
    "\035\uffa0\036\uffa0\040\uffa0\070\uffa0\116\uffa0\001\002\000" +
    "\014\035\uff96\036\uff96\040\uff96\070\uff96\116\uff96\001\002" +
    "\000\014\035\uffa1\036\uffa1\040\uffa1\070\uffa1\116\uffa1\001" +
    "\002\000\014\035\uff9f\036\uff9f\040\uff9f\070\uff9f\116\uff9f" +
    "\001\002\000\004\075\150\001\002\000\014\035\uff9d\036" +
    "\uff9d\040\uff9d\070\uff9d\116\uff9d\001\002\000\014\035\uffa3" +
    "\036\042\040\uffa3\070\uffa3\116\uffa3\001\002\000\014\035" +
    "\uff9e\036\uff9e\040\uff9e\070\uff9e\116\uff9e\001\002\000\014" +
    "\035\uff99\036\uff99\040\uff99\070\uff99\116\uff99\001\002\000" +
    "\014\035\uff9c\036\uff9c\040\uff9c\070\uff9c\116\uff9c\001\002" +
    "\000\024\030\044\034\060\046\043\062\057\112\046\113" +
    "\061\114\056\115\047\116\055\001\002\000\024\030\044" +
    "\034\060\046\043\062\057\112\046\113\061\114\056\115" +
    "\047\116\055\001\002\000\056\007\uffa9\035\uffa9\037\uffa9" +
    "\040\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\051" +
    "\uffa9\052\uffa9\060\uffa9\061\uffa9\063\uffa9\064\uffa9\065\uffa9" +
    "\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\001" +
    "\002\000\056\007\uffbf\035\uffbf\037\uffbf\040\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\060" +
    "\uffbf\061\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf" +
    "\070\uffbf\071\uffbf\072\uffbf\073\uffbf\001\002\000\056\007" +
    "\uffab\035\uffab\037\uffab\040\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\051\uffab\052\uffab\060\uffab\061\uffab\063" +
    "\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab" +
    "\072\uffab\073\uffab\001\002\000\056\007\uffac\035\uffac\037" +
    "\uffac\040\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\051\uffac\052\uffac\060\uffac\061\uffac\063\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac" +
    "\001\002\000\076\007\uff93\034\uff93\035\uff93\037\uff93\040" +
    "\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93" +
    "\047\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056" +
    "\uff93\057\uff93\060\uff93\061\uff93\063\uff93\064\uff93\065\uff93" +
    "\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93\001" +
    "\002\000\100\007\uff92\034\uff92\035\uff92\036\133\037\uff92" +
    "\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046" +
    "\uff92\047\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92" +
    "\056\uff92\057\uff92\060\uff92\061\uff92\063\uff92\064\uff92\065" +
    "\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92" +
    "\001\002\000\062\007\uffbe\034\127\035\uffbe\037\uffbe\040" +
    "\uffbe\041\130\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\051\uffbe\052\uffbe\060\uffbe\061\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe" +
    "\001\002\000\040\037\122\043\065\044\100\045\071\046" +
    "\063\047\073\051\070\052\066\060\064\061\102\063\077" +
    "\064\072\065\101\066\076\067\067\001\002\000\056\007" +
    "\uffbd\035\uffbd\037\uffbd\040\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\051\uffbd\052\uffbd\060\uffbd\061\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd" +
    "\072\uffbd\073\uffbd\001\002\000\106\007\uff8d\016\uff8d\022" +
    "\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d" +
    "\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\051" +
    "\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d" +
    "\060\uff8d\061\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067" +
    "\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\116\uff8d\001\002" +
    "\000\056\007\uffad\035\uffad\037\uffad\040\uffad\043\uffad\044" +
    "\uffad\045\uffad\046\uffad\047\uffad\051\uffad\052\uffad\060\uffad" +
    "\061\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070" +
    "\uffad\071\uffad\072\uffad\073\uffad\001\002\000\024\030\044" +
    "\034\060\046\043\062\057\112\046\113\061\114\056\115" +
    "\047\116\055\001\002\000\024\030\044\034\060\046\043" +
    "\062\057\112\046\113\061\114\056\115\047\116\055\001" +
    "\002\000\056\007\uffaa\035\uffaa\037\uffaa\040\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\051\uffaa\052\uffaa\060" +
    "\uffaa\061\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa" +
    "\070\uffaa\071\uffaa\072\uffaa\073\uffaa\001\002\000\042\035" +
    "\075\040\074\043\065\044\100\045\071\046\063\047\073" +
    "\051\070\052\066\060\064\061\102\063\077\064\072\065" +
    "\101\066\076\067\067\001\002\000\024\030\044\034\060" +
    "\046\043\062\057\112\046\113\061\114\056\115\047\116" +
    "\055\001\002\000\024\030\044\034\060\046\043\062\057" +
    "\112\046\113\061\114\056\115\047\116\055\001\002\000" +
    "\056\007\uffc1\035\uffc1\037\uffc1\040\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1\060\uffc1\061" +
    "\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1" +
    "\071\uffc1\072\uffc1\073\uffc1\001\002\000\024\030\044\034" +
    "\060\046\043\062\057\112\046\113\061\114\056\115\047" +
    "\116\055\001\002\000\024\030\044\034\060\046\043\062" +
    "\057\112\046\113\061\114\056\115\047\116\055\001\002" +
    "\000\024\030\044\034\060\046\043\062\057\112\046\113" +
    "\061\114\056\115\047\116\055\001\002\000\024\030\044" +
    "\034\060\046\043\062\057\112\046\113\061\114\056\115" +
    "\047\116\055\001\002\000\024\030\044\034\060\046\043" +
    "\062\057\112\046\113\061\114\056\115\047\116\055\001" +
    "\002\000\024\030\044\034\060\046\043\062\057\112\046" +
    "\113\061\114\056\115\047\116\055\001\002\000\024\030" +
    "\044\034\060\046\043\062\057\112\046\113\061\114\056" +
    "\115\047\116\055\001\002\000\056\007\uffc5\035\uffc5\037" +
    "\uffc5\040\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\051\uffc5\052\uffc5\060\uffc5\061\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5" +
    "\001\002\000\024\030\044\034\060\046\043\062\057\112" +
    "\046\113\061\114\056\115\047\116\055\001\002\000\024" +
    "\030\044\034\060\046\043\062\057\112\046\113\061\114" +
    "\056\115\047\116\055\001\002\000\056\007\uffc0\035\uffc0" +
    "\037\uffc0\040\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\051\uffc0\052\uffc0\060\uffc0\061\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073" +
    "\uffc0\001\002\000\024\030\044\034\060\046\043\062\057" +
    "\112\046\113\061\114\056\115\047\116\055\001\002\000" +
    "\024\030\044\034\060\046\043\062\057\112\046\113\061" +
    "\114\056\115\047\116\055\001\002\000\054\007\uffcb\035" +
    "\uffcb\037\uffcb\040\uffcb\043\065\044\100\045\071\046\063" +
    "\047\073\051\070\052\066\060\064\063\077\064\072\065" +
    "\101\066\076\067\067\070\uffcb\071\uffcb\072\uffcb\073\uffcb" +
    "\001\002\000\056\007\uffc6\035\uffc6\037\uffc6\040\uffc6\043" +
    "\065\044\100\045\071\046\063\047\073\051\070\052\066" +
    "\060\uffc6\061\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067" +
    "\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\001\002\000\054" +
    "\007\uffca\035\uffca\037\uffca\040\uffca\043\065\044\100\045" +
    "\071\046\063\047\073\051\070\052\066\060\uffca\061\uffca" +
    "\064\072\065\101\066\076\067\067\070\uffca\071\uffca\072" +
    "\uffca\073\uffca\001\002\000\056\007\uffc9\035\uffc9\037\uffc9" +
    "\040\uffc9\043\065\044\100\045\071\046\063\047\073\051" +
    "\070\052\066\060\uffc9\061\uffc9\063\uffc9\064\uffc9\065\uffc9" +
    "\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\001" +
    "\002\000\040\035\110\043\065\044\100\045\071\046\063" +
    "\047\073\051\070\052\066\060\064\061\102\063\077\064" +
    "\072\065\101\066\076\067\067\001\002\000\056\007\uffc4" +
    "\035\uffc4\037\uffc4\040\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\051\uffc4\052\uffc4\060\uffc4\061\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072" +
    "\uffc4\073\uffc4\001\002\000\056\007\uffce\035\uffce\037\uffce" +
    "\040\uffce\043\065\044\100\045\uffce\046\uffce\047\uffce\051" +
    "\uffce\052\uffce\060\uffce\061\uffce\063\uffce\064\uffce\065\uffce" +
    "\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\001" +
    "\002\000\056\007\uffc8\035\uffc8\037\uffc8\040\uffc8\043\065" +
    "\044\100\045\071\046\063\047\073\051\070\052\066\060" +
    "\uffc8\061\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8" +
    "\070\uffc8\071\uffc8\072\uffc8\073\uffc8\001\002\000\056\007" +
    "\uffd1\035\uffd1\037\uffd1\040\uffd1\043\065\044\100\045\uffd1" +
    "\046\uffd1\047\073\051\070\052\066\060\uffd1\061\uffd1\063" +
    "\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1" +
    "\072\uffd1\073\uffd1\001\002\000\056\007\uffcf\035\uffcf\037" +
    "\uffcf\040\uffcf\043\065\044\100\045\uffcf\046\uffcf\047\uffcf" +
    "\051\uffcf\052\uffcf\060\uffcf\061\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf" +
    "\001\002\000\056\007\uffc7\035\uffc7\037\uffc7\040\uffc7\043" +
    "\065\044\100\045\071\046\063\047\073\051\070\052\066" +
    "\060\uffc7\061\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\001\002\000\056" +
    "\007\uffcd\035\uffcd\037\uffcd\040\uffcd\043\065\044\100\045" +
    "\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd\060\uffcd\061\uffcd" +
    "\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071" +
    "\uffcd\072\uffcd\073\uffcd\001\002\000\054\007\uffcc\035\uffcc" +
    "\037\uffcc\040\uffcc\043\065\044\100\045\071\046\063\047" +
    "\073\051\070\052\066\061\uffcc\063\077\064\072\065\101" +
    "\066\076\067\067\070\uffcc\071\uffcc\072\uffcc\073\uffcc\001" +
    "\002\000\056\007\uffd0\035\uffd0\037\uffd0\040\uffd0\043\065" +
    "\044\100\045\uffd0\046\uffd0\047\073\051\070\052\066\060" +
    "\uffd0\061\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\070\uffd0\071\uffd0\072\uffd0\073\uffd0\001\002\000\056\007" +
    "\uffc3\035\uffc3\037\uffc3\040\uffc3\043\065\044\100\045\uffc3" +
    "\046\uffc3\047\uffc3\051\uffc3\052\uffc3\060\uffc3\061\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3" +
    "\072\uffc3\073\uffc3\001\002\000\014\035\uffa6\036\123\040" +
    "\uffa6\070\uffa6\116\uffa6\001\002\000\024\030\044\034\060" +
    "\046\043\062\057\112\046\113\061\114\056\115\047\116" +
    "\055\001\002\000\040\037\125\043\065\044\100\045\071" +
    "\046\063\047\073\051\070\052\066\060\064\061\102\063" +
    "\077\064\072\065\101\066\076\067\067\001\002\000\012" +
    "\035\uffa5\040\uffa5\070\uffa5\116\uffa5\001\002\000\056\007" +
    "\uffb6\035\uffb6\037\uffb6\040\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\051\uffb6\052\uffb6\060\uffb6\061\uffb6\063" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\073\uffb6\001\002\000\026\030\044\034\060\035" +
    "\143\046\043\062\057\112\046\113\061\114\056\115\047" +
    "\116\055\001\002\000\004\116\055\001\002\000\076\007" +
    "\uff94\034\uff94\035\uff94\037\uff94\040\uff94\041\uff94\042\uff94" +
    "\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\051\uff94\052" +
    "\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94" +
    "\061\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070" +
    "\uff94\071\uff94\072\uff94\073\uff94\001\002\000\100\007\uff95" +
    "\034\uff95\035\uff95\036\133\037\uff95\040\uff95\041\uff95\042" +
    "\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\051\uff95" +
    "\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060" +
    "\uff95\061\uff95\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95" +
    "\070\uff95\071\uff95\072\uff95\073\uff95\001\002\000\024\030" +
    "\044\034\060\046\043\062\057\112\046\113\061\114\056" +
    "\115\047\116\055\001\002\000\040\037\135\043\065\044" +
    "\100\045\071\046\063\047\073\051\070\052\066\060\064" +
    "\061\102\063\077\064\072\065\101\066\076\067\067\001" +
    "\002\000\100\007\uff91\034\uff91\035\uff91\036\136\037\uff91" +
    "\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\047\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91" +
    "\056\uff91\057\uff91\060\uff91\061\uff91\063\uff91\064\uff91\065" +
    "\uff91\066\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91" +
    "\001\002\000\024\030\044\034\060\046\043\062\057\112" +
    "\046\113\061\114\056\115\047\116\055\001\002\000\040" +
    "\037\140\043\065\044\100\045\071\046\063\047\073\051" +
    "\070\052\066\060\064\061\102\063\077\064\072\065\101" +
    "\066\076\067\067\001\002\000\076\007\uff90\034\uff90\035" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\051\uff90\052\uff90\053\uff90\054" +
    "\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\063\uff90" +
    "\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072" +
    "\uff90\073\uff90\001\002\000\042\035\uffb3\040\145\043\065" +
    "\044\100\045\071\046\063\047\073\051\070\052\066\060" +
    "\064\061\102\063\077\064\072\065\101\066\076\067\067" +
    "\001\002\000\004\035\144\001\002\000\056\007\uffb5\035" +
    "\uffb5\037\uffb5\040\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5" +
    "\047\uffb5\051\uffb5\052\uffb5\060\uffb5\061\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5" +
    "\073\uffb5\001\002\000\056\007\uffb4\035\uffb4\037\uffb4\040" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4" +
    "\052\uffb4\060\uffb4\061\uffb4\063\uffb4\064\uffb4\065\uffb4\066" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\001\002" +
    "\000\024\030\044\034\060\046\043\062\057\112\046\113" +
    "\061\114\056\115\047\116\055\001\002\000\004\035\uffb2" +
    "\001\002\000\056\007\uffc2\035\uffc2\037\uffc2\040\uffc2\043" +
    "\065\044\100\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2" +
    "\060\uffc2\061\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067" +
    "\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\001\002\000\034" +
    "\004\030\017\022\020\032\033\023\074\031\076\033\077" +
    "\037\100\035\101\041\102\026\103\025\110\024\111\040" +
    "\001\002\000\012\035\uffa4\040\uffa4\070\uffa4\116\uffa4\001" +
    "\002\000\004\034\154\001\002\000\004\070\012\001\002" +
    "\000\006\035\156\116\055\001\002\000\006\035\164\040" +
    "\163\001\002\000\004\070\ufff2\001\002\000\006\035\uffef" +
    "\040\uffef\001\002\000\004\016\161\001\002\000\036\004" +
    "\030\017\022\020\032\025\034\033\023\074\031\076\033" +
    "\077\037\100\035\101\041\102\026\103\025\110\024\111" +
    "\040\001\002\000\006\035\ufff3\040\ufff3\001\002\000\004" +
    "\116\055\001\002\000\004\070\ufff1\001\002\000\006\035" +
    "\ufff0\040\ufff0\001\002\000\026\003\207\005\202\006\176" +
    "\010\204\012\177\015\210\021\212\023\200\027\201\116" +
    "\055\001\002\000\042\003\uffec\005\uffec\006\uffec\010\uffec" +
    "\012\uffec\015\uffec\021\uffec\023\uffec\024\uffec\027\uffec\031" +
    "\uffec\032\uffec\070\014\106\uffec\107\uffec\116\uffec\001\002" +
    "\000\040\003\uffeb\005\uffeb\006\uffeb\010\uffeb\012\uffeb\015" +
    "\uffeb\021\uffeb\023\uffeb\024\uffeb\027\uffeb\031\uffeb\032\uffeb" +
    "\106\uffeb\107\uffeb\116\uffeb\001\002\000\022\034\127\041" +
    "\130\042\325\053\324\054\327\055\322\056\323\057\330" +
    "\001\002\000\040\003\uffe5\005\uffe5\006\uffe5\010\uffe5\012" +
    "\uffe5\015\uffe5\021\uffe5\023\uffe5\024\uffe5\027\uffe5\031\uffe5" +
    "\032\uffe5\106\uffe5\107\uffe5\116\uffe5\001\002\000\040\003" +
    "\uffe6\005\uffe6\006\uffe6\010\uffe6\012\uffe6\015\uffe6\021\uffe6" +
    "\023\uffe6\024\uffe6\027\uffe6\031\uffe6\032\uffe6\106\uffe6\107" +
    "\uffe6\116\uffe6\001\002\000\040\003\uffea\005\uffea\006\uffea" +
    "\010\uffea\012\uffea\015\uffea\021\uffea\023\uffea\024\uffea\027" +
    "\uffea\031\uffea\032\uffea\106\uffea\107\uffea\116\uffea\001\002" +
    "\000\040\003\uffed\005\uffed\006\uffed\010\uffed\012\uffed\015" +
    "\uffed\021\uffed\023\uffed\024\uffed\027\uffed\031\uffed\032\uffed" +
    "\106\uffed\107\uffed\116\uffed\001\002\000\024\030\044\034" +
    "\060\046\043\062\057\112\046\113\061\114\056\115\047" +
    "\116\055\001\002\000\004\011\313\001\002\000\026\030" +
    "\044\034\060\046\043\062\057\070\012\112\046\113\061" +
    "\114\056\115\047\116\055\001\002\000\016\030\044\112" +
    "\046\113\061\114\056\115\047\116\055\001\002\000\024" +
    "\030\044\034\060\046\043\062\057\112\046\113\061\114" +
    "\056\115\047\116\055\001\002\000\004\070\012\001\002" +
    "\000\036\004\030\017\022\020\032\025\034\033\023\074" +
    "\031\076\033\077\037\100\035\101\041\102\026\103\025" +
    "\110\024\111\040\001\002\000\040\003\uffe7\005\uffe7\006" +
    "\uffe7\010\uffe7\012\uffe7\015\uffe7\021\uffe7\023\uffe7\024\uffe7" +
    "\027\uffe7\031\uffe7\032\uffe7\106\uffe7\107\uffe7\116\uffe7\001" +
    "\002\000\040\003\uffe8\005\uffe8\006\uffe8\010\uffe8\012\uffe8" +
    "\015\uffe8\021\uffe8\023\uffe8\024\uffe8\027\uffe8\031\uffe8\032" +
    "\uffe8\106\uffe8\107\uffe8\116\uffe8\001\002\000\004\070\234" +
    "\001\002\000\024\030\044\034\060\046\043\062\057\112" +
    "\046\113\061\114\056\115\047\116\055\001\002\000\040" +
    "\003\uffe9\005\uffe9\006\uffe9\010\uffe9\012\uffe9\015\uffe9\021" +
    "\uffe9\023\uffe9\024\uffe9\027\uffe9\031\uffe9\032\uffe9\106\uffe9" +
    "\107\uffe9\116\uffe9\001\002\000\004\116\055\001\002\000" +
    "\006\016\216\040\215\001\002\000\006\016\uffa7\040\uffa7" +
    "\001\002\000\004\116\055\001\002\000\036\004\030\017" +
    "\022\020\032\025\034\033\023\074\031\076\033\077\037" +
    "\100\035\101\041\102\026\103\025\110\024\111\040\001" +
    "\002\000\004\070\012\001\002\000\042\003\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\012\uffe0\015\uffe0\021\uffe0\023\uffe0\024" +
    "\uffe0\027\uffe0\031\uffe0\032\uffe0\070\014\106\uffe0\107\uffe0" +
    "\116\uffe0\001\002\000\006\016\uffa8\040\uffa8\001\002\000" +
    "\042\043\065\044\100\045\071\046\063\047\073\051\070" +
    "\052\066\060\064\061\102\063\077\064\072\065\101\066" +
    "\076\067\067\071\224\072\223\001\002\000\024\030\uffb1" +
    "\034\uffb1\046\uffb1\062\uffb1\112\uffb1\113\uffb1\114\uffb1\115" +
    "\uffb1\116\uffb1\001\002\000\024\030\uffb0\034\uffb0\046\uffb0" +
    "\062\uffb0\112\uffb0\113\uffb0\114\uffb0\115\uffb0\116\uffb0\001" +
    "\002\000\024\030\044\034\060\046\043\062\057\112\046" +
    "\113\061\114\056\115\047\116\055\001\002\000\040\007" +
    "\227\043\065\044\100\045\071\046\063\047\073\051\070" +
    "\052\066\060\064\061\102\063\077\064\072\065\101\066" +
    "\076\067\067\001\002\000\004\070\012\001\002\000\026" +
    "\003\207\005\202\006\176\010\204\012\231\015\210\021" +
    "\212\023\200\027\201\116\055\001\002\000\004\015\232" +
    "\001\002\000\004\070\012\001\002\000\042\003\uffdc\005" +
    "\uffdc\006\uffdc\010\uffdc\012\uffdc\015\uffdc\021\uffdc\023\uffdc" +
    "\024\uffdc\027\uffdc\031\uffdc\032\uffdc\070\014\106\uffdc\107" +
    "\uffdc\116\uffdc\001\002\000\040\003\uffe1\005\uffe1\006\uffe1" +
    "\010\uffe1\012\uffe1\015\uffe1\021\uffe1\023\uffe1\024\uffe1\027" +
    "\uffe1\031\uffe1\032\uffe1\106\uffe1\107\uffe1\116\uffe1\001\002" +
    "\000\004\116\055\001\002\000\004\022\237\001\002\000" +
    "\004\116\055\001\002\000\006\007\241\041\130\001\002" +
    "\000\004\070\012\001\002\000\026\003\207\005\202\006" +
    "\176\010\204\012\243\015\210\021\212\023\200\027\201" +
    "\116\055\001\002\000\004\010\244\001\002\000\004\070" +
    "\012\001\002\000\042\003\uffdd\005\uffdd\006\uffdd\010\uffdd" +
    "\012\uffdd\015\uffdd\021\uffdd\023\uffdd\024\uffdd\027\uffdd\031" +
    "\uffdd\032\uffdd\070\014\106\uffdd\107\uffdd\116\uffdd\001\002" +
    "\000\042\003\uffe2\005\uffe2\006\uffe2\010\uffe2\012\uffe2\015" +
    "\uffe2\021\uffe2\023\uffe2\024\uffe2\027\uffe2\031\uffe2\032\uffe2" +
    "\070\014\106\uffe2\107\uffe2\116\uffe2\001\002\000\040\043" +
    "\065\044\100\045\071\046\063\047\073\051\070\052\066" +
    "\060\064\061\102\063\077\064\072\065\101\066\076\067" +
    "\067\073\250\001\002\000\004\070\012\001\002\000\030" +
    "\003\207\005\202\006\176\010\204\012\254\015\210\021" +
    "\212\023\200\024\253\027\201\116\055\001\002\000\040" +
    "\003\uffd9\005\uffd9\006\uffd9\010\uffd9\012\uffd9\015\uffd9\021" +
    "\uffd9\023\uffd9\024\uffd9\027\uffd9\031\uffd9\032\uffd9\106\uffd9" +
    "\107\uffd9\116\uffd9\001\002\000\006\005\261\070\012\001" +
    "\002\000\004\005\256\001\002\000\040\003\uffdb\005\uffdb" +
    "\006\uffdb\010\uffdb\012\uffdb\015\uffdb\021\uffdb\023\uffdb\024" +
    "\uffdb\027\uffdb\031\uffdb\032\uffdb\106\uffdb\107\uffdb\116\uffdb" +
    "\001\002\000\004\070\012\001\002\000\042\003\uffd7\005" +
    "\uffd7\006\uffd7\010\uffd7\012\uffd7\015\uffd7\021\uffd7\023\uffd7" +
    "\024\uffd7\027\uffd7\031\uffd7\032\uffd7\070\014\106\uffd7\107" +
    "\uffd7\116\uffd7\001\002\000\026\003\207\005\202\006\176" +
    "\010\204\012\266\015\210\021\212\023\200\027\201\116" +
    "\055\001\002\000\024\030\044\034\060\046\043\062\057" +
    "\112\046\113\061\114\056\115\047\116\055\001\002\000" +
    "\040\043\065\044\100\045\071\046\063\047\073\051\070" +
    "\052\066\060\064\061\102\063\077\064\072\065\101\066" +
    "\076\067\067\073\263\001\002\000\004\070\012\001\002" +
    "\000\030\003\207\005\202\006\176\010\204\012\254\015" +
    "\210\021\212\023\200\024\253\027\201\116\055\001\002" +
    "\000\040\003\uffda\005\uffda\006\uffda\010\uffda\012\uffda\015" +
    "\uffda\021\uffda\023\uffda\024\uffda\027\uffda\031\uffda\032\uffda" +
    "\106\uffda\107\uffda\116\uffda\001\002\000\004\005\267\001" +
    "\002\000\004\070\012\001\002\000\042\003\uffd8\005\uffd8" +
    "\006\uffd8\010\uffd8\012\uffd8\015\uffd8\021\uffd8\023\uffd8\024" +
    "\uffd8\027\uffd8\031\uffd8\032\uffd8\070\014\106\uffd8\107\uffd8" +
    "\116\uffd8\001\002\000\004\070\012\001\002\000\006\041" +
    "\130\070\uffaf\001\002\000\004\070\uffae\001\002\000\006" +
    "\031\300\032\276\001\002\000\010\031\uffd4\032\uffd4\070" +
    "\014\001\002\000\004\070\012\001\002\000\004\012\304" +
    "\001\002\000\014\030\044\112\046\113\061\114\056\115" +
    "\047\001\002\000\006\031\uffd5\032\uffd5\001\002\000\004" +
    "\070\012\001\002\000\030\003\207\005\202\006\176\010" +
    "\204\015\210\021\212\023\200\027\201\031\uffd3\032\uffd3" +
    "\116\055\001\002\000\004\027\305\001\002\000\004\070" +
    "\012\001\002\000\042\003\uffd6\005\uffd6\006\uffd6\010\uffd6" +
    "\012\uffd6\015\uffd6\021\uffd6\023\uffd6\024\uffd6\027\uffd6\031" +
    "\uffd6\032\uffd6\070\014\106\uffd6\107\uffd6\116\uffd6\001\002" +
    "\000\026\003\207\005\202\006\176\010\204\012\uffd2\015" +
    "\210\021\212\023\200\027\201\116\055\001\002\000\042" +
    "\003\uffe3\005\uffe3\006\uffe3\010\uffe3\012\uffe3\015\uffe3\021" +
    "\uffe3\023\uffe3\024\uffe3\027\uffe3\031\uffe3\032\uffe3\070\014" +
    "\106\uffe3\107\uffe3\116\uffe3\001\002\000\040\043\065\044" +
    "\100\045\071\046\063\047\073\051\070\052\066\060\064" +
    "\061\102\063\077\064\072\065\101\066\076\067\067\070" +
    "\012\001\002\000\042\003\uffe4\005\uffe4\006\uffe4\010\uffe4" +
    "\012\uffe4\015\uffe4\021\uffe4\023\uffe4\024\uffe4\027\uffe4\031" +
    "\uffe4\032\uffe4\070\014\106\uffe4\107\uffe4\116\uffe4\001\002" +
    "\000\004\070\ufff4\001\002\000\040\007\315\043\065\044" +
    "\100\045\071\046\063\047\073\051\070\052\066\060\064" +
    "\061\102\063\077\064\072\065\101\066\076\067\067\001" +
    "\002\000\004\070\012\001\002\000\026\003\207\005\202" +
    "\006\176\010\204\012\317\015\210\021\212\023\200\027" +
    "\201\116\055\001\002\000\004\006\320\001\002\000\004" +
    "\070\012\001\002\000\042\003\uffde\005\uffde\006\uffde\010" +
    "\uffde\012\uffde\015\uffde\021\uffde\023\uffde\024\uffde\027\uffde" +
    "\031\uffde\032\uffde\070\014\106\uffde\107\uffde\116\uffde\001" +
    "\002\000\024\030\uffb8\034\uffb8\046\uffb8\062\uffb8\112\uffb8" +
    "\113\uffb8\114\uffb8\115\uffb8\116\uffb8\001\002\000\024\030" +
    "\uffb7\034\uffb7\046\uffb7\062\uffb7\112\uffb7\113\uffb7\114\uffb7" +
    "\115\uffb7\116\uffb7\001\002\000\024\030\uffbb\034\uffbb\046" +
    "\uffbb\062\uffbb\112\uffbb\113\uffbb\114\uffbb\115\uffbb\116\uffbb" +
    "\001\002\000\024\030\uffbc\034\uffbc\046\uffbc\062\uffbc\112" +
    "\uffbc\113\uffbc\114\uffbc\115\uffbc\116\uffbc\001\002\000\024" +
    "\030\044\034\060\046\043\062\057\112\046\113\061\114" +
    "\056\115\047\116\055\001\002\000\024\030\uffba\034\uffba" +
    "\046\uffba\062\uffba\112\uffba\113\uffba\114\uffba\115\uffba\116" +
    "\uffba\001\002\000\024\030\uffb9\034\uffb9\046\uffb9\062\uffb9" +
    "\112\uffb9\113\uffb9\114\uffb9\115\uffb9\116\uffb9\001\002\000" +
    "\040\043\065\044\100\045\071\046\063\047\073\051\070" +
    "\052\066\060\064\061\102\063\077\064\072\065\101\066" +
    "\076\067\067\070\012\001\002\000\042\003\uffdf\005\uffdf" +
    "\006\uffdf\010\uffdf\012\uffdf\015\uffdf\021\uffdf\023\uffdf\024" +
    "\uffdf\027\uffdf\031\uffdf\032\uffdf\070\014\106\uffdf\107\uffdf" +
    "\116\uffdf\001\002\000\004\070\012\001\002\000\026\003" +
    "\207\005\202\006\176\010\204\012\335\015\210\021\212" +
    "\023\200\027\201\116\055\001\002\000\004\014\336\001" +
    "\002\000\004\070\uffee\001\002\000\006\002\000\011\017" +
    "\001\002\000\004\070\012\001\002\000\006\012\345\105" +
    "\343\001\002\000\010\012\ufffc\070\014\105\ufffc\001\002" +
    "\000\004\116\055\001\002\000\006\012\ufffd\105\ufffd\001" +
    "\002\000\004\021\346\001\002\000\004\104\347\001\002" +
    "\000\004\070\ufffe\001\002\000\004\116\055\001\002\000" +
    "\006\041\130\070\012\001\002\000\006\106\354\107\355" +
    "\001\002\000\010\070\014\106\ufff9\107\ufff9\001\002\000" +
    "\004\113\364\001\002\000\004\070\012\001\002\000\004" +
    "\012\360\001\002\000\006\106\ufffa\107\ufffa\001\002\000" +
    "\004\105\361\001\002\000\004\070\012\001\002\000\010" +
    "\012\ufffb\070\014\105\ufffb\001\002\000\026\003\207\005" +
    "\202\006\176\010\204\012\ufff7\015\210\021\212\023\200" +
    "\027\201\116\055\001\002\000\004\070\012\001\002\000" +
    "\030\003\207\005\202\006\176\010\204\015\210\021\212" +
    "\023\200\027\201\106\ufff8\107\ufff8\116\055\001\002\000" +
    "\004\070\012\001\002\000\026\003\207\005\202\006\176" +
    "\010\204\012\370\015\210\021\212\023\200\027\201\116" +
    "\055\001\002\000\004\026\371\001\002\000\004\070\012" +
    "\001\002\000\006\021\uffff\070\014\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\007\001\001\000\002" +
    "\001\001\000\006\004\010\054\012\001\001\000\006\005" +
    "\017\011\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\336\054\012\001\001\000" +
    "\002\001\001\000\006\047\026\050\035\001\001\000\004" +
    "\054\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\036\052" +
    "\040\044\045\053\051\051\052\047\053\050\001\001\000" +
    "\016\036\146\040\044\045\053\051\051\052\047\053\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\036\120" +
    "\040\044\045\053\051\051\052\047\053\050\001\001\000" +
    "\016\036\061\040\044\045\053\051\051\052\047\053\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\036" +
    "\117\040\044\045\053\051\051\052\047\053\050\001\001" +
    "\000\016\036\116\040\044\045\053\051\051\052\047\053" +
    "\050\001\001\000\002\001\001\000\016\036\115\040\044" +
    "\045\053\051\051\052\047\053\050\001\001\000\016\036" +
    "\114\040\044\045\053\051\051\052\047\053\050\001\001" +
    "\000\016\036\113\040\044\045\053\051\051\052\047\053" +
    "\050\001\001\000\016\036\112\040\044\045\053\051\051" +
    "\052\047\053\050\001\001\000\016\036\111\040\044\045" +
    "\053\051\051\052\047\053\050\001\001\000\016\036\110" +
    "\040\044\045\053\051\051\052\047\053\050\001\001\000" +
    "\016\036\106\040\044\045\053\051\051\052\047\053\050" +
    "\001\001\000\002\001\001\000\016\036\105\040\044\045" +
    "\053\051\051\052\047\053\050\001\001\000\016\036\104" +
    "\040\044\045\053\051\051\052\047\053\050\001\001\000" +
    "\002\001\001\000\016\036\103\040\044\045\053\051\051" +
    "\052\047\053\050\001\001\000\016\036\102\040\044\045" +
    "\053\051\051\052\047\053\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\036\123\040" +
    "\044\045\053\051\051\052\047\053\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\036" +
    "\140\040\044\042\141\045\053\051\051\052\047\053\050" +
    "\001\001\000\006\052\130\053\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\036\133\040\044\045\053" +
    "\051\051\052\047\053\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\036\136\040\044\045\053\051\051" +
    "\052\047\053\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\036\140\040\044\042\145\045" +
    "\053\051\051\052\047\053\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\150\001\001\000\002\001" +
    "\001\000\004\007\152\001\001\000\006\012\165\054\166" +
    "\001\001\000\010\006\156\010\154\053\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\047\161\050\035\001\001\000\002\001" +
    "\001\000\006\006\164\053\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\013\174\022\205\023\204\024" +
    "\172\025\167\026\173\027\210\032\171\040\202\051\170" +
    "\052\047\053\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\325\041\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\036\313\040\044\045\053\051\051\052\047\053\050" +
    "\001\001\000\002\001\001\000\020\036\310\040\044\045" +
    "\053\051\051\052\047\053\050\054\307\001\001\000\014" +
    "\044\270\045\272\051\271\052\047\053\050\001\001\000" +
    "\016\036\246\040\044\045\053\051\051\052\047\053\050" +
    "\001\001\000\004\054\245\001\001\000\006\047\234\050" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\036\221\040\044\045\053\051\051\052" +
    "\047\053\050\001\001\000\002\001\001\000\006\046\212" +
    "\053\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\220\001\001\000\006\047\216\050\035\001\001" +
    "\000\004\054\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\036\225\040\044\045\053\051\051\052" +
    "\047\053\050\001\001\000\002\001\001\000\006\012\227" +
    "\054\166\001\001\000\032\013\174\022\205\023\204\024" +
    "\172\025\167\026\173\027\210\032\171\040\202\051\170" +
    "\052\047\053\050\001\001\000\002\001\001\000\004\054" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\235\001\001\000\002\001\001\000\010\051\237\052" +
    "\047\053\050\001\001\000\002\001\001\000\006\012\241" +
    "\054\166\001\001\000\032\013\174\022\205\023\204\024" +
    "\172\025\167\026\173\027\210\032\171\040\202\051\170" +
    "\052\047\053\050\001\001\000\002\001\001\000\004\054" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\250\054\166\001\001\000\036\013" +
    "\174\022\205\023\204\024\172\025\167\026\173\027\210" +
    "\030\254\031\251\032\171\040\202\051\170\052\047\053" +
    "\050\001\001\000\002\001\001\000\006\012\257\054\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\256\001\001\000\002\001\001\000\032\013\174\022\205" +
    "\023\204\024\172\025\167\026\173\027\210\032\171\040" +
    "\202\051\170\052\047\053\050\001\001\000\016\036\261" +
    "\040\044\045\053\051\051\052\047\053\050\001\001\000" +
    "\002\001\001\000\006\012\263\054\166\001\001\000\036" +
    "\013\174\022\205\023\204\024\172\025\167\026\173\027" +
    "\210\030\264\031\251\032\171\040\202\051\170\052\047" +
    "\053\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\267\001\001\000\002\001\001\000\006\033\273" +
    "\054\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\300\035\276\001\001\000\002\001\001\000\006" +
    "\012\306\054\166\001\001\000\002\001\001\000\004\045" +
    "\301\001\001\000\002\001\001\000\006\012\302\054\166" +
    "\001\001\000\032\013\174\022\205\023\204\024\172\025" +
    "\167\026\173\027\210\032\171\040\202\051\170\052\047" +
    "\053\050\001\001\000\002\001\001\000\004\054\305\001" +
    "\001\000\002\001\001\000\032\013\174\022\205\023\204" +
    "\024\172\025\167\026\173\027\210\032\171\040\202\051" +
    "\170\052\047\053\050\001\001\000\002\001\001\000\004" +
    "\054\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\315\054\166\001\001\000\032" +
    "\013\174\022\205\023\204\024\172\025\167\026\173\027" +
    "\210\032\171\040\202\051\170\052\047\053\050\001\001" +
    "\000\002\001\001\000\004\054\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\036\330\040\044\045\053\051" +
    "\051\052\047\053\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\331\001\001\000\002\001\001\000" +
    "\006\012\333\054\166\001\001\000\032\013\174\022\205" +
    "\023\204\024\172\025\167\026\173\027\210\032\171\040" +
    "\202\051\170\052\047\053\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\017\001\001\000\006\015" +
    "\340\054\341\001\001\000\004\016\343\001\001\000\002" +
    "\001\001\000\004\053\347\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\051\350\052\047\053\050\001\001\000\006\017\351\054" +
    "\352\001\001\000\006\020\356\021\355\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\362\054\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\361\001\001\000\002\001\001\000\032\013" +
    "\174\022\205\023\204\024\172\025\167\026\173\027\210" +
    "\032\171\040\202\051\170\052\047\053\050\001\001\000" +
    "\006\012\364\054\166\001\001\000\032\013\174\022\205" +
    "\023\204\024\172\025\167\026\173\027\210\032\171\040" +
    "\202\051\170\052\047\053\050\001\001\000\006\012\366" +
    "\054\166\001\001\000\032\013\174\022\205\023\204\024" +
    "\172\025\167\026\173\027\210\032\171\040\202\051\170" +
    "\052\047\053\050\001\001\000\002\001\001\000\004\054" +
    "\371\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 /*token_num++; */return s.next_token(); 
    }


    //private int token_num = 0;
    private Scanner s;
    public Parser(Scanner s) {
        super(s);
        this.s = s;
    }
/*
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at line " + (cur_token.left + 1) + " column " + (cur_token.right + 1) + " of input.", null);
        //  : " + Sym.terminalNames[cur_token.sym] + (cur_token.value == null ? "" : " value: " + cur_token.value), null
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        this.report_fatal_error("Couldn\'t repair and continue parse", cur_token);
    }
    */

    public void report_error(String message, Object info) {
    System.err.print(message);
    System.err.flush();
    if(info instanceof Symbol) {
        if(((Symbol)info).left != -1) {
            System.err.println(" at line " + (((Symbol)info).left + 1) + " column " + (((Symbol)info).right + 1) + " of input");
        } else {
            System.err.println("");
        }
    } else {
        System.err.println("");
    }

}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Start start_val = (Start)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= DclBlock SimBlock FunctionDcls Program FunctionDcls 
            {
              Start RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		DclBlock db = (DclBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimBlock s = (SimBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fds1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fds1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FunctionDclList fds1 = (FunctionDclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fds2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fds2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDclList fds2 = (FunctionDclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Start(db, s, fds1, p, fds2, dbleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DclBlock ::= BEGIN DECLARATIONS Stmts END DECLARATIONS MultEOL 
            {
              DclBlock RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new DclBlock(ss, ssleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DclBlock",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SimBlock ::= DECLARE SIMULATIONS Simulations END DECLARE SIMULATIONS 
            {
              SimBlock RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimulationList s = (SimulationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new SimBlock(s, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimBlock",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Simulations ::= Simulations Simulation 
            {
              SimulationList RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimulationList ss = (SimulationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simulation s = (Simulation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ss; ss.addElement(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simulations",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Simulations ::= MultEOL 
            {
              SimulationList RESULT =null;
		 RESULT = new SimulationList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simulations",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Simulation ::= SIMULATION Identifier ObjectId SimSteps Interrupts END SIMULATION MultEOL 
            {
              Simulation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		IdentifierReferencing oi = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimStepList sis = (SimStepList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Interrupts is = (Interrupts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Simulation(id, oi, sis, is, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simulation",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SimSteps ::= SimSteps SimStep 
            {
              SimStepList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimStepList sl = (SimStepList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimStep s = (SimStep)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sl; sl.addElement(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimSteps",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SimSteps ::= MultEOL 
            {
              SimStepList RESULT =null;
		 RESULT = new SimStepList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimSteps",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SimStep ::= STEP INTEGER_LITERAL Stmts 
            {
              SimStep RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimStep(i, ss, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimStep",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Interrupts ::= INTERRUPTS Stmts 
            {
              Interrupts RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Interrupts(ss, ssleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Interrupts",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FunctionDcls ::= MultEOL 
            {
              FunctionDclList RESULT =null;
		 RESULT = new FunctionDclList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDcls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FunctionDcls ::= FunctionDcls FunctionDcl MultEOL 
            {
              FunctionDclList RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FunctionDclList fds = (FunctionDclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionDcl fd = (FunctionDcl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fds; fds.addElement(fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDcls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FunctionDcl ::= FUNCTION TypeId Identifier Params Stmts END FUNCTION 
            {
              FunctionDcl RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParamList p = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunctionDcl(ti, id, p, ss, tileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDcl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Param ::= Identifier AS TypeId 
            {
              Param RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Param(id, ti, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Param",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Params ::= LPAREN RPAREN 
            {
              ParamList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ParamList(lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Params",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Params ::= LPAREN ParamList RPAREN 
            {
              ParamList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Params",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ParamList ::= ParamList COMMA Param 
            {
              ParamList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pl; pl.addElement(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ParamList ::= Param 
            {
              ParamList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamList(pleft); RESULT.addElement(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Program ::= BEGIN PROGRAM Stmts END PROGRAM 
            {
              Program RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Program(ss, ssleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmts ::= Stmts Stmt 
            {
              StmtList RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.addElement(s); RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmts ::= MultEOL 
            {
              StmtList RESULT =null;
		 RESULT = new StmtList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= Dcl 
            {
              Stmt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dcl d = (Dcl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt ::= Assignment 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stmt ::= IfStmt 
            {
              Stmt RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStmt is = (IfStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stmt ::= WhileStmt 
            {
              Stmt RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStmt ws = (WhileStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stmt ::= ForeachStmt 
            {
              Stmt RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForeachStmt fs = (ForeachStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stmt ::= ForStmt 
            {
              Stmt RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForStmt fs = (ForStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stmt ::= SwitchStmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SwitchStmt s = (SwitchStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stmt ::= RETURN Expression MultEOL 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnExpr(e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stmt ::= RETURN MultEOL 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(rleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stmt ::= FunctionCall MultEOL 
            {
              Stmt RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCallStmt(fc, fcleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stmt ::= error EOL 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Dcl ::= DECLARE DclIds AS TypeId MultEOL 
            {
              Dcl RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DclIdList ds = (DclIdList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Dcl(ds, ti, dsleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dcl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Assignment ::= ObjectId AssignOp Expression MultEOL 
            {
              Assignment RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IdentifierReferencing oi = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AssignOp ao = (AssignOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assignment(oi, ao, e, oileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // WhileStmt ::= WHILE Expression DO Stmts END WHILE MultEOL 
            {
              WhileStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new WhileStmt(e, ss, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ForeachStmt ::= FOREACH TypeId Identifier IN ObjectId DO Stmts END FOREACH MultEOL 
            {
              ForeachStmt RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int oileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		IdentifierReferencing oi = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ForeachStmt(ti, id, oi, s, tileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForeachStmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ForStmt ::= FOR Expression ForIterator Expression DO Stmts END FOR MultEOL 
            {
              ForStmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ForIterator fi = (ForIterator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ForStmt(e1, fi, e2, ss, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IfStmt ::= IF Expression THEN Stmts ElseIfStmt 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElifStmt els = (ElifStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(e, ss, els, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ElseIfStmt ::= ELSE IF Expression THEN Stmts ElseIfStmt 
            {
              ElifStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElifStmt es = (ElifStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElseIfStmt(e, s, es, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ElseIfStmt ::= ElseStmt 
            {
              ElifStmt RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElifStmt es = (ElifStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ElseStmt ::= ELSE Stmts END IF MultEOL 
            {
              ElifStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ElseStmt(s, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ElseStmt ::= END IF MultEOL 
            {
              ElifStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new EndIfStmt(eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SwitchStmt ::= SWITCH Variable SwitchCases SwitchDef END SWITCH MultEOL 
            {
              SwitchStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int swcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int swcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SwitchCaseList swcs = (SwitchCaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int swdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int swdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SwitchDef swd = (SwitchDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new SwitchStmt(v, swcs, swd, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SwitchCases ::= SwitchCases SwitchCase 
            {
              SwitchCaseList RESULT =null;
		int swcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int swcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SwitchCaseList swcs = (SwitchCaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SwitchCase swc = (SwitchCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 swcs.addElement(swc); RESULT = swcs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCases",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SwitchCases ::= MultEOL 
            {
              SwitchCaseList RESULT =null;
		 RESULT = new SwitchCaseList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCases",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SwitchCase ::= CASE StdLiteral Stmts 
            {
              SwitchCase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StdLiteral v = (StdLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SwitchCase(v, ss, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCase",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SwitchDef ::= DEFAULT Stmts 
            {
              SwitchDef RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SwitchDef(ss, dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchDef",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= Expression PLUS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= Expression MINUS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression ::= Expression MULT Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= Expression DIV Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expression ::= Expression MOD Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expression ::= Expression AND Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expression ::= Expression OR Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expression ::= Expression EQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicEqualsExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expression ::= Expression LESSTHAN Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThanExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expression ::= Expression GREATERTHAN Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThanExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expression ::= Expression LESSTHANEQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThanEqualsExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expression ::= Expression GREATERTHANEQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualsExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expression ::= LPAREN Expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expression ::= LPAREN Expression COMMA Expression RPAREN 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CoordExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expression ::= NOT Expression 
            {
              Expression RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpr(e, notleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expression ::= MINUS Expression 
            {
              Expression RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnMinusExpr(e, minleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expression ::= Expression PLUSPLUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PlusPlusExpr(e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expression ::= Expression MINUSMINUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MinusMinusExpr(e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expression ::= FunctionCall 
            {
              Expression RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionCallExpr(fc, fcleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expression ::= ObjectId 
            {
              Expression RESULT =null;
		int nidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierReferencing nid = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ObjectIdExpr(nid, nidleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expression ::= StdLiteral 
            {
              Expression RESULT =null;
		int stdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StdLiteral std = (StdLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StdLiteralExpr(std, stdleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AssignOp ::= EQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AssignOp ::= PLUSEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AssignOp ::= MINUSEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // AssignOp ::= MODEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AssignOp ::= MULTEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AssignOp ::= DIVEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FunctionCall ::= ObjectId Arguments 
            {
              FunctionCall RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierReferencing ni = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArgumentList arg = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionCall(ni, arg, nileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Arguments ::= LPAREN RPAREN 
            {
              ArgumentList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArgumentList(lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Arguments ::= LPAREN ArgumentList RPAREN 
            {
              ArgumentList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = al; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ArgumentList ::= Expression 
            {
              ArgumentList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentList(eleft); RESULT.addElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ArgumentList ::= Expression COMMA ArgumentList 
            {
              ArgumentList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = al; al.addElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ForIterator ::= TO 
            {
              ForIterator RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ToIterator(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForIterator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ForIterator ::= DOWNTO 
            {
              ForIterator RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DownToIterator(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForIterator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Variable ::= ObjectId 
            {
              Variable RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierReferencing ni = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableObjectId(ni, nileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Variable ::= StdLiteral 
            {
              Variable RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StdLiteral st = (StdLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableStdLiteral(st, stleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // StdLiteral ::= DECIMAL_LITERAL 
            {
              StdLiteral RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double dec = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecimalLiteral(dec, decleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // StdLiteral ::= STRING_LITERAL 
            {
              StdLiteral RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(str, strleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // StdLiteral ::= BOOLEAN_LITERAL 
            {
              StdLiteral RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanLiteral(bool, boolleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // StdLiteral ::= INTEGER_LITERAL 
            {
              StdLiteral RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer in = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(in, inleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // StdLiteral ::= NULL_LITERAL 
            {
              StdLiteral RESULT =null;
		int nulleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nulright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nul = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NullLiteral(nulleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DclIds ::= DclIds COMMA Identifier 
            {
              DclIdList RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DclIdList ds = (DclIdList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ds; ds.addElement(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DclIds",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DclIds ::= Identifier 
            {
              DclIdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DclIdList(0); RESULT.addElement(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DclIds",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TypeId ::= TypeName LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeName tn = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array1D(tn, e, tnleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TypeId ::= TypeName LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TypeName tn = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array2D(tn, e1, e2, tnleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TypeId ::= LIST OF TypeName 
            {
              TypeIdentifier RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeName tn = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ListOf(tn, tnleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TypeId ::= TypeName 
            {
              TypeIdentifier RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeName tn = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tn; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TypeName ::= DECIMAL 
            {
              TypeName RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decimal(dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TypeName ::= STRING 
            {
              TypeName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringT(sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TypeName ::= BOOLEAN 
            {
              TypeName RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanT(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TypeName ::= TERRAIN 
            {
              TypeName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terrain(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TypeName ::= GROUP 
            {
              TypeName RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Group(gleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TypeName ::= PLATOON 
            {
              TypeName RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Platoon(pleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TypeName ::= FORCE 
            {
              TypeName RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Force(fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TypeName ::= COORD 
            {
              TypeName RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Coord(cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TypeName ::= SOLDIER 
            {
              TypeName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Soldier(sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TypeName ::= BARRIER 
            {
              TypeName RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Barrier(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TypeName ::= VECTOR 
            {
              TypeName RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VectorT(vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TypeName ::= INTEGER 
            {
              TypeName RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerT(ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TypeName ::= VOID 
            {
              TypeName RESULT =null;
		int voleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int voright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VoidT(voleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ObjectId ::= ObjectId DOT Identifier 
            {
              IdentifierReferencing RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierReferencing o = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ObjectReferencing(o, i, oleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ObjectId",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ObjectId ::= ObjectId DOT ArrayRef 
            {
              IdentifierReferencing RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierReferencing o = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierReferencing a = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ObjectReferencing(o, a, oleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ObjectId",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ObjectId ::= ArrayRef 
            {
              IdentifierReferencing RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierReferencing a = (IdentifierReferencing)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ObjectId",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ObjectId ::= Identifier 
            {
              IdentifierReferencing RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ObjectId",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ArrayRef ::= Identifier LBRACE Expression RBRACE 
            {
              IdentifierReferencing RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array1DReferencing(id, e, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayRef",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ArrayRef ::= Identifier LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              IdentifierReferencing RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array2DReferencing(id, e1, e2, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayRef",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // MultEOL ::= MultEOL EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultEOL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // MultEOL ::= EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultEOL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Identifier(id, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
