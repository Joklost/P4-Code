package com.company.SyntaxAnalysis;

import java_cup.runtime.*;
import com.company.AST.Nodes.*;

parser code {:
    public boolean errorFound = false;
    private Scanner s;
    public Parser(com.company.SyntaxAnalysis.Scanner s, boolean useMe   ) {
        super(s);
        this.s = s;
    }


    public void report_error(String message, Object info) {
        errorFound = true;
        System.err.print(message);
        System.err.flush();
        if (info instanceof Symbol) {
            if (((Symbol)info).left != -1) {
                System.err.println(" at line " + (((Symbol)info).left + 1) + " column " + (((Symbol)info).right + 1) + " of input");
            } else {
                System.err.println("");
            }
        } else {
            System.err.println("");
        }

    }
:};

/* Preliminaries to set up and use the scanner.  */
scan with {: /*token_num++; */return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal BOOLEAN, IF, WHILE, DO, FOREACH, FUNCTION, END;
terminal BEGIN, PROGRAM, FOR, AS, DECIMAL, STRING;
terminal DECLARE, IN, RETURN, ELSE, LIST, DECLARATIONS;
terminal SWITCH, NULL_LITERAL, CASE, DEFAULT, INTEGER;

terminal LPAREN, RPAREN, LBRACE, RBRACE, COMMA, DOT;

terminal EQ, PLUSPLUS, MINUSMINUS, PLUS, MINUS, DIV, UMINUS;
terminal MULT, MOD, PLUSEQ, MINUSEQ, MULTEQ, DIVEQ;
terminal MODEQ, AND, OR, NOT, EQUALS, GREATERTHAN;
terminal GREATERTHANEQUALS, LESSTHAN, LESSTHANEQUALS;

terminal EOL, DOWNTO, TO, THEN, VOID, OF;
//terminal TERRAIN, GROUP, PLATOON, FORCE, COORD, SOLDIER;
terminal SIMULATIONS, SIMULATION, STEP, INTERRUPTS;
//terminal VECTOR, BARRIER, TYPE;
terminal TYPE;

terminal Boolean BOOLEAN_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal Double DECIMAL_LITERAL;
terminal String STRING_LITERAL, IDENTIFIER, JAVASTRING;

/* Non-terminals */

nonterminal Start             Start;
nonterminal DclBlock          DclBlock;
nonterminal FunctionDclList   FunctionDcls;
nonterminal FunctionDcl       FunctionDcl;
nonterminal Param             Param;
nonterminal ParamList         Params;
nonterminal ParamList         ParamList;
nonterminal Program           Program;
nonterminal StmtList          Stmts;
nonterminal Stmt              Stmt;

nonterminal SimBlock          SimBlock;
nonterminal SimulationList    Simulations;
nonterminal Simulation        Simulation;
nonterminal SimStepList       SimSteps;
nonterminal SimStep           SimStep;
nonterminal Interrupts        Interrupts;
/**/
nonterminal WhileStmt         WhileStmt;
nonterminal ForeachStmt       ForeachStmt;
nonterminal ForStmt           ForStmt;
nonterminal Dcl               Dcl;
nonterminal Assignment        Assignment;
nonterminal IfStmt            IfStmt;
nonterminal ElifStmt          ElseIfStmt;
nonterminal ElifStmt          ElseStmt;
nonterminal SwitchStmt        SwitchStmt;
nonterminal SwitchCaseList    SwitchCases;
nonterminal SwitchCase        SwitchCase;
nonterminal SwitchDef         SwitchDef;
nonterminal UnaryStmt         UnaryStmt;
nonterminal Expression        Expression;
nonterminal AssignOp          AssignOp;
nonterminal FunctionCall      FunctionCall;
nonterminal ArgumentList      Arguments;
nonterminal ArgumentList      ArgumentList;
nonterminal ForIterator       ForIterator;
nonterminal Variable          Variable;
nonterminal StdLiteral        StdLiteral;
nonterminal DclIdList         DclIds;
nonterminal TypeIdentifier    TypeId;
nonterminal TypeName          TypeName;
nonterminal IdentifierReferencing ObjectId;
nonterminal IdentifierReferencing ArrayRef;
nonterminal Identifier        Identifier;

nonterminal TypeDeclarationList TypeDcls;
nonterminal TypeDeclaration   TypeDcl;
nonterminal DeclarationList   Dcls;

nonterminal MultEOL;

/* Precedences */
precedence nonassoc OR;
precedence nonassoc AND;
precedence nonassoc EQUALS;
precedence left LESSTHAN, GREATERTHAN, GREATERTHANEQUALS, LESSTHANEQUALS;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence right NOT, UMINUS;
precedence left PLUSPLUS, MINUSMINUS;

precedence left ELSE;

/* The grammar */
start with Start;

Start         ::= DclBlock:db SimBlock:s TypeDcls:tl FunctionDcls:fds1 Program:p                {: RESULT = new Start(db, s, tl, fds1, p, dbleft); :}
              ;
DclBlock      ::= MultEOL BEGIN DECLARATIONS Stmts:ss END DECLARATIONS MultEOL                  {: RESULT = new DclBlock(ss, ssleft); :}
              |   BEGIN DECLARATIONS Stmts:ss END DECLARATIONS MultEOL                          {: RESULT = new DclBlock(ss, ssleft); :}
              ;
SimBlock      ::= DECLARE SIMULATIONS Simulations:s END DECLARE SIMULATIONS                     {: RESULT = new SimBlock(s, sleft); :}
              ;
Simulations   ::= Simulations:ss Simulation:s                                                   {: RESULT = ss; ss.addElement(s); :}
              |   MultEOL                                                                       {: RESULT = new SimulationList(0); :}
              ;
Simulation    ::= SIMULATION Identifier:id ObjectId:oi SimSteps:sis Interrupts:is END SIMULATION MultEOL {: RESULT = new Simulation(id, oi, sis, is, idleft); :}
              ;
SimSteps      ::= SimSteps:sl SimStep:s                                                         {: RESULT = sl; sl.addElement(s); :}
              |   MultEOL                                                                       {: RESULT = new SimStepList(0); :}
              ;
SimStep       ::= STEP INTEGER_LITERAL:i Stmts:ss                                               {: RESULT = new SimStep(i, ss, ileft); :}
              ;
Interrupts    ::= INTERRUPTS Stmts:ss                                                           {: RESULT = new Interrupts(ss, ssleft); :}
              ;
/**/
TypeDcls      ::= TypeDcls:tl TypeDcl:t                                                         {: RESULT = tl; tl.addElement(t); :}
              |   MultEOL                                                                       {: RESULT = new TypeDeclarationList(0); :}
              ;
TypeDcl       ::= TYPE Identifier:i MultEOL Dcls:dl FunctionDcls:fdl END TYPE MultEOL           {: RESULT = new TypeDeclaration(i, dl, fdl, ileft); :}
              ;
Dcls          ::= Dcls:dl Dcl:d                                                                 {: RESULT = dl; dl.addElement(d); :}
              |   Dcl:d                                                                         {: RESULT = new DeclarationList(0); RESULT.addElement(d); :}
              ;
/**/
FunctionDcls  ::= FunctionDcl:fd                                                                {: RESULT = new FunctionDclList(0); RESULT.addElement(fd); :}
              |   FunctionDcls:fds FunctionDcl:fd                                               {: RESULT = fds; fds.addElement(fd); :}
              ;
FunctionDcl   ::= FUNCTION TypeId:ti Identifier:id Params:p Stmts:ss END FUNCTION MultEOL       {: RESULT = new FunctionDcl(ti, id, p, ss, tileft); :}
              ;
Param         ::= Identifier:id AS TypeId:ti                                                    {: RESULT = new Param(id, ti, idleft); :}
              ;
Params        ::= LPAREN:l RPAREN                                                               {: RESULT = new ParamList(lleft); :}
              |   LPAREN ParamList:pl RPAREN                                                    {: RESULT = pl; :}
              ;
ParamList     ::= ParamList:pl COMMA Param:p                                                    {: RESULT = pl; pl.addElement(p); :}
              |   Param:p                                                                       {: RESULT = new ParamList(pleft); RESULT.addElement(p); :}
              ;
Program       ::= BEGIN PROGRAM Stmts:ss END PROGRAM MultEOL                                    {: RESULT = new Program(ss, ssleft); :}
              ;
Stmts         ::= Stmts:ss Stmt:s                                                               {: ss.addElement(s); RESULT = ss; :}
              |   MultEOL                                                                       {: RESULT = new StmtList(0); :}
              ;
Stmt          ::= Dcl:d                                                                         {: RESULT = d; :}
              |   Assignment:a                                                                  {: RESULT = a; :}
              |   IfStmt:is                                                                     {: RESULT = is; :}
              |   WhileStmt:ws                                                                  {: RESULT = ws; :}
              |   ForeachStmt:fs                                                                {: RESULT = fs; :}
              |   ForStmt:fs                                                                    {: RESULT = fs; :}
              |   SwitchStmt:s                                                                  {: RESULT = s; :}
              |   RETURN Expression:e MultEOL                                                   {: RESULT = new ReturnExpr(e, eleft); :}
              |   RETURN:r MultEOL                                                              {: RESULT = new Return(rleft); :}
              |   FunctionCall:fc MultEOL                                                       {: RESULT = new FunctionCallStmt(fc, fcleft); :}
              |   error EOL
              |   JAVASTRING:j                                                                  {: RESULT = new JavaString(j, jleft); :}
              |   UnaryStmt:u                                                                   {: RESULT = u; :}
              ;
UnaryStmt     ::= ObjectId:oi PLUSPLUS                                                          {: RESULT = new PlusPlusStmt(oi, oileft); :}
              |   ObjectId:oi MINUSMINUS                                                       {: RESULT = new MinusMinusStmt(oi, oileft); :}
              ;
Dcl           ::= DECLARE DclIds:ds AS TypeId:ti MultEOL                                        {: RESULT = new Dcl(ds, ti, dsleft); :}
              ;
Assignment    ::= ObjectId:oi AssignOp:ao Expression:e MultEOL                                  {: RESULT = new Assignment(oi, ao, e, oileft); :}
              ;
WhileStmt     ::= WHILE Expression:e DO Stmts:ss END WHILE MultEOL                              {: RESULT = new WhileStmt(e, ss, eleft); :}
              ;
ForeachStmt   ::= FOREACH TypeId:ti Identifier:id IN ObjectId:oi DO Stmts:s END FOREACH MultEOL {: RESULT = new ForeachStmt(ti, id, oi, s, tileft); :}
              ;
ForStmt       ::= FOR Expression:e1 ForIterator:fi Expression:e2 DO Stmts:ss END FOR MultEOL    {: RESULT = new ForStmt(e1, fi, e2, ss, e1left); :}
              ;

IfStmt        ::= IF Expression:e THEN Stmts:ss ElseIfStmt:els                                  {: RESULT = new IfStmt(e, ss, els, eleft); :}
              ;
ElseIfStmt    ::= ELSE IF Expression:e THEN Stmts:s ElseIfStmt:es                               {: RESULT = new ElseIfStmt(e, s, es, eleft); :}
              |   ElseStmt:es                                                                   {: RESULT = es; :}
              ;
ElseStmt      ::= ELSE Stmts:s END IF MultEOL                                                   {: RESULT = new ElseStmt(s, sleft); :}
              |   END:e IF MultEOL                                                              {: RESULT = new EndIfStmt(eleft); :}
              ;

SwitchStmt    ::= SWITCH Variable:v SwitchCases:swcs SwitchDef:swd END SWITCH MultEOL           {: RESULT = new SwitchStmt(v, swcs, swd, vleft); :}
              ;
SwitchCases   ::= SwitchCases:swcs SwitchCase:swc                                               {: swcs.addElement(swc); RESULT = swcs; :}
              |   MultEOL                                                                       {: RESULT = new SwitchCaseList(0); :}
              ;
SwitchCase    ::= CASE StdLiteral:v Stmts:ss                                                    {: RESULT = new SwitchCase(v, ss, vleft); :}
              ;
SwitchDef     ::= DEFAULT:d Stmts:ss                                                            {: RESULT = new SwitchDef(ss, dleft); :}
              ;
Expression    ::= Expression:e1 PLUS Expression:e2                                              {: RESULT = new PlusExpr(e1, e2, e1left); :}
              |   Expression:e1 MINUS Expression:e2                                             {: RESULT = new MinusExpr(e1, e2, e1left); :}
              |   Expression:e1 MULT Expression:e2                                              {: RESULT = new MultExpr(e1, e2, e1left); :}
              |   Expression:e1 DIV Expression:e2                                               {: RESULT = new DivExpr(e1, e2, e1left); :}
              |   Expression:e1 MOD Expression:e2                                               {: RESULT = new ModExpr(e1, e2, e1left); :}
              |   Expression:e1 AND Expression:e2                                               {: RESULT = new AndExpr(e1, e2, e1left); :}
              |   Expression:e1 OR Expression:e2                                                {: RESULT = new OrExpr(e1, e2, e1left); :}
              |   Expression:e1 EQUALS Expression:e2                                            {: RESULT = new LogicEqualsExpr(e1, e2, e1left); :}
              |   Expression:e1 LESSTHAN Expression:e2                                          {: RESULT = new LessThanExpr(e1, e2, e1left); :}
              |   Expression:e1 GREATERTHAN Expression:e2                                       {: RESULT = new GreaterThanExpr(e1, e2, e1left); :}
              |   Expression:e1 LESSTHANEQUALS Expression:e2                                    {: RESULT = new LessThanEqualsExpr(e1, e2, e1left); :}
              |   Expression:e1 GREATERTHANEQUALS Expression:e2                                 {: RESULT = new GreaterThanEqualsExpr(e1, e2, e1left); :}
              |   LPAREN Expression:e RPAREN                                                    {: RESULT = e; :}
              |   LPAREN Expression:e1 COMMA Expression:e2 RPAREN /* coord */                   {: RESULT = new CoordExpr(e1, e2, e1left); :}
              |   NOT:not Expression:e                                                          {: RESULT = new NotExpr(e, notleft); :}
              |   MINUS:min Expression:e                                                        {: RESULT = new UnMinusExpr(e, minleft); :} %prec UMINUS
              |   Expression:e PLUSPLUS                                                         {: RESULT = new PlusPlusExpr(e, eleft); :}
              |   Expression:e MINUSMINUS                                                       {: RESULT = new MinusMinusExpr(e, eleft); :}
              |   FunctionCall:fc                                                               {: RESULT = new FunctionCallExpr(fc, fcleft); :}
              |   ObjectId:nid                                                                  {: RESULT = new ObjectIdExpr(nid, nidleft); :}
              |   StdLiteral:std                                                                {: RESULT = new StdLiteralExpr(std, stdleft); :}
              ;
AssignOp      ::= EQ:eq                                                                         {: RESULT = new EqualsOp(eqleft); :}
              |   PLUSEQ:eq                                                                     {: RESULT = new PlusEqualsOp(eqleft); :}
              |   MINUSEQ:eq                                                                    {: RESULT = new MinusEqualsOp(eqleft); :}
              |   MODEQ:eq                                                                      {: RESULT = new ModEqualsOp(eqleft); :}
              |   MULTEQ:eq                                                                     {: RESULT = new MultEqualsOp(eqleft); :}
              |   DIVEQ:eq                                                                      {: RESULT = new DivEqualsOp(eqleft); :}
              ;
FunctionCall  ::= ObjectId:ni Arguments:arg  /* der kan godt være lidt problems her */          {: RESULT = new FunctionCall(ni, arg, nileft); :}
              ;
Arguments     ::= LPAREN:l RPAREN                                                               {: RESULT = new ArgumentList(lleft); :}
              |   LPAREN ArgumentList:al RPAREN                                                 {: RESULT = al; :}
              ;
ArgumentList  ::= Expression:e                                                                  {: RESULT = new ArgumentList(eleft); RESULT.addElement(e); :}
              |   Expression:e COMMA ArgumentList:al                                            {: RESULT = al; al.addElement(e); :}
              ;
ForIterator   ::= TO:t                                                                          {: RESULT = new ToIterator(tleft); :}
              |   DOWNTO:t                                                                      {: RESULT = new DownToIterator(tleft); :}
              ;
Variable      ::= ObjectId:ni                                                                   {: RESULT = new VariableObjectId(ni, nileft); :}
              |   StdLiteral:st                                                                 {: RESULT = new VariableStdLiteral(st, stleft); :}
              ;
StdLiteral    ::= DECIMAL_LITERAL:dec                                                           {: RESULT = new DecimalLiteral(dec, decleft); :}
              |   STRING_LITERAL:str                                                            {: RESULT = new StringLiteral(str, strleft); :}
              |   BOOLEAN_LITERAL:bool                                                          {: RESULT = new BooleanLiteral(bool, boolleft); :}
              |   INTEGER_LITERAL:in                                                            {: RESULT = new IntegerLiteral(in, inleft); :}
              |   NULL_LITERAL:nul                                                              {: RESULT = new NullLiteral(nulleft); :}
              ;
DclIds        ::= DclIds:ds COMMA Identifier:id                                                 {: RESULT = ds; ds.addElement(id); :}
              |   Identifier:id                                                                 {: RESULT = new DclIdList(0); RESULT.addElement(id); :}
              ;
TypeId        ::= TypeName:tn LBRACE Expression:e RBRACE                                        {: RESULT = new Array1D(tn, e, tnleft); :}
              |   TypeName:tn LBRACE Expression:e1 RBRACE LBRACE Expression:e2 RBRACE           {: RESULT = new Array2D(tn, e1, e2, tnleft); :}
              |   LIST OF TypeName:tn                                                           {: RESULT = new ListOf(tn, tnleft); :}
              |   TypeName:tn                                                                   {: RESULT = tn; :}
              ;
TypeName      ::= DECIMAL:d                                                                     {: RESULT = new Decimal(dleft); :}
              |   STRING:s                                                                      {: RESULT = new StringT(sleft); :}
              |   BOOLEAN:b                                                                     {: RESULT = new BooleanT(bleft); :}
/*  DISSE KOMMER FRA STDLIB
              |   TERRAIN:t                                                                     {: RESULT = new Terrain(tleft); :}
              |   GROUP:g                                                                       {: RESULT = new Group(gleft); :}
              |   PLATOON:p                                                                     {: RESULT = new Platoon(pleft); :}
              |   FORCE:f                                                                       {: RESULT = new Force(fleft); :}
              |   COORD:c                                                                       {: RESULT = new Coord(cleft); :}
              |   SOLDIER:s                                                                     {: RESULT = new Soldier(sleft); :}
              |   BARRIER:b                                                                     {: RESULT = new Barrier(bleft); :}
              |   VECTOR:v                                                                      {: RESULT = new VectorT(vleft); :}
*/
              |   INTEGER:i                                                                     {: RESULT = new IntegerT(ileft); :}
              |   VOID:vo                                                                       {: RESULT = new VoidT(voleft); :}
              |   Identifier:id                                                                 {: RESULT = new CustomTypeIdentifier(id, idleft); :}
              ;
ObjectId      ::= ObjectId:o DOT Identifier:i           /* 1 */                                 {: RESULT = new ObjectReferencing(o, i, oleft); :}
              |   ObjectId:o DOT ArrayRef:a             /* 2 */                                 {: RESULT = new ObjectReferencing(o, a, oleft); :}
              |   ArrayRef:a                            /* 3 */                                 {: RESULT = a; :}
              |   Identifier:i                          /* 4 */                                 {: RESULT = i; :}
              ;
ArrayRef      ::= Identifier:id LBRACE Expression:e RBRACE      /* 6 */                          {: RESULT = new Array1DReferencing(id, e, idleft); :}
              |   Identifier:id LBRACE Expression:e1 RBRACE LBRACE Expression:e2 RBRACE /* 7 */  {: RESULT = new Array2DReferencing(id, e1, e2, idleft); :}
              ;

MultEOL       ::= MultEOL EOL
              |   EOL
              ;
Identifier    ::= IDENTIFIER:id                                                                 {: RESULT = new Identifier(id, idleft); :}
              ;
