// Test declerations
// Declarations er påkrævet
// TEST: Success
Begin Declarations
    Declare da as Boolean
    Declare no as Boolean
    Declare k as Decimal
    Declare foo as Integer
    Declare s as String
    Declare a as Integer
    Declare list as List of String
    Declare i as Integer
    i = 5
    Declare Charlie as Soldier
End Declarations

// Test declerations
// Declerations er påkrævet
// TEST: Success
Declare Simulations
End Declare Simulations
Type Barrier
  Declare vertices as List of Coord

  Function Void AddVertex(vertex as Coord)
    //.Add virker ikke endnu
    //vertices.Add(vertex)
  End Function
End Type

Type Coord
  Declare X as Decimal
  Declare Y as Decimal

  Function String ToString()
    Return "(" + X + "," + Y + ")"
  End Function
End Type

Type Vector
  Declare X as Decimal
  Declare Y as Decimal

  Function Decimal GetLength()
    Declare res as Decimal
    %`` res = Math.abs(Math.sqrt( Math.pow(X, X) + Math.pow(Y, Y))); //Fix pls
    Return res
  End Function
End Type

Type DSTFunctions
  Declare Hej as Integer
  Function Vector FindUnitVector(startCoord as Coord, targetCoord as Coord)
    Declare res as Vector
    //res.X = targetCoord.X - startCoord.X
    //res.Y = targetCoord.Y - startCoord.Y
    Declare length as Decimal
    length = res.GetLength()
    res.X /= length
    res.Y /= length
    Return res
  End Function

  Function Coord CenterOfMass(coords as List of Coord)
    Declare res as Coord
    /* Foreach virker ikke endnu
    Foreach coord in coords
      res.x += coord.x
      res.y += coord.y
    End Foreach */
    res.X /= coords.Count()
    res.Y /= coords.Count()
    Return res
  End Function
End Type

Type Terrain
  Declare Width as Integer
  Declare Height as Integer

  Function Void Hej()
  End Function
End Type

Type Soldier
  Declare DefaultVelocity as Decimal
  Declare Size as Integer
  Declare Velocity as Decimal
  Declare Magazines as Integer
  Declare Pos as Coord
  Declare Direction as Vector

  Function Void Soldier()
    DefaultVelocity = 3 //Change this because this is a random number
    Size = 4            //Change this because this is a random number
    Velocity = 0
    Magazines = 4
  End Function

  Function Void Move(target as Coord)
    If Velocity == 0 Then
      Velocity = DefaultVelocity
    End If
    Declare dstf as DSTFunctions
    Direction = dstf.FindUnitVector(pos, target)
  End Function

  Function Void Move(target as Coord, vel as Decimal)
    Velocity = vel
    Declare dstf as DSTFunctions
    direction = dstf.FindUnitVector(pos, target)
  End Function
End Type

/*
Type Coord
  Declare X as Decimal
  Declare Y as Decimal

  Function String ToString()
    Return "(" + X + "," + Y + ")"
  End Function
End Type

Type Vector
  Declare x as Decimal
  Declare y as Decimal

  Function Decimal GetLength()
    Declare res as Decimal
    %`` res = Math.abs(Math.sqrt( Math.pow(x, x) + Math.pow(y, y))); //Fix pls
    Return res
  End Function
End Type

Type Soldier
Declare DefaultVelocity as Decimal
Declare Size as Integer
Declare Velocity as Decimal
Declare Magazines as Integer
Declare Pos as Coord
Declare Direction as Vector

  Function Void SetMagazines(mags as Integer)
    Magazines = mags
  End Function

  Function String PosToString()
    Return "(" + Pos.X + "," + Pos.Y + ")"
  End Function

  Function Void Teleport(target as Coord)
    Pos = target
  End Function

End Type
*/
// Test Include
// Include kan først komme efter simulations og declerations
//  ellers gives fejl
// TEST: Success
#Include("stdlib.bsi")
#Include("test_functions.bsi") // Include all
                               // our test functions

Begin Program
    Declare target as Coord
    target.X = 4
    target.Y = 5
    PrintLine(target.ToString())
    Declare john as Soldier
    PrintLine(john.PosToString())
    john.Teleport(target)
    PrintLine(john.PosToString())
    /*
        Testing block comment
    */
    // Run test for reccursiv functions
    PrintLine(Factorial(5) + "")
    PrintLine("Factorial success")

    // Run test for return Integer
    PrintLine(ReturnInt() + "")
    PrintLine("return Integer success")

    // Run test for return Decimal
    PrintLine(ReturnDecimal() + "")
    PrintLine("return dedimal success")

    // Run test for while
    TestWhile()
    PrintLine("while success")

    // Test array and Foreach
    TestArrayForeach()
    PrintLine("array and foreach success")

    // Test math
    math(12)
    PrintLine("math tested success")

    // Test bool
    TestBool()
    PrintLine("bool tested success")

    // Test if
    TestIf()
    PrintLine("If tested success")

    TestSwitch()
    PrintLine("Switch tested success")

    TestFor()
    PrintLine("For loops tested success")

    // Ej muligt
    //PrintLine("Test \"escape\"...")
    // Test \n. \n virker kun med workaround #15
    Print("New line \\n")

    Print("Test print")
    PrintLine("")

    TestScope()

    PrintLine("Test ting")
    Charlie.Magazines = 1
    PrintLine(Charlie.Magazines + "")
    Charlie.SetMagazines(42)
    PrintLine(Charlie.Magazines + "")

End Program
