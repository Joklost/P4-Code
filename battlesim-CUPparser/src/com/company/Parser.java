
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package com.company;

import java_cup.runtime.*;
import com.company.AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\006\000\002\003" +
    "\010\000\002\003\003\000\002\004\003\000\002\004\005" +
    "\000\002\005\011\000\002\006\005\000\002\007\004\000" +
    "\002\007\005\000\002\010\005\000\002\010\003\000\002" +
    "\011\007\000\002\012\004\000\002\012\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\005\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\017\007\000\002\020\006\000\002\014" +
    "\011\000\002\015\014\000\002\016\013\000\002\021\007" +
    "\000\002\022\005\000\002\022\004\000\002\022\007\000" +
    "\002\023\011\000\002\024\004\000\002\024\003\000\002" +
    "\025\005\000\002\026\004\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\004\000\002\027" +
    "\004\000\002\027\004\000\002\027\004\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\004\000\002\032" +
    "\004\000\002\032\005\000\002\033\003\000\002\033\005" +
    "\000\002\034\003\000\002\034\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\006\000\002\037" +
    "\006\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\037\006\000\002\037\006\000\002\037\006\000" +
    "\002\037\006\000\002\037\006\000\002\037\006\000\002" +
    "\037\006\000\002\037\011\000\002\037\011\000\002\037" +
    "\011\000\002\037\011\000\002\037\011\000\002\037\011" +
    "\000\002\037\011\000\002\037\011\000\002\037\011\000" +
    "\002\037\011\000\002\037\011\000\002\037\011\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\003\000\002" +
    "\040\005\000\002\040\010\000\002\040\006\000\002\040" +
    "\003\000\002\041\004\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\006\013\006\070\004\001\002\000\004\070" +
    "\ufffe\001\002\000\004\002\u0121\001\002\000\004\026\u011c" +
    "\001\002\000\004\070\011\001\002\000\006\011\016\013" +
    "\015\001\002\000\044\002\uff7b\003\uff7b\005\uff7b\006\uff7b" +
    "\010\uff7b\011\uff7b\012\uff7b\013\uff7b\015\uff7b\021\uff7b\023" +
    "\uff7b\024\uff7b\027\uff7b\031\uff7b\032\uff7b\070\uff7b\112\uff7b" +
    "\001\002\000\012\002\ufffd\011\ufffd\013\ufffd\070\013\001" +
    "\002\000\044\002\uff7c\003\uff7c\005\uff7c\006\uff7c\010\uff7c" +
    "\011\uff7c\012\uff7c\013\uff7c\015\uff7c\021\uff7c\023\uff7c\024" +
    "\uff7c\027\uff7c\031\uff7c\032\uff7c\070\uff7c\112\uff7c\001\002" +
    "\000\004\070\011\001\002\000\004\014\u0117\001\002\000" +
    "\036\004\027\017\021\020\032\025\034\033\022\074\030" +
    "\076\031\077\036\100\033\101\037\102\025\103\024\104" +
    "\023\105\035\001\002\000\004\070\011\001\002\000\012" +
    "\002\ufffc\011\ufffc\013\ufffc\070\013\001\002\000\014\035" +
    "\uffb1\036\u0111\040\uffb1\070\uffb1\112\uffb1\001\002\000\014" +
    "\035\uffa6\036\u010b\040\uffa6\070\uffa6\112\uffa6\001\002\000" +
    "\014\035\uffa7\036\u0105\040\uffa7\070\uffa7\112\uffa7\001\002" +
    "\000\014\035\uffa9\036\377\040\uffa9\070\uffa9\112\uffa9\001" +
    "\002\000\014\035\uffaa\036\371\040\uffaa\070\uffaa\112\uffaa" +
    "\001\002\000\004\112\220\001\002\000\014\035\uffaf\036" +
    "\212\040\uffaf\070\uffaf\112\uffaf\001\002\000\012\035\uff81" +
    "\040\uff81\070\uff81\112\uff81\001\002\000\014\035\uffae\036" +
    "\204\040\uffae\070\uffae\112\uffae\001\002\000\014\035\uffb0" +
    "\036\176\040\uffb0\070\uffb0\112\uffb0\001\002\000\014\035" +
    "\uffac\036\170\040\uffac\070\uffac\112\uffac\001\002\000\004" +
    "\075\153\001\002\000\014\035\uffa8\036\145\040\uffa8\070" +
    "\uffa8\112\uffa8\001\002\000\014\035\uffad\036\137\040\uffad" +
    "\070\uffad\112\uffad\001\002\000\014\035\uffab\036\040\040" +
    "\uffab\070\uffab\112\uffab\001\002\000\024\030\042\034\054" +
    "\046\041\062\053\106\044\107\055\110\052\111\045\112" +
    "\051\001\002\000\024\030\042\034\054\046\041\062\053" +
    "\106\044\107\055\110\052\111\045\112\051\001\002\000" +
    "\052\007\uffb2\035\uffb2\037\uffb2\040\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2\060\uffb2\061" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2" +
    "\073\uffb2\001\002\000\052\007\uffc8\035\uffc8\037\uffc8\040" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8" +
    "\052\uffc8\060\uffc8\061\uffc8\063\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\073\uffc8\001\002\000\052\007\uffb4" +
    "\035\uffb4\037\uffb4\040\uffb4\043\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\051\uffb4\052\uffb4\060\uffb4\061\uffb4\063\uffb4" +
    "\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\073\uffb4\001" +
    "\002\000\052\007\uffb5\035\uffb5\037\uffb5\040\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\060" +
    "\uffb5\061\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5" +
    "\070\uffb5\073\uffb5\001\002\000\040\037\132\043\061\044" +
    "\073\045\065\046\057\047\067\051\063\052\062\060\060" +
    "\061\075\063\072\064\066\065\074\066\071\067\064\001" +
    "\002\000\052\007\uffc6\035\uffc6\037\uffc6\040\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6\052\uffc6\060" +
    "\uffc6\061\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\070\uffc6\073\uffc6\001\002\000\054\007\uffc7\034\123\035" +
    "\uffc7\037\uffc7\040\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\051\uffc7\052\uffc7\060\uffc7\061\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\073\uffc7\001\002" +
    "\000\100\007\uff7d\034\uff7d\035\uff7d\036\113\037\uff7d\040" +
    "\uff7d\041\114\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d" +
    "\047\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056" +
    "\uff7d\057\uff7d\060\uff7d\061\uff7d\063\uff7d\064\uff7d\065\uff7d" +
    "\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\001" +
    "\002\000\052\007\uffb6\035\uffb6\037\uffb6\040\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\051\uffb6\052\uffb6\060" +
    "\uffb6\061\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6" +
    "\070\uffb6\073\uffb6\001\002\000\024\030\042\034\054\046" +
    "\041\062\053\106\044\107\055\110\052\111\045\112\051" +
    "\001\002\000\024\030\042\034\054\046\041\062\053\106" +
    "\044\107\055\110\052\111\045\112\051\001\002\000\052" +
    "\007\uffb3\035\uffb3\037\uffb3\040\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\060\uffb3\061\uffb3" +
    "\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\073" +
    "\uffb3\001\002\000\040\035\070\043\061\044\073\045\065" +
    "\046\057\047\067\051\063\052\062\060\060\061\075\063" +
    "\072\064\066\065\074\066\071\067\064\001\002\000\024" +
    "\030\042\034\054\046\041\062\053\106\044\107\055\110" +
    "\052\111\045\112\051\001\002\000\024\030\042\034\054" +
    "\046\041\062\053\106\044\107\055\110\052\111\045\112" +
    "\051\001\002\000\052\007\uffca\035\uffca\037\uffca\040\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\051\uffca\052" +
    "\uffca\060\uffca\061\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\067\uffca\070\uffca\073\uffca\001\002\000\024\030\042\034" +
    "\054\046\041\062\053\106\044\107\055\110\052\111\045" +
    "\112\051\001\002\000\024\030\042\034\054\046\041\062" +
    "\053\106\044\107\055\110\052\111\045\112\051\001\002" +
    "\000\024\030\042\034\054\046\041\062\053\106\044\107" +
    "\055\110\052\111\045\112\051\001\002\000\024\030\042" +
    "\034\054\046\041\062\053\106\044\107\055\110\052\111" +
    "\045\112\051\001\002\000\024\030\042\034\054\046\041" +
    "\062\053\106\044\107\055\110\052\111\045\112\051\001" +
    "\002\000\024\030\042\034\054\046\041\062\053\106\044" +
    "\107\055\110\052\111\045\112\051\001\002\000\052\007" +
    "\uffcd\035\uffcd\037\uffcd\040\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\051\uffcd\052\uffcd\060\uffcd\061\uffcd\063" +
    "\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\073\uffcd" +
    "\001\002\000\024\030\042\034\054\046\041\062\053\106" +
    "\044\107\055\110\052\111\045\112\051\001\002\000\024" +
    "\030\042\034\054\046\041\062\053\106\044\107\055\110" +
    "\052\111\045\112\051\001\002\000\052\007\uffc9\035\uffc9" +
    "\037\uffc9\040\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\051\uffc9\052\uffc9\060\uffc9\061\uffc9\063\uffc9\064\uffc9" +
    "\065\uffc9\066\uffc9\067\uffc9\070\uffc9\073\uffc9\001\002\000" +
    "\024\030\042\034\054\046\041\062\053\106\044\107\055" +
    "\110\052\111\045\112\051\001\002\000\024\030\042\034" +
    "\054\046\041\062\053\106\044\107\055\110\052\111\045" +
    "\112\051\001\002\000\050\007\uffd3\035\uffd3\037\uffd3\040" +
    "\uffd3\043\061\044\073\045\065\046\057\047\067\051\063" +
    "\052\062\060\060\063\072\064\066\065\074\066\071\067" +
    "\064\070\uffd3\073\uffd3\001\002\000\052\007\uffce\035\uffce" +
    "\037\uffce\040\uffce\043\061\044\073\045\065\046\057\047" +
    "\067\051\063\052\062\060\uffce\061\uffce\063\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\070\uffce\073\uffce\001\002\000" +
    "\050\007\uffd2\035\uffd2\037\uffd2\040\uffd2\043\061\044\073" +
    "\045\065\046\057\047\067\051\063\052\062\060\uffd2\061" +
    "\uffd2\064\066\065\074\066\071\067\064\070\uffd2\073\uffd2" +
    "\001\002\000\052\007\uffd1\035\uffd1\037\uffd1\040\uffd1\043" +
    "\061\044\073\045\065\046\057\047\067\051\063\052\062" +
    "\060\uffd1\061\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\070\uffd1\073\uffd1\001\002\000\052\007\uffd6\035\uffd6" +
    "\037\uffd6\040\uffd6\043\061\044\073\045\uffd6\046\uffd6\047" +
    "\uffd6\051\uffd6\052\uffd6\060\uffd6\061\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\067\uffd6\070\uffd6\073\uffd6\001\002\000" +
    "\052\007\uffd0\035\uffd0\037\uffd0\040\uffd0\043\061\044\073" +
    "\045\065\046\057\047\067\051\063\052\062\060\uffd0\061" +
    "\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0" +
    "\073\uffd0\001\002\000\052\007\uffd9\035\uffd9\037\uffd9\040" +
    "\uffd9\043\061\044\073\045\uffd9\046\uffd9\047\067\051\063" +
    "\052\062\060\uffd9\061\uffd9\063\uffd9\064\uffd9\065\uffd9\066" +
    "\uffd9\067\uffd9\070\uffd9\073\uffd9\001\002\000\052\007\uffcf" +
    "\035\uffcf\037\uffcf\040\uffcf\043\061\044\073\045\065\046" +
    "\057\047\067\051\063\052\062\060\uffcf\061\uffcf\063\uffcf" +
    "\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\073\uffcf\001" +
    "\002\000\052\007\uffd7\035\uffd7\037\uffd7\040\uffd7\043\061" +
    "\044\073\045\uffd7\046\uffd7\047\uffd7\051\uffd7\052\uffd7\060" +
    "\uffd7\061\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\073\uffd7\001\002\000\052\007\uffd5\035\uffd5\037" +
    "\uffd5\040\uffd5\043\061\044\073\045\uffd5\046\uffd5\047\uffd5" +
    "\051\uffd5\052\uffd5\060\uffd5\061\uffd5\063\uffd5\064\uffd5\065" +
    "\uffd5\066\uffd5\067\uffd5\070\uffd5\073\uffd5\001\002\000\050" +
    "\007\uffd4\035\uffd4\037\uffd4\040\uffd4\043\061\044\073\045" +
    "\065\046\057\047\067\051\063\052\062\061\uffd4\063\072" +
    "\064\066\065\074\066\071\067\064\070\uffd4\073\uffd4\001" +
    "\002\000\052\007\uffd8\035\uffd8\037\uffd8\040\uffd8\043\061" +
    "\044\073\045\uffd8\046\uffd8\047\067\051\063\052\062\060" +
    "\uffd8\061\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8" +
    "\070\uffd8\073\uffd8\001\002\000\052\007\uffcc\035\uffcc\037" +
    "\uffcc\040\uffcc\043\061\044\073\045\uffcc\046\uffcc\047\uffcc" +
    "\051\uffcc\052\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\073\uffcc\001\002\000\024" +
    "\030\042\034\054\046\041\062\053\106\044\107\055\110" +
    "\052\111\045\112\051\001\002\000\004\112\051\001\002" +
    "\000\074\007\uff80\034\uff80\035\uff80\037\uff80\040\uff80\042" +
    "\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\051\uff80" +
    "\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060" +
    "\uff80\061\uff80\063\uff80\064\uff80\065\uff80\066\uff80\067\uff80" +
    "\070\uff80\071\uff80\072\uff80\073\uff80\001\002\000\040\037" +
    "\117\043\061\044\073\045\065\046\057\047\067\051\063" +
    "\052\062\060\060\061\075\063\072\064\066\065\074\066" +
    "\071\067\064\001\002\000\076\007\uff7e\034\uff7e\035\uff7e" +
    "\037\uff7e\040\uff7e\041\120\042\uff7e\043\uff7e\044\uff7e\045" +
    "\uff7e\046\uff7e\047\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e" +
    "\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\063\uff7e\064" +
    "\uff7e\065\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e" +
    "\073\uff7e\001\002\000\004\112\051\001\002\000\074\007" +
    "\uff7f\034\uff7f\035\uff7f\037\uff7f\040\uff7f\042\uff7f\043\uff7f" +
    "\044\uff7f\045\uff7f\046\uff7f\047\uff7f\051\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f" +
    "\063\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f\071" +
    "\uff7f\072\uff7f\073\uff7f\001\002\000\052\007\uffbf\035\uffbf" +
    "\037\uffbf\040\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\051\uffbf\052\uffbf\060\uffbf\061\uffbf\063\uffbf\064\uffbf" +
    "\065\uffbf\066\uffbf\067\uffbf\070\uffbf\073\uffbf\001\002\000" +
    "\026\030\042\034\054\035\126\046\041\062\053\106\044" +
    "\107\055\110\052\111\045\112\051\001\002\000\004\035" +
    "\131\001\002\000\042\035\uffbc\040\127\043\061\044\073" +
    "\045\065\046\057\047\067\051\063\052\062\060\060\061" +
    "\075\063\072\064\066\065\074\066\071\067\064\001\002" +
    "\000\052\007\uffbe\035\uffbe\037\uffbe\040\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\060\uffbe" +
    "\061\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070" +
    "\uffbe\073\uffbe\001\002\000\024\030\042\034\054\046\041" +
    "\062\053\106\044\107\055\110\052\111\045\112\051\001" +
    "\002\000\004\035\uffbb\001\002\000\052\007\uffbd\035\uffbd" +
    "\037\uffbd\040\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\051\uffbd\052\uffbd\060\uffbd\061\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\066\uffbd\067\uffbd\070\uffbd\073\uffbd\001\002\000" +
    "\014\035\uff9f\036\133\040\uff9f\070\uff9f\112\uff9f\001\002" +
    "\000\024\030\042\034\054\046\041\062\053\106\044\107" +
    "\055\110\052\111\045\112\051\001\002\000\040\037\135" +
    "\043\061\044\073\045\065\046\057\047\067\051\063\052" +
    "\062\060\060\061\075\063\072\064\066\065\074\066\071" +
    "\067\064\001\002\000\012\035\uff93\040\uff93\070\uff93\112" +
    "\uff93\001\002\000\052\007\uffcb\035\uffcb\037\uffcb\040\uffcb" +
    "\043\061\044\073\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052" +
    "\uffcb\060\uffcb\061\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\067\uffcb\070\uffcb\073\uffcb\001\002\000\024\030\042\034" +
    "\054\046\041\062\053\106\044\107\055\110\052\111\045" +
    "\112\051\001\002\000\040\037\141\043\061\044\073\045" +
    "\065\046\057\047\067\051\063\052\062\060\060\061\075" +
    "\063\072\064\066\065\074\066\071\067\064\001\002\000" +
    "\014\035\uffa1\036\142\040\uffa1\070\uffa1\112\uffa1\001\002" +
    "\000\024\030\042\034\054\046\041\062\053\106\044\107" +
    "\055\110\052\111\045\112\051\001\002\000\040\037\144" +
    "\043\061\044\073\045\065\046\057\047\067\051\063\052" +
    "\062\060\060\061\075\063\072\064\066\065\074\066\071" +
    "\067\064\001\002\000\012\035\uff95\040\uff95\070\uff95\112" +
    "\uff95\001\002\000\024\030\042\034\054\046\041\062\053" +
    "\106\044\107\055\110\052\111\045\112\051\001\002\000" +
    "\040\037\147\043\061\044\073\045\065\046\057\047\067" +
    "\051\063\052\062\060\060\061\075\063\072\064\066\065" +
    "\074\066\071\067\064\001\002\000\014\035\uff9c\036\150" +
    "\040\uff9c\070\uff9c\112\uff9c\001\002\000\024\030\042\034" +
    "\054\046\041\062\053\106\044\107\055\110\052\111\045" +
    "\112\051\001\002\000\040\037\152\043\061\044\073\045" +
    "\065\046\057\047\067\051\063\052\062\060\060\061\075" +
    "\063\072\064\066\065\074\066\071\067\064\001\002\000" +
    "\012\035\uff90\040\uff90\070\uff90\112\uff90\001\002\000\032" +
    "\004\161\017\154\020\162\033\155\076\163\077\165\100" +
    "\164\101\167\102\160\103\157\104\156\105\166\001\002" +
    "\000\012\035\uff8d\040\uff8d\070\uff8d\112\uff8d\001\002\000" +
    "\012\035\uff82\040\uff82\070\uff82\112\uff82\001\002\000\012" +
    "\035\uff83\040\uff83\070\uff83\112\uff83\001\002\000\012\035" +
    "\uff85\040\uff85\070\uff85\112\uff85\001\002\000\012\035\uff86" +
    "\040\uff86\070\uff86\112\uff86\001\002\000\012\035\uff8b\040" +
    "\uff8b\070\uff8b\112\uff8b\001\002\000\012\035\uff8c\040\uff8c" +
    "\070\uff8c\112\uff8c\001\002\000\012\035\uff8a\040\uff8a\070" +
    "\uff8a\112\uff8a\001\002\000\012\035\uff88\040\uff88\070\uff88" +
    "\112\uff88\001\002\000\012\035\uff89\040\uff89\070\uff89\112" +
    "\uff89\001\002\000\012\035\uff84\040\uff84\070\uff84\112\uff84" +
    "\001\002\000\012\035\uff87\040\uff87\070\uff87\112\uff87\001" +
    "\002\000\024\030\042\034\054\046\041\062\053\106\044" +
    "\107\055\110\052\111\045\112\051\001\002\000\040\037" +
    "\172\043\061\044\073\045\065\046\057\047\067\051\063" +
    "\052\062\060\060\061\075\063\072\064\066\065\074\066" +
    "\071\067\064\001\002\000\014\035\uffa0\036\173\040\uffa0" +
    "\070\uffa0\112\uffa0\001\002\000\024\030\042\034\054\046" +
    "\041\062\053\106\044\107\055\110\052\111\045\112\051" +
    "\001\002\000\040\037\175\043\061\044\073\045\065\046" +
    "\057\047\067\051\063\052\062\060\060\061\075\063\072" +
    "\064\066\065\074\066\071\067\064\001\002\000\012\035" +
    "\uff94\040\uff94\070\uff94\112\uff94\001\002\000\024\030\042" +
    "\034\054\046\041\062\053\106\044\107\055\110\052\111" +
    "\045\112\051\001\002\000\040\037\200\043\061\044\073" +
    "\045\065\046\057\047\067\051\063\052\062\060\060\061" +
    "\075\063\072\064\066\065\074\066\071\067\064\001\002" +
    "\000\014\035\uffa4\036\201\040\uffa4\070\uffa4\112\uffa4\001" +
    "\002\000\024\030\042\034\054\046\041\062\053\106\044" +
    "\107\055\110\052\111\045\112\051\001\002\000\040\037" +
    "\203\043\061\044\073\045\065\046\057\047\067\051\063" +
    "\052\062\060\060\061\075\063\072\064\066\065\074\066" +
    "\071\067\064\001\002\000\012\035\uff98\040\uff98\070\uff98" +
    "\112\uff98\001\002\000\024\030\042\034\054\046\041\062" +
    "\053\106\044\107\055\110\052\111\045\112\051\001\002" +
    "\000\040\037\206\043\061\044\073\045\065\046\057\047" +
    "\067\051\063\052\062\060\060\061\075\063\072\064\066" +
    "\065\074\066\071\067\064\001\002\000\014\035\uffa2\036" +
    "\207\040\uffa2\070\uffa2\112\uffa2\001\002\000\024\030\042" +
    "\034\054\046\041\062\053\106\044\107\055\110\052\111" +
    "\045\112\051\001\002\000\040\037\211\043\061\044\073" +
    "\045\065\046\057\047\067\051\063\052\062\060\060\061" +
    "\075\063\072\064\066\065\074\066\071\067\064\001\002" +
    "\000\012\035\uff96\040\uff96\070\uff96\112\uff96\001\002\000" +
    "\024\030\042\034\054\046\041\062\053\106\044\107\055" +
    "\110\052\111\045\112\051\001\002\000\040\037\214\043" +
    "\061\044\073\045\065\046\057\047\067\051\063\052\062" +
    "\060\060\061\075\063\072\064\066\065\074\066\071\067" +
    "\064\001\002\000\014\035\uffa3\036\215\040\uffa3\070\uffa3" +
    "\112\uffa3\001\002\000\024\030\042\034\054\046\041\062" +
    "\053\106\044\107\055\110\052\111\045\112\051\001\002" +
    "\000\040\037\217\043\061\044\073\045\065\046\057\047" +
    "\067\051\063\052\062\060\060\061\075\063\072\064\066" +
    "\065\074\066\071\067\064\001\002\000\012\035\uff97\040" +
    "\uff97\070\uff97\112\uff97\001\002\000\004\034\222\001\002" +
    "\000\004\070\011\001\002\000\006\035\224\112\226\001" +
    "\002\000\004\035\233\001\002\000\004\070\ufff9\001\002" +
    "\000\006\035\ufff6\040\231\001\002\000\004\016\227\001" +
    "\002\000\036\004\027\017\021\020\032\025\034\033\022" +
    "\074\030\076\031\077\036\100\033\101\037\102\025\103" +
    "\024\104\023\105\035\001\002\000\006\035\ufffa\040\ufffa" +
    "\001\002\000\004\112\226\001\002\000\004\035\ufff7\001" +
    "\002\000\004\070\ufff8\001\002\000\026\003\254\005\247" +
    "\006\243\010\251\012\244\015\257\021\260\023\245\027" +
    "\246\112\051\001\002\000\036\003\ufff3\005\ufff3\006\ufff3" +
    "\010\ufff3\012\ufff3\015\ufff3\021\ufff3\023\ufff3\024\ufff3\027" +
    "\ufff3\031\ufff3\032\ufff3\070\013\112\ufff3\001\002\000\034" +
    "\003\ufff2\005\ufff2\006\ufff2\010\ufff2\012\ufff2\015\ufff2\021" +
    "\ufff2\023\ufff2\024\ufff2\027\ufff2\031\ufff2\032\ufff2\112\ufff2" +
    "\001\002\000\034\003\uffec\005\uffec\006\uffec\010\uffec\012" +
    "\uffec\015\uffec\021\uffec\023\uffec\024\uffec\027\uffec\031\uffec" +
    "\032\uffec\112\uffec\001\002\000\034\003\uffed\005\uffed\006" +
    "\uffed\010\uffed\012\uffed\015\uffed\021\uffed\023\uffed\024\uffed" +
    "\027\uffed\031\uffed\032\uffed\112\uffed\001\002\000\034\003" +
    "\ufff1\005\ufff1\006\ufff1\010\ufff1\012\ufff1\015\ufff1\021\ufff1" +
    "\023\ufff1\024\ufff1\027\ufff1\031\ufff1\032\ufff1\112\ufff1\001" +
    "\002\000\034\003\ufff4\005\ufff4\006\ufff4\010\ufff4\012\ufff4" +
    "\015\ufff4\021\ufff4\023\ufff4\024\ufff4\027\ufff4\031\ufff4\032" +
    "\ufff4\112\ufff4\001\002\000\024\030\042\034\054\046\041" +
    "\062\053\106\044\107\055\110\052\111\045\112\051\001" +
    "\002\000\004\011\362\001\002\000\026\030\042\034\054" +
    "\046\041\062\053\070\011\106\044\107\055\110\052\111" +
    "\045\112\051\001\002\000\016\030\042\106\044\107\055" +
    "\110\052\111\045\112\051\001\002\000\024\030\042\034" +
    "\054\046\041\062\053\106\044\107\055\110\052\111\045" +
    "\112\051\001\002\000\004\070\011\001\002\000\036\004" +
    "\027\017\021\020\032\025\034\033\022\074\030\076\031" +
    "\077\036\100\033\101\037\102\025\103\024\104\023\105" +
    "\035\001\002\000\034\003\uffee\005\uffee\006\uffee\010\uffee" +
    "\012\uffee\015\uffee\021\uffee\023\uffee\024\uffee\027\uffee\031" +
    "\uffee\032\uffee\112\uffee\001\002\000\034\003\uffef\005\uffef" +
    "\006\uffef\010\uffef\012\uffef\015\uffef\021\uffef\023\uffef\024" +
    "\uffef\027\uffef\031\uffef\032\uffef\112\uffef\001\002\000\004" +
    "\070\310\001\002\000\020\034\123\042\303\053\301\054" +
    "\304\055\277\056\300\057\305\001\002\000\034\003\ufff0" +
    "\005\ufff0\006\ufff0\010\ufff0\012\ufff0\015\ufff0\021\ufff0\023" +
    "\ufff0\024\ufff0\027\ufff0\031\ufff0\032\ufff0\112\ufff0\001\002" +
    "\000\004\112\051\001\002\000\004\112\261\001\002\000" +
    "\004\016\262\001\002\000\036\004\027\017\021\020\032" +
    "\025\034\033\022\074\030\076\031\077\036\100\033\101" +
    "\037\102\025\103\024\104\023\105\035\001\002\000\004" +
    "\070\011\001\002\000\036\003\uffe7\005\uffe7\006\uffe7\010" +
    "\uffe7\012\uffe7\015\uffe7\021\uffe7\023\uffe7\024\uffe7\027\uffe7" +
    "\031\uffe7\032\uffe7\070\013\112\uffe7\001\002\000\006\071" +
    "\270\072\266\001\002\000\024\030\uffba\034\uffba\046\uffba" +
    "\062\uffba\106\uffba\107\uffba\110\uffba\111\uffba\112\uffba\001" +
    "\002\000\024\030\042\034\054\046\041\062\053\106\044" +
    "\107\055\110\052\111\045\112\051\001\002\000\024\030" +
    "\uffb9\034\uffb9\046\uffb9\062\uffb9\106\uffb9\107\uffb9\110\uffb9" +
    "\111\uffb9\112\uffb9\001\002\000\040\007\272\043\061\044" +
    "\073\045\065\046\057\047\067\051\063\052\062\060\060" +
    "\061\075\063\072\064\066\065\074\066\071\067\064\001" +
    "\002\000\004\070\011\001\002\000\026\003\254\005\247" +
    "\006\243\010\251\012\274\015\257\021\260\023\245\027" +
    "\246\112\051\001\002\000\004\015\275\001\002\000\004" +
    "\070\011\001\002\000\036\003\uffe3\005\uffe3\006\uffe3\010" +
    "\uffe3\012\uffe3\015\uffe3\021\uffe3\023\uffe3\024\uffe3\027\uffe3" +
    "\031\uffe3\032\uffe3\070\013\112\uffe3\001\002\000\024\030" +
    "\uffc1\034\uffc1\046\uffc1\062\uffc1\106\uffc1\107\uffc1\110\uffc1" +
    "\111\uffc1\112\uffc1\001\002\000\024\030\uffc0\034\uffc0\046" +
    "\uffc0\062\uffc0\106\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0" +
    "\001\002\000\024\030\uffc4\034\uffc4\046\uffc4\062\uffc4\106" +
    "\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\001\002\000\024" +
    "\030\042\034\054\046\041\062\053\106\044\107\055\110" +
    "\052\111\045\112\051\001\002\000\024\030\uffc5\034\uffc5" +
    "\046\uffc5\062\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112" +
    "\uffc5\001\002\000\024\030\uffc3\034\uffc3\046\uffc3\062\uffc3" +
    "\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\001\002\000" +
    "\024\030\uffc2\034\uffc2\046\uffc2\062\uffc2\106\uffc2\107\uffc2" +
    "\110\uffc2\111\uffc2\112\uffc2\001\002\000\040\043\061\044" +
    "\073\045\065\046\057\047\067\051\063\052\062\060\060" +
    "\061\075\063\072\064\066\065\074\066\071\067\064\070" +
    "\011\001\002\000\036\003\uffe6\005\uffe6\006\uffe6\010\uffe6" +
    "\012\uffe6\015\uffe6\021\uffe6\023\uffe6\024\uffe6\027\uffe6\031" +
    "\uffe6\032\uffe6\070\013\112\uffe6\001\002\000\034\003\uffe8" +
    "\005\uffe8\006\uffe8\010\uffe8\012\uffe8\015\uffe8\021\uffe8\023" +
    "\uffe8\024\uffe8\027\uffe8\031\uffe8\032\uffe8\112\uffe8\001\002" +
    "\000\004\112\312\001\002\000\004\022\313\001\002\000" +
    "\004\112\051\001\002\000\004\007\315\001\002\000\004" +
    "\070\011\001\002\000\026\003\254\005\247\006\243\010" +
    "\251\012\317\015\257\021\260\023\245\027\246\112\051" +
    "\001\002\000\004\010\320\001\002\000\004\070\011\001" +
    "\002\000\036\003\uffe4\005\uffe4\006\uffe4\010\uffe4\012\uffe4" +
    "\015\uffe4\021\uffe4\023\uffe4\024\uffe4\027\uffe4\031\uffe4\032" +
    "\uffe4\070\013\112\uffe4\001\002\000\036\003\uffe9\005\uffe9" +
    "\006\uffe9\010\uffe9\012\uffe9\015\uffe9\021\uffe9\023\uffe9\024" +
    "\uffe9\027\uffe9\031\uffe9\032\uffe9\070\013\112\uffe9\001\002" +
    "\000\040\043\061\044\073\045\065\046\057\047\067\051" +
    "\063\052\062\060\060\061\075\063\072\064\066\065\074" +
    "\066\071\067\064\073\324\001\002\000\004\070\011\001" +
    "\002\000\030\003\254\005\247\006\243\010\251\012\330" +
    "\015\257\021\260\023\245\024\327\027\246\112\051\001" +
    "\002\000\034\003\uffe2\005\uffe2\006\uffe2\010\uffe2\012\uffe2" +
    "\015\uffe2\021\uffe2\023\uffe2\024\uffe2\027\uffe2\031\uffe2\032" +
    "\uffe2\112\uffe2\001\002\000\006\005\247\070\011\001\002" +
    "\000\004\005\331\001\002\000\004\070\011\001\002\000" +
    "\036\003\uffe1\005\uffe1\006\uffe1\010\uffe1\012\uffe1\015\uffe1" +
    "\021\uffe1\023\uffe1\024\uffe1\027\uffe1\031\uffe1\032\uffe1\070" +
    "\013\112\uffe1\001\002\000\034\003\uffe0\005\uffe0\006\uffe0" +
    "\010\uffe0\012\uffe0\015\uffe0\021\uffe0\023\uffe0\024\uffe0\027" +
    "\uffe0\031\uffe0\032\uffe0\112\uffe0\001\002\000\026\003\254" +
    "\005\247\006\243\010\251\012\335\015\257\021\260\023" +
    "\245\027\246\112\051\001\002\000\004\005\336\001\002" +
    "\000\004\070\011\001\002\000\036\003\uffdf\005\uffdf\006" +
    "\uffdf\010\uffdf\012\uffdf\015\uffdf\021\uffdf\023\uffdf\024\uffdf" +
    "\027\uffdf\031\uffdf\032\uffdf\070\013\112\uffdf\001\002\000" +
    "\004\070\011\001\002\000\004\070\uffb7\001\002\000\004" +
    "\070\uffb8\001\002\000\006\031\347\032\345\001\002\000" +
    "\010\031\uffdc\032\uffdc\070\013\001\002\000\004\070\011" +
    "\001\002\000\004\012\353\001\002\000\024\030\042\034" +
    "\054\046\041\062\053\106\044\107\055\110\052\111\045" +
    "\112\051\001\002\000\006\031\uffdd\032\uffdd\001\002\000" +
    "\040\043\061\044\073\045\065\046\057\047\067\051\063" +
    "\052\062\060\060\061\075\063\072\064\066\065\074\066" +
    "\071\067\064\070\011\001\002\000\030\003\254\005\247" +
    "\006\243\010\251\015\257\021\260\023\245\027\246\031" +
    "\uffdb\032\uffdb\112\051\001\002\000\004\027\354\001\002" +
    "\000\004\070\011\001\002\000\036\003\uffde\005\uffde\006" +
    "\uffde\010\uffde\012\uffde\015\uffde\021\uffde\023\uffde\024\uffde" +
    "\027\uffde\031\uffde\032\uffde\070\013\112\uffde\001\002\000" +
    "\026\003\254\005\247\006\243\010\251\012\uffda\015\257" +
    "\021\260\023\245\027\246\112\051\001\002\000\036\003" +
    "\uffea\005\uffea\006\uffea\010\uffea\012\uffea\015\uffea\021\uffea" +
    "\023\uffea\024\uffea\027\uffea\031\uffea\032\uffea\070\013\112" +
    "\uffea\001\002\000\040\043\061\044\073\045\065\046\057" +
    "\047\067\051\063\052\062\060\060\061\075\063\072\064" +
    "\066\065\074\066\071\067\064\070\011\001\002\000\036" +
    "\003\uffeb\005\uffeb\006\uffeb\010\uffeb\012\uffeb\015\uffeb\021" +
    "\uffeb\023\uffeb\024\uffeb\027\uffeb\031\uffeb\032\uffeb\070\013" +
    "\112\uffeb\001\002\000\004\070\ufffb\001\002\000\040\007" +
    "\364\043\061\044\073\045\065\046\057\047\067\051\063" +
    "\052\062\060\060\061\075\063\072\064\066\065\074\066" +
    "\071\067\064\001\002\000\004\070\011\001\002\000\026" +
    "\003\254\005\247\006\243\010\251\012\366\015\257\021" +
    "\260\023\245\027\246\112\051\001\002\000\004\006\367" +
    "\001\002\000\004\070\011\001\002\000\036\003\uffe5\005" +
    "\uffe5\006\uffe5\010\uffe5\012\uffe5\015\uffe5\021\uffe5\023\uffe5" +
    "\024\uffe5\027\uffe5\031\uffe5\032\uffe5\070\013\112\uffe5\001" +
    "\002\000\024\030\042\034\054\046\041\062\053\106\044" +
    "\107\055\110\052\111\045\112\051\001\002\000\040\037" +
    "\373\043\061\044\073\045\065\046\057\047\067\051\063" +
    "\052\062\060\060\061\075\063\072\064\066\065\074\066" +
    "\071\067\064\001\002\000\014\035\uff9e\036\374\040\uff9e" +
    "\070\uff9e\112\uff9e\001\002\000\024\030\042\034\054\046" +
    "\041\062\053\106\044\107\055\110\052\111\045\112\051" +
    "\001\002\000\040\037\376\043\061\044\073\045\065\046" +
    "\057\047\067\051\063\052\062\060\060\061\075\063\072" +
    "\064\066\065\074\066\071\067\064\001\002\000\012\035" +
    "\uff92\040\uff92\070\uff92\112\uff92\001\002\000\024\030\042" +
    "\034\054\046\041\062\053\106\044\107\055\110\052\111" +
    "\045\112\051\001\002\000\040\037\u0101\043\061\044\073" +
    "\045\065\046\057\047\067\051\063\052\062\060\060\061" +
    "\075\063\072\064\066\065\074\066\071\067\064\001\002" +
    "\000\014\035\uff9d\036\u0102\040\uff9d\070\uff9d\112\uff9d\001" +
    "\002\000\024\030\042\034\054\046\041\062\053\106\044" +
    "\107\055\110\052\111\045\112\051\001\002\000\040\037" +
    "\u0104\043\061\044\073\045\065\046\057\047\067\051\063" +
    "\052\062\060\060\061\075\063\072\064\066\065\074\066" +
    "\071\067\064\001\002\000\012\035\uff91\040\uff91\070\uff91" +
    "\112\uff91\001\002\000\024\030\042\034\054\046\041\062" +
    "\053\106\044\107\055\110\052\111\045\112\051\001\002" +
    "\000\040\037\u0107\043\061\044\073\045\065\046\057\047" +
    "\067\051\063\052\062\060\060\061\075\063\072\064\066" +
    "\065\074\066\071\067\064\001\002\000\014\035\uff9b\036" +
    "\u0108\040\uff9b\070\uff9b\112\uff9b\001\002\000\024\030\042" +
    "\034\054\046\041\062\053\106\044\107\055\110\052\111" +
    "\045\112\051\001\002\000\040\037\u010a\043\061\044\073" +
    "\045\065\046\057\047\067\051\063\052\062\060\060\061" +
    "\075\063\072\064\066\065\074\066\071\067\064\001\002" +
    "\000\012\035\uff8f\040\uff8f\070\uff8f\112\uff8f\001\002\000" +
    "\024\030\042\034\054\046\041\062\053\106\044\107\055" +
    "\110\052\111\045\112\051\001\002\000\040\037\u010d\043" +
    "\061\044\073\045\065\046\057\047\067\051\063\052\062" +
    "\060\060\061\075\063\072\064\066\065\074\066\071\067" +
    "\064\001\002\000\014\035\uff9a\036\u010e\040\uff9a\070\uff9a" +
    "\112\uff9a\001\002\000\024\030\042\034\054\046\041\062" +
    "\053\106\044\107\055\110\052\111\045\112\051\001\002" +
    "\000\040\037\u0110\043\061\044\073\045\065\046\057\047" +
    "\067\051\063\052\062\060\060\061\075\063\072\064\066" +
    "\065\074\066\071\067\064\001\002\000\012\035\uff8e\040" +
    "\uff8e\070\uff8e\112\uff8e\001\002\000\024\030\042\034\054" +
    "\046\041\062\053\106\044\107\055\110\052\111\045\112" +
    "\051\001\002\000\040\037\u0113\043\061\044\073\045\065" +
    "\046\057\047\067\051\063\052\062\060\060\061\075\063" +
    "\072\064\066\065\074\066\071\067\064\001\002\000\014" +
    "\035\uffa5\036\u0114\040\uffa5\070\uffa5\112\uffa5\001\002\000" +
    "\024\030\042\034\054\046\041\062\053\106\044\107\055" +
    "\110\052\111\045\112\051\001\002\000\040\037\u0116\043" +
    "\061\044\073\045\065\046\057\047\067\051\063\052\062" +
    "\060\060\061\075\063\072\064\066\065\074\066\071\067" +
    "\064\001\002\000\012\035\uff99\040\uff99\070\uff99\112\uff99" +
    "\001\002\000\004\070\011\001\002\000\026\003\254\005" +
    "\247\006\243\010\251\012\u0119\015\257\021\260\023\245" +
    "\027\246\112\051\001\002\000\004\014\u011a\001\002\000" +
    "\004\070\ufff5\001\002\000\006\002\000\011\016\001\002" +
    "\000\004\070\011\001\002\000\026\003\254\005\247\006" +
    "\243\010\251\012\u011e\015\257\021\260\023\245\027\246" +
    "\112\051\001\002\000\004\026\u011f\001\002\000\004\070" +
    "\u0120\001\002\000\004\070\uffff\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\006\002\004\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\007" +
    "\041\011\001\001\000\006\005\016\011\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\u011a\041\011\001\001\000\002\001\001\000\004\037" +
    "\025\001\001\000\004\041\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\045\031" +
    "\042\036\046\040\047\001\001\000\012\027\135\031\042" +
    "\036\046\040\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\111\031\042\036\046" +
    "\040\047\001\001\000\012\027\055\031\042\036\046\040" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\110\031\042\036\046\040\047\001\001\000\012\027" +
    "\107\031\042\036\046\040\047\001\001\000\002\001\001" +
    "\000\012\027\106\031\042\036\046\040\047\001\001\000" +
    "\012\027\105\031\042\036\046\040\047\001\001\000\012" +
    "\027\104\031\042\036\046\040\047\001\001\000\012\027" +
    "\103\031\042\036\046\040\047\001\001\000\012\027\102" +
    "\031\042\036\046\040\047\001\001\000\012\027\101\031" +
    "\042\036\046\040\047\001\001\000\002\001\001\000\012" +
    "\027\100\031\042\036\046\040\047\001\001\000\012\027" +
    "\077\031\042\036\046\040\047\001\001\000\002\001\001" +
    "\000\012\027\076\031\042\036\046\040\047\001\001\000" +
    "\012\027\075\031\042\036\046\040\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\115\031\042\036\046\040\047\001\001\000\004\040" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\027\124\031\042\033\123\036\046" +
    "\040\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\027\124\031\042\033\127\036\046" +
    "\040\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\027\133\031\042\036\046\040\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\027\137\031\042\036\046\040\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\142\031" +
    "\042\036\046\040\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\145\031\042\036\046\040\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\150" +
    "\031\042\036\046\040\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\027\170\031\042\036\046\040\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\173\031\042\036\046\040\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\027\176\031\042\036\046\040" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\201\031\042\036\046\040\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\204\031\042\036\046" +
    "\040\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\207\031\042\036\046\040\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\027\212\031\042\036" +
    "\046\040\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\027\215\031\042\036\046\040\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\220\001\001" +
    "\000\006\012\233\041\234\001\001\000\006\006\224\010" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\227\001\001\000" +
    "\002\001\001\000\006\006\224\010\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\013\241\014\252\015" +
    "\251\016\237\017\235\020\240\021\255\023\236\031\247" +
    "\040\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\362\031\042\036\046\040\047\001" +
    "\001\000\002\001\001\000\014\027\357\031\042\036\046" +
    "\040\047\041\356\001\001\000\010\035\337\036\340\040" +
    "\341\001\001\000\012\027\322\031\042\036\046\040\047" +
    "\001\001\000\004\041\321\001\001\000\004\037\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\301\032\121\001\001\000\002\001\001\000" +
    "\004\040\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\262\001\001\000\004\041\263\001\001\000" +
    "\002\001\001\000\004\034\266\001\001\000\002\001\001" +
    "\000\012\027\270\031\042\036\046\040\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\272\041\234" +
    "\001\001\000\026\013\241\014\252\015\251\016\237\017" +
    "\235\020\240\021\255\023\236\031\247\040\254\001\001" +
    "\000\002\001\001\000\004\041\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\027\305\031\042\036\046\040\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\313\001\001" +
    "\000\002\001\001\000\006\012\315\041\234\001\001\000" +
    "\026\013\241\014\252\015\251\016\237\017\235\020\240" +
    "\021\255\023\236\031\247\040\254\001\001\000\002\001" +
    "\001\000\004\041\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\324\041\234\001" +
    "\001\000\030\013\241\014\252\015\251\016\237\017\235" +
    "\020\240\021\255\022\325\023\236\031\247\040\254\001" +
    "\001\000\002\001\001\000\010\012\333\021\332\041\234" +
    "\001\001\000\002\001\001\000\004\041\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\013\241\014\252" +
    "\015\251\016\237\017\235\020\240\021\255\023\236\031" +
    "\247\040\254\001\001\000\002\001\001\000\004\041\336" +
    "\001\001\000\002\001\001\000\006\024\342\041\343\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\347" +
    "\026\345\001\001\000\002\001\001\000\006\012\355\041" +
    "\234\001\001\000\002\001\001\000\012\027\350\031\042" +
    "\036\046\040\047\001\001\000\002\001\001\000\006\012" +
    "\351\041\234\001\001\000\026\013\241\014\252\015\251" +
    "\016\237\017\235\020\240\021\255\023\236\031\247\040" +
    "\254\001\001\000\002\001\001\000\004\041\354\001\001" +
    "\000\002\001\001\000\026\013\241\014\252\015\251\016" +
    "\237\017\235\020\240\021\255\023\236\031\247\040\254" +
    "\001\001\000\002\001\001\000\004\041\360\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\364\041\234\001\001\000\026\013\241\014\252\015" +
    "\251\016\237\017\235\020\240\021\255\023\236\031\247" +
    "\040\254\001\001\000\002\001\001\000\004\041\367\001" +
    "\001\000\002\001\001\000\012\027\371\031\042\036\046" +
    "\040\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\374\031\042\036\046\040\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\027\377\031\042\036" +
    "\046\040\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\027\u0102\031\042\036\046\040\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\027\u0105\031\042" +
    "\036\046\040\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\027\u0108\031\042\036\046\040\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\u010b\031" +
    "\042\036\046\040\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\u010e\031\042\036\046\040\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\u0111" +
    "\031\042\036\046\040\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\027\u0114\031\042\036\046\040\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\u0117\041\234\001\001\000\026\013\241\014\252\015\251" +
    "\016\237\017\235\020\240\021\255\023\236\031\247\040" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\016\001\001\000\006\012\u011c\041\234\001\001\000" +
    "\026\013\241\014\252\015\251\016\237\017\235\020\240" +
    "\021\255\023\236\031\247\040\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 /*token_num++; */return s.next_token(); 
    }


    //private int token_num = 0;
    private Scanner s;
    public Parser(Scanner s) {
        super(s);
        this.s = s;
    }
/*
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at line " + (cur_token.left + 1) + " column " + (cur_token.right + 1) + " of input.", null);
        //  : " + Sym.terminalNames[cur_token.sym] + (cur_token.value == null ? "" : " value: " + cur_token.value), null
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        this.report_fatal_error("Couldn\'t repair and continue parse", cur_token);
    }
    */

    public void report_error(String message, Object info) {
    System.err.print(message);
    System.err.flush();
    if(info instanceof Symbol) {
        if(((Symbol)info).left != -1) {
            System.err.println(" at line " + (((Symbol)info).left + 1) + " column " + (((Symbol)info).right + 1) + " of input");
        } else {
            System.err.println("");
        }
    } else {
        System.err.println("");
    }

}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Start start_val = (Start)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= DclBlock FunctionDcls Program FunctionDcls 
            {
              Start RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DclBlock db = (DclBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fds1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fds1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FunctionDclList fds1 = (FunctionDclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fds2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fds2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDclList fds2 = (FunctionDclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Start(db, fds1, p, fds2, dbleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DclBlock ::= BEGIN DECLARATIONS Stmts END DECLARATIONS EOL 
            {
              DclBlock RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new DclBlock(ss, ssleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DclBlock",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DclBlock ::= EOL 
            {
              DclBlock RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DclBlock",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FunctionDcls ::= MultEOL 
            {
              FunctionDclList RESULT =null;
		 RESULT = new FunctionDclList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDcls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunctionDcls ::= FunctionDcls FunctionDcl MultEOL 
            {
              FunctionDclList RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FunctionDclList fds = (FunctionDclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionDcl fd = (FunctionDcl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fds; fds.addElement(fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDcls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunctionDcl ::= FUNCTION TypeId IDENTIFIER Params Stmts END FUNCTION 
            {
              FunctionDcl RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParamList p = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunctionDcl(ti, id, p, ss, tileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDcl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Param ::= IDENTIFIER AS TypeId 
            {
              Param RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Param(id, ti, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Param",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Params ::= LPAREN RPAREN 
            {
              ParamList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ParamList(lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Params",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Params ::= LPAREN ParamList RPAREN 
            {
              ParamList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Params",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ParamList ::= Param COMMA ParamList 
            {
              ParamList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pl; pl.addElement(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ParamList ::= Param 
            {
              ParamList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamList(pleft); RESULT.addElement(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Program ::= BEGIN PROGRAM Stmts END PROGRAM 
            {
              Program RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Program(ss, ssleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stmts ::= Stmts Stmt 
            {
              StmtList RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.addElement(s); RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stmts ::= MultEOL 
            {
              StmtList RESULT =null;
		 RESULT = new StmtList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stmt ::= Dcl 
            {
              Stmt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dcl d = (Dcl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stmt ::= Assignment 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stmt ::= IfStmt 
            {
              Stmt RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStmt is = (IfStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stmt ::= WhileStmt 
            {
              Stmt RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStmt ws = (WhileStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stmt ::= ForeachStmt 
            {
              Stmt RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForeachStmt fs = (ForeachStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt ::= ForStmt 
            {
              Stmt RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForStmt fs = (ForStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt ::= SwitchStmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SwitchStmt s = (SwitchStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= RETURN Expression MultEOL 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnExpr(e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt ::= RETURN MultEOL 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(rleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stmt ::= FunctionCall MultEOL 
            {
              Stmt RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCallStmt(fc, fcleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stmt ::= error EOL 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Dcl ::= DECLARE IDENTIFIER AS TypeId MultEOL 
            {
              Dcl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Dcl(id,/* ds, */ti, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dcl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Assignment ::= NestedId AssignOp Expression MultEOL 
            {
              Assignment RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AssignOp ao = (AssignOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assignment(ni, ao, e, nileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WhileStmt ::= WHILE Expression DO Stmts END WHILE MultEOL 
            {
              WhileStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new WhileStmt(e, ss, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ForeachStmt ::= FOREACH TypeId IDENTIFIER IN NestedId DO Stmts END FOREACH MultEOL 
            {
              ForeachStmt RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ForeachStmt(ti, id, ni, s, tileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForeachStmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ForStmt ::= FOR NestedId ForIterator Expression DO Stmts END FOR MultEOL 
            {
              ForStmt RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ForIterator fi = (ForIterator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ForStmt(ni, fi, e, ss, nileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IfStmt ::= IF Expression THEN Stmts ElseStmt 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElseStmt els = (ElseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(e, ss, els, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ElseStmt ::= END IF MultEOL 
            {
              ElseStmt RESULT =null;
		int eifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object eif = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new EndIfStmt(eifleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ElseStmt ::= ELSE IfStmt 
            {
              ElseStmt RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStmt ifs = (IfStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElseIfStmt(ifs, ifsleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ElseStmt ::= ELSE Stmts END IF MultEOL 
            {
              ElseStmt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ElseEndStmt(ss, ssleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SwitchStmt ::= SWITCH Variable SwitchCases SwitchDef END SWITCH MultEOL 
            {
              SwitchStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int swcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int swcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SwitchCaseList swcs = (SwitchCaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int swdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int swdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SwitchDef swd = (SwitchDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new SwitchStmt(v, swcs, swd, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SwitchCases ::= SwitchCases SwitchCase 
            {
              SwitchCaseList RESULT =null;
		int swcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int swcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SwitchCaseList swcs = (SwitchCaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SwitchCase swc = (SwitchCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 swcs.addElement(swc); RESULT = swcs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCases",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SwitchCases ::= MultEOL 
            {
              SwitchCaseList RESULT =null;
		 RESULT = new SwitchCaseList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCases",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SwitchCase ::= CASE Expression Stmts 
            {
              SwitchCase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SwitchCase(v, ss, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCase",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SwitchDef ::= DEFAULT Stmts 
            {
              SwitchDef RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SwitchDef(ss, dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchDef",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression PLUS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Expression MINUS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Expression MULT Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Expression DIV Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= Expression MOD Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= Expression AND Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= Expression OR Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= Expression EQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicEqualsExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= Expression LESSTHAN Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThanExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= Expression GREATERTHAN Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThanExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression ::= Expression LESSTHANEQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThanEqualsExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= Expression GREATERTHANEQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualsExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expression ::= LPAREN Expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expression ::= NOT Expression 
            {
              Expression RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpr(e, notleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expression ::= MINUS Expression 
            {
              Expression RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnMinusExpr(e, minleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expression ::= Expression PLUSPLUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PlusPlusExpr(e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expression ::= Expression MINUSMINUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MinusMinusExpr(e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expression ::= FunctionCall 
            {
              Expression RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionCallExpr(fc, fcleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expression ::= NestedId 
            {
              Expression RESULT =null;
		int nidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NestedIdentifier nid = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NestedIdExpr(nid, nidleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expression ::= StdLiteral 
            {
              Expression RESULT =null;
		int stdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StdLiteral std = (StdLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StdLiteralExpr(std, stdleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AssignOp ::= EQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AssignOp ::= PLUSEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AssignOp ::= MINUSEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AssignOp ::= MODEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AssignOp ::= MULTEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AssignOp ::= DIVEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FunctionCall ::= NestedId Arguments 
            {
              FunctionCall RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArgumentList arg = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionCall(ni, arg, nileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Arguments ::= LPAREN RPAREN 
            {
              ArgumentList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArgumentList(lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Arguments ::= LPAREN ArgumentList RPAREN 
            {
              ArgumentList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = al; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ArgumentList ::= Expression 
            {
              ArgumentList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentList(eleft); RESULT.addElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ArgumentList ::= Expression COMMA ArgumentList 
            {
              ArgumentList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = al; al.addElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ForIterator ::= TO 
            {
              ForIterator RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ToIterator(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForIterator",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ForIterator ::= DOWNTO 
            {
              ForIterator RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DownToIterator(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForIterator",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Variable ::= NestedId 
            {
              Variable RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableNestedId(ni, nileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Variable ::= StdLiteral 
            {
              Variable RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StdLiteral st = (StdLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableStdLiteral(st, stleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // StdLiteral ::= DECIMAL_LITERAL 
            {
              StdLiteral RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double dec = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecimalLiteral(dec, decleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // StdLiteral ::= STRING_LITERAL 
            {
              StdLiteral RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(str, strleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // StdLiteral ::= BOOLEAN_LITERAL 
            {
              StdLiteral RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanLiteral(bool, boolleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StdLiteral ::= INTEGER_LITERAL 
            {
              StdLiteral RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer in = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(in, inleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StdLiteral ::= NULL_LITERAL 
            {
              StdLiteral RESULT =null;
		int nulleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nulright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nul = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NullLiteral(nulleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TypeId ::= DECIMAL 
            {
              TypeIdentifier RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decimal(dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TypeId ::= STRING 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringT(sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TypeId ::= BOOLEAN 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanT(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TypeId ::= TERRAIN 
            {
              TypeIdentifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terrain(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TypeId ::= GROUP 
            {
              TypeIdentifier RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Group(gleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TypeId ::= PLATOON 
            {
              TypeIdentifier RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Platoon(pleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TypeId ::= FORCE 
            {
              TypeIdentifier RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Force(fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TypeId ::= COORD 
            {
              TypeIdentifier RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Coord(cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TypeId ::= SOLDIER 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Soldier(sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TypeId ::= BARRIER 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Barrier(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TypeId ::= VECTOR 
            {
              TypeIdentifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VectorT(vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TypeId ::= INTEGER 
            {
              TypeIdentifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerT(ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TypeId ::= DECIMAL LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Decimal1DArray(e, dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TypeId ::= STRING LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new String1DArray(e, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TypeId ::= BOOLEAN LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Boolean1DArray(e, bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TypeId ::= TERRAIN LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Terrain1DArray(e, tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TypeId ::= GROUP LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Group1DArray(e, gleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TypeId ::= PLATOON LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Platoon1DArray(e, pleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TypeId ::= FORCE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Force1DArray(e, fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TypeId ::= COORD LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Coord1DArray(e, cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TypeId ::= SOLDIER LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Soldier1DArray(e, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TypeId ::= BARRIER LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Barrier1DArray(e, bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TypeId ::= VECTOR LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vector1DArray(e, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TypeId ::= INTEGER LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Integer1DArray(e, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TypeId ::= DECIMAL LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Decimal2DArray(e1, e2, dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TypeId ::= STRING LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new String2DArray(e1, e2, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TypeId ::= BOOLEAN LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Boolean2DArray(e1, e2, bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TypeId ::= TERRAIN LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Terrain2DArray(e1, e2, tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TypeId ::= GROUP LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Group2DArray(e1, e2, gleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TypeId ::= PLATOON LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Platoon2DArray(e1, e2, pleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TypeId ::= FORCE LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Force2DArray(e1, e2, fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TypeId ::= COORD LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Coord2DArray(e1, e2, cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TypeId ::= SOLDIER LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Soldier2DArray(e1, e2, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TypeId ::= BARRIER LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Barrier2DArray(e1, e2, bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TypeId ::= VECTOR LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vector2DArray(e1, e2, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TypeId ::= INTEGER LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Integer2DArray(e1, e2, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TypeId ::= LIST OF DECIMAL 
            {
              TypeIdentifier RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecimalList(dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TypeId ::= LIST OF STRING 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringList(sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TypeId ::= LIST OF BOOLEAN 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanList(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TypeId ::= LIST OF TERRAIN 
            {
              TypeIdentifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TerrainList(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TypeId ::= LIST OF GROUP 
            {
              TypeIdentifier RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GroupList(gleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TypeId ::= LIST OF PLATOON 
            {
              TypeIdentifier RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlatoonList(pleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TypeId ::= LIST OF FORCE 
            {
              TypeIdentifier RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForceList(fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TypeId ::= LIST OF COORD 
            {
              TypeIdentifier RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CoordList(cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TypeId ::= LIST OF SOLDIER 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SoldierList(sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TypeId ::= LIST OF BARRIER 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BarrierList(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TypeId ::= LIST OF VECTOR 
            {
              TypeIdentifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VectorList(vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TypeId ::= LIST OF INTEGER 
            {
              TypeIdentifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerList(vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TypeId ::= VOID 
            {
              TypeIdentifier RESULT =null;
		int voleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int voright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VoidT(voleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NestedId ::= IDENTIFIER DOT NestedId 
            {
              NestedIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NestedIdentifierMember(id, ni, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NestedId",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NestedId ::= IDENTIFIER LBRACE Expression RBRACE DOT NestedId 
            {
              NestedIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NestedIdentifierArrayMember(id, e, ni, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NestedId",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NestedId ::= IDENTIFIER LBRACE Expression RBRACE 
            {
              NestedIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NestedIdentifierArray(id, e, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NestedId",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NestedId ::= IDENTIFIER 
            {
              NestedIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Identifier(id, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NestedId",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MultEOL ::= MultEOL EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultEOL",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MultEOL ::= EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultEOL",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
