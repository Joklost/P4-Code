
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package com.company;

import java_cup.runtime.*;
import com.company.AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\006\000\002\003" +
    "\010\000\002\004\003\000\002\004\005\000\002\005\011" +
    "\000\002\006\005\000\002\007\004\000\002\007\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\007\000\002" +
    "\012\004\000\002\012\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\005\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\017\007\000\002" +
    "\020\006\000\002\014\011\000\002\015\014\000\002\016" +
    "\013\000\002\022\011\000\002\023\004\000\002\023\003" +
    "\000\002\024\005\000\002\025\004\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\007\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\030\004\000\002\031\004\000\002\031\005\000\002" +
    "\032\003\000\002\032\005\000\002\033\003\000\002\033" +
    "\003\000\002\034\003\000\002\034\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\005\000\002\036\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\006\000\002" +
    "\037\006\000\002\037\006\000\002\037\006\000\002\037" +
    "\006\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\037\006\000\002\037\006\000\002\037\006\000" +
    "\002\037\006\000\002\037\011\000\002\037\011\000\002" +
    "\037\011\000\002\037\011\000\002\037\011\000\002\037" +
    "\011\000\002\037\011\000\002\037\011\000\002\037\011" +
    "\000\002\037\011\000\002\037\011\000\002\037\011\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\003\000" +
    "\002\040\005\000\002\040\010\000\002\040\006\000\002" +
    "\040\013\000\002\040\011\000\002\040\003\000\002\042" +
    "\004\000\002\042\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\004\013\005\001\002\000\004\002\u011d\001" +
    "\002\000\004\026\u0118\001\002\000\004\070\010\001\002" +
    "\000\006\011\015\013\014\001\002\000\040\002\uff7c\003" +
    "\uff7c\006\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\015\uff7c" +
    "\021\uff7c\023\uff7c\027\uff7c\031\uff7c\032\uff7c\070\uff7c\115" +
    "\uff7c\001\002\000\012\002\ufffe\011\ufffe\013\ufffe\070\012" +
    "\001\002\000\040\002\uff7d\003\uff7d\006\uff7d\010\uff7d\011" +
    "\uff7d\012\uff7d\013\uff7d\015\uff7d\021\uff7d\023\uff7d\027\uff7d" +
    "\031\uff7d\032\uff7d\070\uff7d\115\uff7d\001\002\000\004\070" +
    "\010\001\002\000\004\014\u0113\001\002\000\036\004\026" +
    "\017\020\020\031\025\033\033\021\074\027\076\030\077" +
    "\034\100\032\101\036\102\024\103\023\107\022\110\035" +
    "\001\002\000\004\070\010\001\002\000\012\002\ufffd\011" +
    "\ufffd\013\ufffd\070\012\001\002\000\014\035\uffb4\036\u010d" +
    "\040\uffb4\070\uffb4\115\uffb4\001\002\000\014\035\uffa9\036" +
    "\u0107\040\uffa9\070\uffa9\115\uffa9\001\002\000\014\035\uffaa" +
    "\036\u0101\040\uffaa\070\uffaa\115\uffaa\001\002\000\014\035" +
    "\uffac\036\373\040\uffac\070\uffac\115\uffac\001\002\000\014" +
    "\035\uffad\036\365\040\uffad\070\uffad\115\uffad\001\002\000" +
    "\004\115\051\001\002\000\014\035\uffb2\036\222\040\uffb2" +
    "\070\uffb2\115\uffb2\001\002\000\012\035\uff84\040\uff84\070" +
    "\uff84\115\uff84\001\002\000\014\035\uffb1\036\214\040\uffb1" +
    "\070\uffb1\115\uffb1\001\002\000\014\035\uffb3\036\206\040" +
    "\uffb3\070\uffb3\115\uffb3\001\002\000\014\035\uffaf\036\200" +
    "\040\uffaf\070\uffaf\115\uffaf\001\002\000\004\075\163\001" +
    "\002\000\014\035\uffb0\036\155\040\uffb0\070\uffb0\115\uffb0" +
    "\001\002\000\014\035\uffab\036\147\040\uffab\070\uffab\115" +
    "\uffab\001\002\000\014\035\uffae\036\037\040\uffae\070\uffae" +
    "\115\uffae\001\002\000\024\030\041\034\054\046\040\062" +
    "\053\111\043\112\055\113\052\114\044\115\051\001\002" +
    "\000\024\030\041\034\054\046\040\062\053\111\043\112" +
    "\055\113\052\114\044\115\051\001\002\000\054\007\uffb7" +
    "\035\uffb7\037\uffb7\040\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\051\uffb7\052\uffb7\060\uffb7\061\uffb7\063\uffb7" +
    "\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\001\002\000\054\007\uffce\035\uffce\037\uffce\040\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\051\uffce\052" +
    "\uffce\060\uffce\061\uffce\063\uffce\064\uffce\065\uffce\066\uffce" +
    "\067\uffce\070\uffce\071\uffce\072\uffce\001\002\000\054\007" +
    "\uffb9\035\uffb9\037\uffb9\040\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\051\uffb9\052\uffb9\060\uffb9\061\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9" +
    "\072\uffb9\001\002\000\054\007\uffba\035\uffba\037\uffba\040" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\051\uffba" +
    "\052\uffba\060\uffba\061\uffba\063\uffba\064\uffba\065\uffba\066" +
    "\uffba\067\uffba\070\uffba\071\uffba\072\uffba\001\002\000\076" +
    "\007\uff7e\034\uff7e\035\uff7e\036\132\037\uff7e\040\uff7e\041" +
    "\133\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e" +
    "\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057" +
    "\uff7e\060\uff7e\061\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e" +
    "\067\uff7e\070\uff7e\071\uff7e\072\uff7e\001\002\000\040\037" +
    "\126\043\061\044\074\045\065\046\057\047\067\051\064" +
    "\052\062\060\060\061\076\063\073\064\066\065\075\066" +
    "\072\067\063\001\002\000\054\007\uffcc\035\uffcc\037\uffcc" +
    "\040\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\051" +
    "\uffcc\052\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\001\002\000" +
    "\056\007\uffcd\034\117\035\uffcd\037\uffcd\040\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd\060" +
    "\uffcd\061\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\070\uffcd\071\uffcd\072\uffcd\001\002\000\102\007\uff7b\016" +
    "\uff7b\022\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b" +
    "\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047" +
    "\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b" +
    "\057\uff7b\060\uff7b\061\uff7b\063\uff7b\064\uff7b\065\uff7b\066" +
    "\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\001\002\000\054" +
    "\007\uffbb\035\uffbb\037\uffbb\040\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\060\uffbb\061\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071" +
    "\uffbb\072\uffbb\001\002\000\024\030\041\034\054\046\040" +
    "\062\053\111\043\112\055\113\052\114\044\115\051\001" +
    "\002\000\024\030\041\034\054\046\040\062\053\111\043" +
    "\112\055\113\052\114\044\115\051\001\002\000\054\007" +
    "\uffb8\035\uffb8\037\uffb8\040\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\051\uffb8\052\uffb8\060\uffb8\061\uffb8\063" +
    "\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8" +
    "\072\uffb8\001\002\000\042\035\071\040\070\043\061\044" +
    "\074\045\065\046\057\047\067\051\064\052\062\060\060" +
    "\061\076\063\073\064\066\065\075\066\072\067\063\001" +
    "\002\000\024\030\041\034\054\046\040\062\053\111\043" +
    "\112\055\113\052\114\044\115\051\001\002\000\024\030" +
    "\041\034\054\046\040\062\053\111\043\112\055\113\052" +
    "\114\044\115\051\001\002\000\054\007\uffd0\035\uffd0\037" +
    "\uffd0\040\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\051\uffd0\052\uffd0\060\uffd0\061\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\001\002" +
    "\000\024\030\041\034\054\046\040\062\053\111\043\112" +
    "\055\113\052\114\044\115\051\001\002\000\024\030\041" +
    "\034\054\046\040\062\053\111\043\112\055\113\052\114" +
    "\044\115\051\001\002\000\024\030\041\034\054\046\040" +
    "\062\053\111\043\112\055\113\052\114\044\115\051\001" +
    "\002\000\024\030\041\034\054\046\040\062\053\111\043" +
    "\112\055\113\052\114\044\115\051\001\002\000\024\030" +
    "\041\034\054\046\040\062\053\111\043\112\055\113\052" +
    "\114\044\115\051\001\002\000\024\030\041\034\054\046" +
    "\040\062\053\111\043\112\055\113\052\114\044\115\051" +
    "\001\002\000\024\030\041\034\054\046\040\062\053\111" +
    "\043\112\055\113\052\114\044\115\051\001\002\000\054" +
    "\007\uffd3\035\uffd3\037\uffd3\040\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3\060\uffd3\061\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071" +
    "\uffd3\072\uffd3\001\002\000\024\030\041\034\054\046\040" +
    "\062\053\111\043\112\055\113\052\114\044\115\051\001" +
    "\002\000\024\030\041\034\054\046\040\062\053\111\043" +
    "\112\055\113\052\114\044\115\051\001\002\000\054\007" +
    "\uffcf\035\uffcf\037\uffcf\040\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\051\uffcf\052\uffcf\060\uffcf\061\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf" +
    "\072\uffcf\001\002\000\024\030\041\034\054\046\040\062" +
    "\053\111\043\112\055\113\052\114\044\115\051\001\002" +
    "\000\024\030\041\034\054\046\040\062\053\111\043\112" +
    "\055\113\052\114\044\115\051\001\002\000\052\007\uffd9" +
    "\035\uffd9\037\uffd9\040\uffd9\043\061\044\074\045\065\046" +
    "\057\047\067\051\064\052\062\060\060\063\073\064\066" +
    "\065\075\066\072\067\063\070\uffd9\071\uffd9\072\uffd9\001" +
    "\002\000\054\007\uffd4\035\uffd4\037\uffd4\040\uffd4\043\061" +
    "\044\074\045\065\046\057\047\067\051\064\052\062\060" +
    "\uffd4\061\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4" +
    "\070\uffd4\071\uffd4\072\uffd4\001\002\000\052\007\uffd8\035" +
    "\uffd8\037\uffd8\040\uffd8\043\061\044\074\045\065\046\057" +
    "\047\067\051\064\052\062\060\uffd8\061\uffd8\064\066\065" +
    "\075\066\072\067\063\070\uffd8\071\uffd8\072\uffd8\001\002" +
    "\000\054\007\uffd7\035\uffd7\037\uffd7\040\uffd7\043\061\044" +
    "\074\045\065\046\057\047\067\051\064\052\062\060\uffd7" +
    "\061\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070" +
    "\uffd7\071\uffd7\072\uffd7\001\002\000\040\035\104\043\061" +
    "\044\074\045\065\046\057\047\067\051\064\052\062\060" +
    "\060\061\076\063\073\064\066\065\075\066\072\067\063" +
    "\001\002\000\054\007\uffcb\035\uffcb\037\uffcb\040\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb" +
    "\060\uffcb\061\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067" +
    "\uffcb\070\uffcb\071\uffcb\072\uffcb\001\002\000\054\007\uffdc" +
    "\035\uffdc\037\uffdc\040\uffdc\043\061\044\074\045\uffdc\046" +
    "\uffdc\047\uffdc\051\uffdc\052\uffdc\060\uffdc\061\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072" +
    "\uffdc\001\002\000\054\007\uffd6\035\uffd6\037\uffd6\040\uffd6" +
    "\043\061\044\074\045\065\046\057\047\067\051\064\052" +
    "\062\060\uffd6\061\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6" +
    "\067\uffd6\070\uffd6\071\uffd6\072\uffd6\001\002\000\054\007" +
    "\uffdf\035\uffdf\037\uffdf\040\uffdf\043\061\044\074\045\uffdf" +
    "\046\uffdf\047\067\051\064\052\062\060\uffdf\061\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\001\002\000\054\007\uffdd\035\uffdd\037\uffdd\040" +
    "\uffdd\043\061\044\074\045\uffdd\046\uffdd\047\uffdd\051\uffdd" +
    "\052\uffdd\060\uffdd\061\uffdd\063\uffdd\064\uffdd\065\uffdd\066" +
    "\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\001\002\000\054" +
    "\007\uffd5\035\uffd5\037\uffd5\040\uffd5\043\061\044\074\045" +
    "\065\046\057\047\067\051\064\052\062\060\uffd5\061\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071" +
    "\uffd5\072\uffd5\001\002\000\054\007\uffdb\035\uffdb\037\uffdb" +
    "\040\uffdb\043\061\044\074\045\uffdb\046\uffdb\047\uffdb\051" +
    "\uffdb\052\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\001\002\000" +
    "\052\007\uffda\035\uffda\037\uffda\040\uffda\043\061\044\074" +
    "\045\065\046\057\047\067\051\064\052\062\061\uffda\063" +
    "\073\064\066\065\075\066\072\067\063\070\uffda\071\uffda" +
    "\072\uffda\001\002\000\054\007\uffde\035\uffde\037\uffde\040" +
    "\uffde\043\061\044\074\045\uffde\046\uffde\047\067\051\064" +
    "\052\062\060\uffde\061\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\070\uffde\071\uffde\072\uffde\001\002\000\054" +
    "\007\uffd2\035\uffd2\037\uffd2\040\uffd2\043\061\044\074\045" +
    "\uffd2\046\uffd2\047\uffd2\051\uffd2\052\uffd2\060\uffd2\061\uffd2" +
    "\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\001\002\000\054\007\uffc4\035\uffc4\037\uffc4" +
    "\040\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\051" +
    "\uffc4\052\uffc4\060\uffc4\061\uffc4\063\uffc4\064\uffc4\065\uffc4" +
    "\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\001\002\000" +
    "\026\030\041\034\054\035\122\046\040\062\053\111\043" +
    "\112\055\113\052\114\044\115\051\001\002\000\004\035" +
    "\125\001\002\000\042\035\uffc1\040\123\043\061\044\074" +
    "\045\065\046\057\047\067\051\064\052\062\060\060\061" +
    "\076\063\073\064\066\065\075\066\072\067\063\001\002" +
    "\000\054\007\uffc3\035\uffc3\037\uffc3\040\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\060\uffc3" +
    "\061\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070" +
    "\uffc3\071\uffc3\072\uffc3\001\002\000\024\030\041\034\054" +
    "\046\040\062\053\111\043\112\055\113\052\114\044\115" +
    "\051\001\002\000\004\035\uffc0\001\002\000\054\007\uffc2" +
    "\035\uffc2\037\uffc2\040\uffc2\043\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\051\uffc2\052\uffc2\060\uffc2\061\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072" +
    "\uffc2\001\002\000\014\035\uffa2\036\127\040\uffa2\070\uffa2" +
    "\115\uffa2\001\002\000\024\030\041\034\054\046\040\062" +
    "\053\111\043\112\055\113\052\114\044\115\051\001\002" +
    "\000\040\037\131\043\061\044\074\045\065\046\057\047" +
    "\067\051\064\052\062\060\060\061\076\063\073\064\066" +
    "\065\075\066\072\067\063\001\002\000\012\035\uff96\040" +
    "\uff96\070\uff96\115\uff96\001\002\000\024\030\041\034\054" +
    "\046\040\062\053\111\043\112\055\113\052\114\044\115" +
    "\051\001\002\000\004\115\051\001\002\000\072\007\uff83" +
    "\034\uff83\035\uff83\037\uff83\040\uff83\042\uff83\043\uff83\044" +
    "\uff83\045\uff83\046\uff83\047\uff83\051\uff83\052\uff83\053\uff83" +
    "\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83\063" +
    "\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83" +
    "\072\uff83\001\002\000\040\037\136\043\061\044\074\045" +
    "\065\046\057\047\067\051\064\052\062\060\060\061\076" +
    "\063\073\064\066\065\075\066\072\067\063\001\002\000" +
    "\076\007\uff81\034\uff81\035\uff81\036\137\037\uff81\040\uff81" +
    "\041\140\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047" +
    "\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81" +
    "\057\uff81\060\uff81\061\uff81\063\uff81\064\uff81\065\uff81\066" +
    "\uff81\067\uff81\070\uff81\071\uff81\072\uff81\001\002\000\024" +
    "\030\041\034\054\046\040\062\053\111\043\112\055\113" +
    "\052\114\044\115\051\001\002\000\004\115\051\001\002" +
    "\000\072\007\uff82\034\uff82\035\uff82\037\uff82\040\uff82\042" +
    "\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\051\uff82" +
    "\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060" +
    "\uff82\061\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82" +
    "\070\uff82\071\uff82\072\uff82\001\002\000\040\037\143\043" +
    "\061\044\074\045\065\046\057\047\067\051\064\052\062" +
    "\060\060\061\076\063\073\064\066\065\075\066\072\067" +
    "\063\001\002\000\074\007\uff7f\034\uff7f\035\uff7f\037\uff7f" +
    "\040\uff7f\041\144\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046" +
    "\uff7f\047\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f" +
    "\056\uff7f\057\uff7f\060\uff7f\061\uff7f\063\uff7f\064\uff7f\065" +
    "\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\001\002" +
    "\000\004\115\051\001\002\000\072\007\uff80\034\uff80\035" +
    "\uff80\037\uff80\040\uff80\042\uff80\043\uff80\044\uff80\045\uff80" +
    "\046\uff80\047\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055" +
    "\uff80\056\uff80\057\uff80\060\uff80\061\uff80\063\uff80\064\uff80" +
    "\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80\001" +
    "\002\000\054\007\uffd1\035\uffd1\037\uffd1\040\uffd1\043\061" +
    "\044\074\045\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\060" +
    "\uffd1\061\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1" +
    "\070\uffd1\071\uffd1\072\uffd1\001\002\000\024\030\041\034" +
    "\054\046\040\062\053\111\043\112\055\113\052\114\044" +
    "\115\051\001\002\000\040\037\151\043\061\044\074\045" +
    "\065\046\057\047\067\051\064\052\062\060\060\061\076" +
    "\063\073\064\066\065\075\066\072\067\063\001\002\000" +
    "\014\035\uff9f\036\152\040\uff9f\070\uff9f\115\uff9f\001\002" +
    "\000\024\030\041\034\054\046\040\062\053\111\043\112" +
    "\055\113\052\114\044\115\051\001\002\000\040\037\154" +
    "\043\061\044\074\045\065\046\057\047\067\051\064\052" +
    "\062\060\060\061\076\063\073\064\066\065\075\066\072" +
    "\067\063\001\002\000\012\035\uff93\040\uff93\070\uff93\115" +
    "\uff93\001\002\000\024\030\041\034\054\046\040\062\053" +
    "\111\043\112\055\113\052\114\044\115\051\001\002\000" +
    "\040\037\157\043\061\044\074\045\065\046\057\047\067" +
    "\051\064\052\062\060\060\061\076\063\073\064\066\065" +
    "\075\066\072\067\063\001\002\000\014\035\uffa4\036\160" +
    "\040\uffa4\070\uffa4\115\uffa4\001\002\000\024\030\041\034" +
    "\054\046\040\062\053\111\043\112\055\113\052\114\044" +
    "\115\051\001\002\000\040\037\162\043\061\044\074\045" +
    "\065\046\057\047\067\051\064\052\062\060\060\061\076" +
    "\063\073\064\066\065\075\066\072\067\063\001\002\000" +
    "\012\035\uff98\040\uff98\070\uff98\115\uff98\001\002\000\032" +
    "\004\171\017\164\020\172\033\165\076\173\077\175\100" +
    "\174\101\177\102\170\103\167\107\166\110\176\001\002" +
    "\000\012\035\uff90\040\uff90\070\uff90\115\uff90\001\002\000" +
    "\012\035\uff85\040\uff85\070\uff85\115\uff85\001\002\000\012" +
    "\035\uff86\040\uff86\070\uff86\115\uff86\001\002\000\012\035" +
    "\uff88\040\uff88\070\uff88\115\uff88\001\002\000\012\035\uff89" +
    "\040\uff89\070\uff89\115\uff89\001\002\000\012\035\uff8e\040" +
    "\uff8e\070\uff8e\115\uff8e\001\002\000\012\035\uff8f\040\uff8f" +
    "\070\uff8f\115\uff8f\001\002\000\012\035\uff8d\040\uff8d\070" +
    "\uff8d\115\uff8d\001\002\000\012\035\uff8b\040\uff8b\070\uff8b" +
    "\115\uff8b\001\002\000\012\035\uff8c\040\uff8c\070\uff8c\115" +
    "\uff8c\001\002\000\012\035\uff87\040\uff87\070\uff87\115\uff87" +
    "\001\002\000\012\035\uff8a\040\uff8a\070\uff8a\115\uff8a\001" +
    "\002\000\024\030\041\034\054\046\040\062\053\111\043" +
    "\112\055\113\052\114\044\115\051\001\002\000\040\037" +
    "\202\043\061\044\074\045\065\046\057\047\067\051\064" +
    "\052\062\060\060\061\076\063\073\064\066\065\075\066" +
    "\072\067\063\001\002\000\014\035\uffa3\036\203\040\uffa3" +
    "\070\uffa3\115\uffa3\001\002\000\024\030\041\034\054\046" +
    "\040\062\053\111\043\112\055\113\052\114\044\115\051" +
    "\001\002\000\040\037\205\043\061\044\074\045\065\046" +
    "\057\047\067\051\064\052\062\060\060\061\076\063\073" +
    "\064\066\065\075\066\072\067\063\001\002\000\012\035" +
    "\uff97\040\uff97\070\uff97\115\uff97\001\002\000\024\030\041" +
    "\034\054\046\040\062\053\111\043\112\055\113\052\114" +
    "\044\115\051\001\002\000\040\037\210\043\061\044\074" +
    "\045\065\046\057\047\067\051\064\052\062\060\060\061" +
    "\076\063\073\064\066\065\075\066\072\067\063\001\002" +
    "\000\014\035\uffa7\036\211\040\uffa7\070\uffa7\115\uffa7\001" +
    "\002\000\024\030\041\034\054\046\040\062\053\111\043" +
    "\112\055\113\052\114\044\115\051\001\002\000\040\037" +
    "\213\043\061\044\074\045\065\046\057\047\067\051\064" +
    "\052\062\060\060\061\076\063\073\064\066\065\075\066" +
    "\072\067\063\001\002\000\012\035\uff9b\040\uff9b\070\uff9b" +
    "\115\uff9b\001\002\000\024\030\041\034\054\046\040\062" +
    "\053\111\043\112\055\113\052\114\044\115\051\001\002" +
    "\000\040\037\216\043\061\044\074\045\065\046\057\047" +
    "\067\051\064\052\062\060\060\061\076\063\073\064\066" +
    "\065\075\066\072\067\063\001\002\000\014\035\uffa5\036" +
    "\217\040\uffa5\070\uffa5\115\uffa5\001\002\000\024\030\041" +
    "\034\054\046\040\062\053\111\043\112\055\113\052\114" +
    "\044\115\051\001\002\000\040\037\221\043\061\044\074" +
    "\045\065\046\057\047\067\051\064\052\062\060\060\061" +
    "\076\063\073\064\066\065\075\066\072\067\063\001\002" +
    "\000\012\035\uff99\040\uff99\070\uff99\115\uff99\001\002\000" +
    "\024\030\041\034\054\046\040\062\053\111\043\112\055" +
    "\113\052\114\044\115\051\001\002\000\040\037\224\043" +
    "\061\044\074\045\065\046\057\047\067\051\064\052\062" +
    "\060\060\061\076\063\073\064\066\065\075\066\072\067" +
    "\063\001\002\000\014\035\uffa6\036\225\040\uffa6\070\uffa6" +
    "\115\uffa6\001\002\000\024\030\041\034\054\046\040\062" +
    "\053\111\043\112\055\113\052\114\044\115\051\001\002" +
    "\000\040\037\227\043\061\044\074\045\065\046\057\047" +
    "\067\051\064\052\062\060\060\061\076\063\073\064\066" +
    "\065\075\066\072\067\063\001\002\000\012\035\uff9a\040" +
    "\uff9a\070\uff9a\115\uff9a\001\002\000\004\034\232\001\002" +
    "\000\004\070\010\001\002\000\006\035\234\115\051\001" +
    "\002\000\004\035\243\001\002\000\004\070\ufffa\001\002" +
    "\000\006\035\ufff7\040\241\001\002\000\004\016\237\001" +
    "\002\000\036\004\026\017\020\020\031\025\033\033\021" +
    "\074\027\076\030\077\034\100\032\101\036\102\024\103" +
    "\023\107\022\110\035\001\002\000\006\035\ufffb\040\ufffb" +
    "\001\002\000\004\115\051\001\002\000\004\035\ufff8\001" +
    "\002\000\004\070\ufff9\001\002\000\024\003\263\006\253" +
    "\010\260\012\254\015\265\021\266\023\255\027\256\115" +
    "\051\001\002\000\032\003\ufff4\006\ufff4\010\ufff4\012\ufff4" +
    "\015\ufff4\021\ufff4\023\ufff4\027\ufff4\031\ufff4\032\ufff4\070" +
    "\012\115\ufff4\001\002\000\030\003\ufff3\006\ufff3\010\ufff3" +
    "\012\ufff3\015\ufff3\021\ufff3\023\ufff3\027\ufff3\031\ufff3\032" +
    "\ufff3\115\ufff3\001\002\000\030\003\uffee\006\uffee\010\uffee" +
    "\012\uffee\015\uffee\021\uffee\023\uffee\027\uffee\031\uffee\032" +
    "\uffee\115\uffee\001\002\000\030\003\uffef\006\uffef\010\uffef" +
    "\012\uffef\015\uffef\021\uffef\023\uffef\027\uffef\031\uffef\032" +
    "\uffef\115\uffef\001\002\000\030\003\ufff2\006\ufff2\010\ufff2" +
    "\012\ufff2\015\ufff2\021\ufff2\023\ufff2\027\ufff2\031\ufff2\032" +
    "\ufff2\115\ufff2\001\002\000\030\003\ufff5\006\ufff5\010\ufff5" +
    "\012\ufff5\015\ufff5\021\ufff5\023\ufff5\027\ufff5\031\ufff5\032" +
    "\ufff5\115\ufff5\001\002\000\024\030\041\034\054\046\040" +
    "\062\053\111\043\112\055\113\052\114\044\115\051\001" +
    "\002\000\004\011\356\001\002\000\026\030\041\034\054" +
    "\046\040\062\053\070\010\111\043\112\055\113\052\114" +
    "\044\115\051\001\002\000\016\030\041\111\043\112\055" +
    "\113\052\114\044\115\051\001\002\000\004\070\010\001" +
    "\002\000\036\004\026\017\020\020\031\025\033\033\021" +
    "\074\027\076\030\077\034\100\032\101\036\102\024\103" +
    "\023\107\022\110\035\001\002\000\030\003\ufff0\006\ufff0" +
    "\010\ufff0\012\ufff0\015\ufff0\021\ufff0\023\ufff0\027\ufff0\031" +
    "\ufff0\032\ufff0\115\ufff0\001\002\000\030\003\ufff1\006\ufff1" +
    "\010\ufff1\012\ufff1\015\ufff1\021\ufff1\023\ufff1\027\ufff1\031" +
    "\ufff1\032\ufff1\115\ufff1\001\002\000\004\070\321\001\002" +
    "\000\020\034\117\042\313\053\312\054\315\055\310\056" +
    "\311\057\316\001\002\000\024\030\041\034\054\046\040" +
    "\062\053\111\043\112\055\113\052\114\044\115\051\001" +
    "\002\000\004\115\051\001\002\000\006\016\272\040\271" +
    "\001\002\000\006\016\uffb5\040\uffb5\001\002\000\004\115" +
    "\051\001\002\000\036\004\026\017\020\020\031\025\033" +
    "\033\021\074\027\076\030\077\034\100\032\101\036\102" +
    "\024\103\023\107\022\110\035\001\002\000\004\070\010" +
    "\001\002\000\032\003\uffe9\006\uffe9\010\uffe9\012\uffe9\015" +
    "\uffe9\021\uffe9\023\uffe9\027\uffe9\031\uffe9\032\uffe9\070\012" +
    "\115\uffe9\001\002\000\006\016\uffb6\040\uffb6\001\002\000" +
    "\042\043\061\044\074\045\065\046\057\047\067\051\064" +
    "\052\062\060\060\061\076\063\073\064\066\065\075\066" +
    "\072\067\063\071\300\072\277\001\002\000\024\030\uffbf" +
    "\034\uffbf\046\uffbf\062\uffbf\111\uffbf\112\uffbf\113\uffbf\114" +
    "\uffbf\115\uffbf\001\002\000\024\030\uffbe\034\uffbe\046\uffbe" +
    "\062\uffbe\111\uffbe\112\uffbe\113\uffbe\114\uffbe\115\uffbe\001" +
    "\002\000\024\030\041\034\054\046\040\062\053\111\043" +
    "\112\055\113\052\114\044\115\051\001\002\000\040\007" +
    "\303\043\061\044\074\045\065\046\057\047\067\051\064" +
    "\052\062\060\060\061\076\063\073\064\066\065\075\066" +
    "\072\067\063\001\002\000\004\070\010\001\002\000\024" +
    "\003\263\006\253\010\260\012\305\015\265\021\266\023" +
    "\255\027\256\115\051\001\002\000\004\015\306\001\002" +
    "\000\004\070\010\001\002\000\032\003\uffe5\006\uffe5\010" +
    "\uffe5\012\uffe5\015\uffe5\021\uffe5\023\uffe5\027\uffe5\031\uffe5" +
    "\032\uffe5\070\012\115\uffe5\001\002\000\024\030\uffc6\034" +
    "\uffc6\046\uffc6\062\uffc6\111\uffc6\112\uffc6\113\uffc6\114\uffc6" +
    "\115\uffc6\001\002\000\024\030\uffc5\034\uffc5\046\uffc5\062" +
    "\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5\115\uffc5\001\002" +
    "\000\024\030\uffc9\034\uffc9\046\uffc9\062\uffc9\111\uffc9\112" +
    "\uffc9\113\uffc9\114\uffc9\115\uffc9\001\002\000\024\030\uffca" +
    "\034\uffca\046\uffca\062\uffca\111\uffca\112\uffca\113\uffca\114" +
    "\uffca\115\uffca\001\002\000\024\030\041\034\054\046\040" +
    "\062\053\111\043\112\055\113\052\114\044\115\051\001" +
    "\002\000\024\030\uffc8\034\uffc8\046\uffc8\062\uffc8\111\uffc8" +
    "\112\uffc8\113\uffc8\114\uffc8\115\uffc8\001\002\000\024\030" +
    "\uffc7\034\uffc7\046\uffc7\062\uffc7\111\uffc7\112\uffc7\113\uffc7" +
    "\114\uffc7\115\uffc7\001\002\000\040\043\061\044\074\045" +
    "\065\046\057\047\067\051\064\052\062\060\060\061\076" +
    "\063\073\064\066\065\075\066\072\067\063\070\010\001" +
    "\002\000\032\003\uffe8\006\uffe8\010\uffe8\012\uffe8\015\uffe8" +
    "\021\uffe8\023\uffe8\027\uffe8\031\uffe8\032\uffe8\070\012\115" +
    "\uffe8\001\002\000\030\003\uffea\006\uffea\010\uffea\012\uffea" +
    "\015\uffea\021\uffea\023\uffea\027\uffea\031\uffea\032\uffea\115" +
    "\uffea\001\002\000\004\115\051\001\002\000\004\022\324" +
    "\001\002\000\004\115\051\001\002\000\004\007\326\001" +
    "\002\000\004\070\010\001\002\000\024\003\263\006\253" +
    "\010\260\012\330\015\265\021\266\023\255\027\256\115" +
    "\051\001\002\000\004\010\331\001\002\000\004\070\010" +
    "\001\002\000\032\003\uffe6\006\uffe6\010\uffe6\012\uffe6\015" +
    "\uffe6\021\uffe6\023\uffe6\027\uffe6\031\uffe6\032\uffe6\070\012" +
    "\115\uffe6\001\002\000\032\003\uffeb\006\uffeb\010\uffeb\012" +
    "\uffeb\015\uffeb\021\uffeb\023\uffeb\027\uffeb\031\uffeb\032\uffeb" +
    "\070\012\115\uffeb\001\002\000\004\070\010\001\002\000" +
    "\004\070\uffbc\001\002\000\004\070\uffbd\001\002\000\006" +
    "\031\343\032\341\001\002\000\010\031\uffe2\032\uffe2\070" +
    "\012\001\002\000\004\070\010\001\002\000\004\012\347" +
    "\001\002\000\024\030\041\034\054\046\040\062\053\111" +
    "\043\112\055\113\052\114\044\115\051\001\002\000\006" +
    "\031\uffe3\032\uffe3\001\002\000\040\043\061\044\074\045" +
    "\065\046\057\047\067\051\064\052\062\060\060\061\076" +
    "\063\073\064\066\065\075\066\072\067\063\070\010\001" +
    "\002\000\026\003\263\006\253\010\260\015\265\021\266" +
    "\023\255\027\256\031\uffe1\032\uffe1\115\051\001\002\000" +
    "\004\027\350\001\002\000\004\070\010\001\002\000\032" +
    "\003\uffe4\006\uffe4\010\uffe4\012\uffe4\015\uffe4\021\uffe4\023" +
    "\uffe4\027\uffe4\031\uffe4\032\uffe4\070\012\115\uffe4\001\002" +
    "\000\024\003\263\006\253\010\260\012\uffe0\015\265\021" +
    "\266\023\255\027\256\115\051\001\002\000\032\003\uffec" +
    "\006\uffec\010\uffec\012\uffec\015\uffec\021\uffec\023\uffec\027" +
    "\uffec\031\uffec\032\uffec\070\012\115\uffec\001\002\000\040" +
    "\043\061\044\074\045\065\046\057\047\067\051\064\052" +
    "\062\060\060\061\076\063\073\064\066\065\075\066\072" +
    "\067\063\070\010\001\002\000\032\003\uffed\006\uffed\010" +
    "\uffed\012\uffed\015\uffed\021\uffed\023\uffed\027\uffed\031\uffed" +
    "\032\uffed\070\012\115\uffed\001\002\000\004\070\ufffc\001" +
    "\002\000\040\007\360\043\061\044\074\045\065\046\057" +
    "\047\067\051\064\052\062\060\060\061\076\063\073\064" +
    "\066\065\075\066\072\067\063\001\002\000\004\070\010" +
    "\001\002\000\024\003\263\006\253\010\260\012\362\015" +
    "\265\021\266\023\255\027\256\115\051\001\002\000\004" +
    "\006\363\001\002\000\004\070\010\001\002\000\032\003" +
    "\uffe7\006\uffe7\010\uffe7\012\uffe7\015\uffe7\021\uffe7\023\uffe7" +
    "\027\uffe7\031\uffe7\032\uffe7\070\012\115\uffe7\001\002\000" +
    "\024\030\041\034\054\046\040\062\053\111\043\112\055" +
    "\113\052\114\044\115\051\001\002\000\040\037\367\043" +
    "\061\044\074\045\065\046\057\047\067\051\064\052\062" +
    "\060\060\061\076\063\073\064\066\065\075\066\072\067" +
    "\063\001\002\000\014\035\uffa1\036\370\040\uffa1\070\uffa1" +
    "\115\uffa1\001\002\000\024\030\041\034\054\046\040\062" +
    "\053\111\043\112\055\113\052\114\044\115\051\001\002" +
    "\000\040\037\372\043\061\044\074\045\065\046\057\047" +
    "\067\051\064\052\062\060\060\061\076\063\073\064\066" +
    "\065\075\066\072\067\063\001\002\000\012\035\uff95\040" +
    "\uff95\070\uff95\115\uff95\001\002\000\024\030\041\034\054" +
    "\046\040\062\053\111\043\112\055\113\052\114\044\115" +
    "\051\001\002\000\040\037\375\043\061\044\074\045\065" +
    "\046\057\047\067\051\064\052\062\060\060\061\076\063" +
    "\073\064\066\065\075\066\072\067\063\001\002\000\014" +
    "\035\uffa0\036\376\040\uffa0\070\uffa0\115\uffa0\001\002\000" +
    "\024\030\041\034\054\046\040\062\053\111\043\112\055" +
    "\113\052\114\044\115\051\001\002\000\040\037\u0100\043" +
    "\061\044\074\045\065\046\057\047\067\051\064\052\062" +
    "\060\060\061\076\063\073\064\066\065\075\066\072\067" +
    "\063\001\002\000\012\035\uff94\040\uff94\070\uff94\115\uff94" +
    "\001\002\000\024\030\041\034\054\046\040\062\053\111" +
    "\043\112\055\113\052\114\044\115\051\001\002\000\040" +
    "\037\u0103\043\061\044\074\045\065\046\057\047\067\051" +
    "\064\052\062\060\060\061\076\063\073\064\066\065\075" +
    "\066\072\067\063\001\002\000\014\035\uff9e\036\u0104\040" +
    "\uff9e\070\uff9e\115\uff9e\001\002\000\024\030\041\034\054" +
    "\046\040\062\053\111\043\112\055\113\052\114\044\115" +
    "\051\001\002\000\040\037\u0106\043\061\044\074\045\065" +
    "\046\057\047\067\051\064\052\062\060\060\061\076\063" +
    "\073\064\066\065\075\066\072\067\063\001\002\000\012" +
    "\035\uff92\040\uff92\070\uff92\115\uff92\001\002\000\024\030" +
    "\041\034\054\046\040\062\053\111\043\112\055\113\052" +
    "\114\044\115\051\001\002\000\040\037\u0109\043\061\044" +
    "\074\045\065\046\057\047\067\051\064\052\062\060\060" +
    "\061\076\063\073\064\066\065\075\066\072\067\063\001" +
    "\002\000\014\035\uff9d\036\u010a\040\uff9d\070\uff9d\115\uff9d" +
    "\001\002\000\024\030\041\034\054\046\040\062\053\111" +
    "\043\112\055\113\052\114\044\115\051\001\002\000\040" +
    "\037\u010c\043\061\044\074\045\065\046\057\047\067\051" +
    "\064\052\062\060\060\061\076\063\073\064\066\065\075" +
    "\066\072\067\063\001\002\000\012\035\uff91\040\uff91\070" +
    "\uff91\115\uff91\001\002\000\024\030\041\034\054\046\040" +
    "\062\053\111\043\112\055\113\052\114\044\115\051\001" +
    "\002\000\040\037\u010f\043\061\044\074\045\065\046\057" +
    "\047\067\051\064\052\062\060\060\061\076\063\073\064" +
    "\066\065\075\066\072\067\063\001\002\000\014\035\uffa8" +
    "\036\u0110\040\uffa8\070\uffa8\115\uffa8\001\002\000\024\030" +
    "\041\034\054\046\040\062\053\111\043\112\055\113\052" +
    "\114\044\115\051\001\002\000\040\037\u0112\043\061\044" +
    "\074\045\065\046\057\047\067\051\064\052\062\060\060" +
    "\061\076\063\073\064\066\065\075\066\072\067\063\001" +
    "\002\000\012\035\uff9c\040\uff9c\070\uff9c\115\uff9c\001\002" +
    "\000\004\070\010\001\002\000\024\003\263\006\253\010" +
    "\260\012\u0115\015\265\021\266\023\255\027\256\115\051" +
    "\001\002\000\004\014\u0116\001\002\000\004\070\ufff6\001" +
    "\002\000\006\002\000\011\015\001\002\000\004\070\010" +
    "\001\002\000\024\003\263\006\253\010\260\012\u011a\015" +
    "\265\021\266\023\255\027\256\115\051\001\002\000\004" +
    "\026\u011b\001\002\000\004\070\u011c\001\002\000\004\070" +
    "\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\006\042\010\001\001" +
    "\000\006\005\015\011\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\u0116\042\010" +
    "\001\001\000\002\001\001\000\004\037\024\001\001\000" +
    "\004\042\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\026\045\030\041\035" +
    "\046\040\047\041\044\001\001\000\014\026\145\030\041" +
    "\035\046\040\047\041\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\026\114\030\041\035\046\040\047\041\044\001\001\000" +
    "\014\026\055\030\041\035\046\040\047\041\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\026\113\030" +
    "\041\035\046\040\047\041\044\001\001\000\014\026\112" +
    "\030\041\035\046\040\047\041\044\001\001\000\002\001" +
    "\001\000\014\026\111\030\041\035\046\040\047\041\044" +
    "\001\001\000\014\026\110\030\041\035\046\040\047\041" +
    "\044\001\001\000\014\026\107\030\041\035\046\040\047" +
    "\041\044\001\001\000\014\026\106\030\041\035\046\040" +
    "\047\041\044\001\001\000\014\026\105\030\041\035\046" +
    "\040\047\041\044\001\001\000\014\026\104\030\041\035" +
    "\046\040\047\041\044\001\001\000\014\026\102\030\041" +
    "\035\046\040\047\041\044\001\001\000\002\001\001\000" +
    "\014\026\101\030\041\035\046\040\047\041\044\001\001" +
    "\000\014\026\100\030\041\035\046\040\047\041\044\001" +
    "\001\000\002\001\001\000\014\026\077\030\041\035\046" +
    "\040\047\041\044\001\001\000\014\026\076\030\041\035" +
    "\046\040\047\041\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\026\120\030\041\032" +
    "\117\035\046\040\047\041\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\026\120\030" +
    "\041\032\123\035\046\040\047\041\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\026" +
    "\127\030\041\035\046\040\047\041\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\026\134\030\041\035" +
    "\046\040\047\041\044\001\001\000\006\040\133\041\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\026\141\030\041\035\046\040\047\041\044" +
    "\001\001\000\006\040\140\041\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\144" +
    "\041\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\026\147\030\041\035\046\040\047\041\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\026\152\030" +
    "\041\035\046\040\047\041\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\026\155\030\041\035\046\040" +
    "\047\041\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\026\160\030\041\035\046\040\047\041\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\026\200" +
    "\030\041\035\046\040\047\041\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\026\203\030\041\035\046" +
    "\040\047\041\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\026\206\030\041\035\046\040\047\041\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\026" +
    "\211\030\041\035\046\040\047\041\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\026\214\030\041\035" +
    "\046\040\047\041\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\026\217\030\041\035\046\040\047\041" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\026\222\030\041\035\046\040\047\041\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\026\225\030\041" +
    "\035\046\040\047\041\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\230\001\001\000\006\012\243" +
    "\042\244\001\001\000\010\006\234\010\232\041\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\237\001\001\000\002\001" +
    "\001\000\010\006\234\010\241\041\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\013\251\014\261\015" +
    "\260\016\247\017\245\020\250\022\246\030\256\040\263" +
    "\041\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\026\356\030\041\035\046\040\047\041" +
    "\044\001\001\000\002\001\001\000\016\026\353\030\041" +
    "\035\046\040\047\041\044\042\352\001\001\000\012\034" +
    "\333\035\334\040\335\041\044\001\001\000\004\042\332" +
    "\001\001\000\004\037\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\313\031\115" +
    "\001\001\000\014\026\275\030\041\035\046\040\047\041" +
    "\044\001\001\000\006\036\266\041\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\274\001\001\000" +
    "\004\037\272\001\001\000\004\042\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\026\301\030\041" +
    "\035\046\040\047\041\044\001\001\000\002\001\001\000" +
    "\006\012\303\042\244\001\001\000\026\013\251\014\261" +
    "\015\260\016\247\017\245\020\250\022\246\030\256\040" +
    "\263\041\044\001\001\000\002\001\001\000\004\042\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\026\316" +
    "\030\041\035\046\040\047\041\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\322\001\001\000" +
    "\002\001\001\000\006\040\324\041\044\001\001\000\002" +
    "\001\001\000\006\012\326\042\244\001\001\000\026\013" +
    "\251\014\261\015\260\016\247\017\245\020\250\022\246" +
    "\030\256\040\263\041\044\001\001\000\002\001\001\000" +
    "\004\042\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\336\042\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\343\025\341\001\001\000\002" +
    "\001\001\000\006\012\351\042\244\001\001\000\002\001" +
    "\001\000\014\026\344\030\041\035\046\040\047\041\044" +
    "\001\001\000\002\001\001\000\006\012\345\042\244\001" +
    "\001\000\026\013\251\014\261\015\260\016\247\017\245" +
    "\020\250\022\246\030\256\040\263\041\044\001\001\000" +
    "\002\001\001\000\004\042\350\001\001\000\002\001\001" +
    "\000\026\013\251\014\261\015\260\016\247\017\245\020" +
    "\250\022\246\030\256\040\263\041\044\001\001\000\002" +
    "\001\001\000\004\042\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\360\042\244" +
    "\001\001\000\026\013\251\014\261\015\260\016\247\017" +
    "\245\020\250\022\246\030\256\040\263\041\044\001\001" +
    "\000\002\001\001\000\004\042\363\001\001\000\002\001" +
    "\001\000\014\026\365\030\041\035\046\040\047\041\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\026" +
    "\370\030\041\035\046\040\047\041\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\026\373\030\041\035" +
    "\046\040\047\041\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\026\376\030\041\035\046\040\047\041" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\026\u0101\030\041\035\046\040\047\041\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\026\u0104\030\041" +
    "\035\046\040\047\041\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\026\u0107\030\041\035\046\040\047" +
    "\041\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\026\u010a\030\041\035\046\040\047\041\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\026\u010d\030" +
    "\041\035\046\040\047\041\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\026\u0110\030\041\035\046\040" +
    "\047\041\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\u0113\042\244\001\001\000\026\013\251\014" +
    "\261\015\260\016\247\017\245\020\250\022\246\030\256" +
    "\040\263\041\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\015\001\001\000\006\012\u0118\042\244" +
    "\001\001\000\026\013\251\014\261\015\260\016\247\017" +
    "\245\020\250\022\246\030\256\040\263\041\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 /*token_num++; */return s.next_token(); 
    }


    //private int token_num = 0;
    private Scanner s;
    public Parser(Scanner s) {
        super(s);
        this.s = s;
    }
/*
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at line " + (cur_token.left + 1) + " column " + (cur_token.right + 1) + " of input.", null);
        //  : " + Sym.terminalNames[cur_token.sym] + (cur_token.value == null ? "" : " value: " + cur_token.value), null
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        this.report_fatal_error("Couldn\'t repair and continue parse", cur_token);
    }
    */

    public void report_error(String message, Object info) {
    System.err.print(message);
    System.err.flush();
    if(info instanceof Symbol) {
        if(((Symbol)info).left != -1) {
            System.err.println(" at line " + (((Symbol)info).left + 1) + " column " + (((Symbol)info).right + 1) + " of input");
        } else {
            System.err.println("");
        }
    } else {
        System.err.println("");
    }

}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Start start_val = (Start)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= DclBlock FunctionDcls Program FunctionDcls 
            {
              Start RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DclBlock db = (DclBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fds1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fds1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FunctionDclList fds1 = (FunctionDclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fds2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fds2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDclList fds2 = (FunctionDclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Start(db, /* s, */fds1, p, fds2, dbleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DclBlock ::= BEGIN DECLARATIONS Stmts END DECLARATIONS EOL 
            {
              DclBlock RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new DclBlock(ss, ssleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DclBlock",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FunctionDcls ::= MultEOL 
            {
              FunctionDclList RESULT =null;
		 RESULT = new FunctionDclList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDcls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FunctionDcls ::= FunctionDcls FunctionDcl MultEOL 
            {
              FunctionDclList RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FunctionDclList fds = (FunctionDclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionDcl fd = (FunctionDcl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fds; fds.addElement(fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDcls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunctionDcl ::= FUNCTION TypeId Identifier Params Stmts END FUNCTION 
            {
              FunctionDcl RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParamList p = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunctionDcl(ti, id, p, ss, tileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDcl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Param ::= Identifier AS TypeId 
            {
              Param RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Param(id, ti, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Param",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Params ::= LPAREN RPAREN 
            {
              ParamList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ParamList(lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Params",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Params ::= LPAREN ParamList RPAREN 
            {
              ParamList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Params",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParamList ::= Param COMMA ParamList 
            {
              ParamList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pl; pl.addElement(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ParamList ::= Param 
            {
              ParamList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamList(pleft); RESULT.addElement(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Program ::= BEGIN PROGRAM Stmts END PROGRAM 
            {
              Program RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Program(ss, ssleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stmts ::= Stmts Stmt 
            {
              StmtList RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.addElement(s); RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stmts ::= MultEOL 
            {
              StmtList RESULT =null;
		 RESULT = new StmtList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stmt ::= Dcl 
            {
              Stmt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dcl d = (Dcl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stmt ::= Assignment 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stmt ::= WhileStmt 
            {
              Stmt RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStmt ws = (WhileStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stmt ::= ForeachStmt 
            {
              Stmt RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForeachStmt fs = (ForeachStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stmt ::= ForStmt 
            {
              Stmt RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForStmt fs = (ForStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stmt ::= SwitchStmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SwitchStmt s = (SwitchStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt ::= RETURN Expression MultEOL 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnExpr(e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt ::= RETURN MultEOL 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(rleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= FunctionCall MultEOL 
            {
              Stmt RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCallStmt(fc, fcleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt ::= error EOL 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Dcl ::= DECLARE DclIds AS TypeId MultEOL 
            {
              Dcl RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DclIdList ds = (DclIdList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Dcl(ds, ti, dsleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dcl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Assignment ::= NestedId AssignOp Expression MultEOL 
            {
              Assignment RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AssignOp ao = (AssignOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assignment(ni, ao, e, nileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WhileStmt ::= WHILE Expression DO Stmts END WHILE MultEOL 
            {
              WhileStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new WhileStmt(e, ss, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ForeachStmt ::= FOREACH TypeId Identifier IN NestedId DO Stmts END FOREACH MultEOL 
            {
              ForeachStmt RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		TypeIdentifier ti = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ForeachStmt(ti, id, ni, s, tileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForeachStmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ForStmt ::= FOR Expression ForIterator Expression DO Stmts END FOR MultEOL 
            {
              ForStmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ForIterator fi = (ForIterator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ForStmt(e1, fi, e2, ss, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SwitchStmt ::= SWITCH Variable SwitchCases SwitchDef END SWITCH MultEOL 
            {
              SwitchStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int swcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int swcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SwitchCaseList swcs = (SwitchCaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int swdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int swdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SwitchDef swd = (SwitchDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new SwitchStmt(v, swcs, swd, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SwitchCases ::= SwitchCases SwitchCase 
            {
              SwitchCaseList RESULT =null;
		int swcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int swcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SwitchCaseList swcs = (SwitchCaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int swcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SwitchCase swc = (SwitchCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 swcs.addElement(swc); RESULT = swcs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCases",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SwitchCases ::= MultEOL 
            {
              SwitchCaseList RESULT =null;
		 RESULT = new SwitchCaseList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCases",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SwitchCase ::= CASE Expression Stmts 
            {
              SwitchCase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SwitchCase(v, ss, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCase",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SwitchDef ::= DEFAULT Stmts 
            {
              SwitchDef RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SwitchDef(ss, dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchDef",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression PLUS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression MINUS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression MULT Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression DIV Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression MOD Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression AND Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression OR Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Expression EQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicEqualsExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Expression LESSTHAN Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThanExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Expression GREATERTHAN Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThanExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= Expression LESSTHANEQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThanEqualsExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= Expression GREATERTHANEQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThanEqualsExpr(e1, e2, e1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= LPAREN Expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= NOT Expression 
            {
              Expression RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpr(e, notleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= MINUS Expression 
            {
              Expression RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnMinusExpr(e, minleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= Expression PLUSPLUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PlusPlusExpr(e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression ::= Expression MINUSMINUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MinusMinusExpr(e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= FunctionCall 
            {
              Expression RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionCallExpr(fc, fcleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expression ::= NestedId 
            {
              Expression RESULT =null;
		int nidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NestedIdentifier nid = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NestedIdExpr(nid, nidleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expression ::= StdLiteral 
            {
              Expression RESULT =null;
		int stdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StdLiteral std = (StdLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StdLiteralExpr(std, stdleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expression ::= LPAREN Expression COMMA Expression RPAREN 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AssignOp ::= EQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AssignOp ::= PLUSEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AssignOp ::= MINUSEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AssignOp ::= MODEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AssignOp ::= MULTEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AssignOp ::= DIVEQ 
            {
              AssignOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivEqualsOp(eqleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FunctionCall ::= NestedId Arguments 
            {
              FunctionCall RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArgumentList arg = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionCall(ni, arg, nileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Arguments ::= LPAREN RPAREN 
            {
              ArgumentList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArgumentList(lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Arguments ::= LPAREN ArgumentList RPAREN 
            {
              ArgumentList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = al; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ArgumentList ::= Expression 
            {
              ArgumentList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentList(eleft); RESULT.addElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ArgumentList ::= Expression COMMA ArgumentList 
            {
              ArgumentList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = al; al.addElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ForIterator ::= TO 
            {
              ForIterator RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ToIterator(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForIterator",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ForIterator ::= DOWNTO 
            {
              ForIterator RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DownToIterator(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForIterator",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Variable ::= NestedId 
            {
              Variable RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableNestedId(ni, nileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Variable ::= StdLiteral 
            {
              Variable RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StdLiteral st = (StdLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableStdLiteral(st, stleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // StdLiteral ::= DECIMAL_LITERAL 
            {
              StdLiteral RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double dec = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecimalLiteral(dec, decleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // StdLiteral ::= STRING_LITERAL 
            {
              StdLiteral RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(str, strleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StdLiteral ::= BOOLEAN_LITERAL 
            {
              StdLiteral RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanLiteral(bool, boolleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // StdLiteral ::= INTEGER_LITERAL 
            {
              StdLiteral RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer in = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(in, inleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StdLiteral ::= NULL_LITERAL 
            {
              StdLiteral RESULT =null;
		int nulleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nulright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nul = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NullLiteral(nulleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StdLiteral",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DclIds ::= DclIds COMMA Identifier 
            {
              DclIdList RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DclIdList ds = (DclIdList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ds; ds.addElement(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DclIds",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DclIds ::= Identifier 
            {
              DclIdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DclIdList(0); RESULT.addElement(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DclIds",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TypeId ::= DECIMAL 
            {
              TypeIdentifier RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decimal(dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TypeId ::= STRING 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringT(sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TypeId ::= BOOLEAN 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanT(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TypeId ::= TERRAIN 
            {
              TypeIdentifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Terrain(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TypeId ::= GROUP 
            {
              TypeIdentifier RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Group(gleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TypeId ::= PLATOON 
            {
              TypeIdentifier RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Platoon(pleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TypeId ::= FORCE 
            {
              TypeIdentifier RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Force(fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TypeId ::= COORD 
            {
              TypeIdentifier RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Coord(cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TypeId ::= SOLDIER 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Soldier(sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TypeId ::= BARRIER 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Barrier(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TypeId ::= VECTOR 
            {
              TypeIdentifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VectorT(vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TypeId ::= INTEGER 
            {
              TypeIdentifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerT(ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TypeId ::= DECIMAL LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Decimal1DArray(e, dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TypeId ::= STRING LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new String1DArray(e, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TypeId ::= BOOLEAN LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Boolean1DArray(e, bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TypeId ::= TERRAIN LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Terrain1DArray(e, tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TypeId ::= GROUP LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Group1DArray(e, gleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TypeId ::= PLATOON LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Platoon1DArray(e, pleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TypeId ::= FORCE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Force1DArray(e, fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TypeId ::= COORD LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Coord1DArray(e, cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TypeId ::= SOLDIER LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Soldier1DArray(e, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TypeId ::= BARRIER LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Barrier1DArray(e, bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TypeId ::= VECTOR LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vector1DArray(e, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TypeId ::= INTEGER LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Integer1DArray(e, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TypeId ::= DECIMAL LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Decimal2DArray(e1, e2, dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TypeId ::= STRING LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new String2DArray(e1, e2, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TypeId ::= BOOLEAN LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Boolean2DArray(e1, e2, bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TypeId ::= TERRAIN LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Terrain2DArray(e1, e2, tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TypeId ::= GROUP LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Group2DArray(e1, e2, gleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TypeId ::= PLATOON LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Platoon2DArray(e1, e2, pleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TypeId ::= FORCE LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Force2DArray(e1, e2, fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TypeId ::= COORD LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Coord2DArray(e1, e2, cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TypeId ::= SOLDIER LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Soldier2DArray(e1, e2, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TypeId ::= BARRIER LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Barrier2DArray(e1, e2, bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TypeId ::= VECTOR LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vector2DArray(e1, e2, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TypeId ::= INTEGER LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              TypeIdentifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Integer2DArray(e1, e2, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TypeId ::= LIST OF DECIMAL 
            {
              TypeIdentifier RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecimalList(dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TypeId ::= LIST OF STRING 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringList(sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TypeId ::= LIST OF BOOLEAN 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanList(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TypeId ::= LIST OF TERRAIN 
            {
              TypeIdentifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TerrainList(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TypeId ::= LIST OF GROUP 
            {
              TypeIdentifier RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GroupList(gleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TypeId ::= LIST OF PLATOON 
            {
              TypeIdentifier RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlatoonList(pleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TypeId ::= LIST OF FORCE 
            {
              TypeIdentifier RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForceList(fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TypeId ::= LIST OF COORD 
            {
              TypeIdentifier RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CoordList(cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TypeId ::= LIST OF SOLDIER 
            {
              TypeIdentifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SoldierList(sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TypeId ::= LIST OF BARRIER 
            {
              TypeIdentifier RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BarrierList(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TypeId ::= LIST OF VECTOR 
            {
              TypeIdentifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VectorList(vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TypeId ::= LIST OF INTEGER 
            {
              TypeIdentifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerList(vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TypeId ::= VOID 
            {
              TypeIdentifier RESULT =null;
		int voleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int voright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VoidT(voleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeId",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NestedId ::= Identifier DOT NestedId 
            {
              NestedIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NestedIdentifierMember(id, ni, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NestedId",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NestedId ::= Identifier LBRACE Expression RBRACE DOT NestedId 
            {
              NestedIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NestedIdentifier1DArrayMember(id, e, ni, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NestedId",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NestedId ::= Identifier LBRACE Expression RBRACE 
            {
              NestedIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NestedIdentifier1DArray(id, e, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NestedId",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NestedId ::= Identifier LBRACE Expression RBRACE LBRACE Expression RBRACE DOT NestedId 
            {
              NestedIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NestedIdentifier ni = (NestedIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NestedIdentifier2DArrayMember(id, e1, e2, ni, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NestedId",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NestedId ::= Identifier LBRACE Expression RBRACE LBRACE Expression RBRACE 
            {
              NestedIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NestedIdentifier2DArray(id, e1, e2, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NestedId",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NestedId ::= Identifier 
            {
              NestedIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NestedIdentifier(id, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NestedId",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MultEOL ::= MultEOL EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultEOL",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MultEOL ::= EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultEOL",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Identifier(id, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
