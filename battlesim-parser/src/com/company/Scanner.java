/* The following code was generated by JFlex 1.4.3 on 3/10/16 10:21 AM */

package com.company;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/10/16 10:21 AM from the specification file
 * <tt>battlesim.jflex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0,  0,  1, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
          "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\75"+
                  "\2\0\1\67\1\0\1\76\1\57\1\60\1\5\1\65\1\63\1\66"+
                  "\1\17\1\4\1\15\11\16\2\0\1\12\1\64\1\13\2\0\1\70"+
                  "\1\21\1\56\1\33\1\40\1\34\1\73\1\74\1\27\2\20\1\6"+
                  "\1\20\1\50\1\71\1\43\1\72\1\53\1\52\1\45\1\55\1\20"+
                  "\1\31\3\20\1\61\1\14\1\62\1\0\1\20\1\0\1\25\1\51"+
                  "\1\36\1\41\1\24\1\30\1\42\1\32\1\7\2\20\1\23\1\44"+
                  "\1\26\1\22\1\47\1\20\1\35\1\10\1\11\1\37\1\20\1\54"+
                  "\1\20\1\46\1\20\uff85\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\2\0\1\1\2\2\1\3\1\4\3\5\2\6\1\7"+
                  "\16\5\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
                  "\1\17\1\20\3\5\1\21\1\22\2\23\1\1\1\24"+
                  "\1\2\1\0\1\25\1\26\3\5\2\0\1\27\2\5"+
                  "\1\30\1\31\1\32\2\5\1\33\7\5\1\34\10\5"+
                  "\1\35\1\36\1\37\1\40\1\41\1\5\1\42\1\5"+
                  "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
                  "\1\53\2\0\13\5\1\54\2\5\1\55\5\5\1\56"+
                  "\4\5\1\57\1\5\1\0\2\5\1\60\13\5\1\61"+
                  "\2\5\1\62\1\5\1\63\3\5\1\64\1\5\1\0"+
                  "\2\5\1\65\1\5\1\66\1\67\15\5\1\0\3\5"+
                  "\1\70\1\71\4\5\1\72\1\5\1\73\1\74\1\75"+
                  "\1\76\1\5\1\77\1\5\1\100\1\101\1\102\1\103"+
                  "\1\104\1\5\1\105\1\5\1\106\1\107\6\5\1\110"+
                  "\4\5\1\111\3\5\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\77\0\176\0\275\0\176\0\374\0\u013b\0\u017a"+
                  "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
                  "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
                  "\0\u05a9\0\u05e8\0\u0627\0\176\0\176\0\176\0\176\0\176"+
                  "\0\176\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\176"+
                  "\0\u07e0\0\u081f\0\176\0\u085e\0\176\0\u089d\0\u08dc\0\176"+
                  "\0\176\0\u091b\0\u095a\0\u0999\0\u0237\0\u02b5\0\u02b5\0\u09d8"+
                  "\0\u0a17\0\u01b9\0\u0a56\0\u01b9\0\u0a95\0\u0ad4\0\u0b13\0\u0b52"+
                  "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u01b9\0\u0d0b"+
                  "\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\176"+
                  "\0\176\0\176\0\176\0\176\0\u0f03\0\u01b9\0\u0f42\0\176"+
                  "\0\176\0\176\0\176\0\176\0\176\0\176\0\176\0\176"+
                  "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a"+
                  "\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332"+
                  "\0\u01b9\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u01b9\0\u14ac"+
                  "\0\u14eb\0\u152a\0\u1569\0\u01b9\0\u15a8\0\u15e7\0\u1626\0\u1665"+
                  "\0\u01b9\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
                  "\0\u185d\0\u189c\0\u18db\0\u191a\0\u01b9\0\u1959\0\u1998\0\u01b9"+
                  "\0\u19d7\0\u01b9\0\u1a16\0\u1a55\0\u1a94\0\u01b9\0\u1ad3\0\u1b12"+
                  "\0\u1b51\0\u1b90\0\u01b9\0\u1bcf\0\u01b9\0\u01b9\0\u1c0e\0\u1c4d"+
                  "\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45"+
                  "\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u01b9"+
                  "\0\u01b9\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u01b9\0\u2139\0\u01b9"+
                  "\0\u01b9\0\u01b9\0\u01b9\0\u2178\0\176\0\u21b7\0\u01b9\0\u01b9"+
                  "\0\u01b9\0\u01b9\0\u01b9\0\u21f6\0\u01b9\0\u2235\0\u2274\0\u01b9"+
                  "\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c"+
                  "\0\u24ab\0\u24ea\0\u2529\0\u01b9\0\u2568\0\u25a7\0\u25e6\0\u01b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\3\1\4\2\5\1\6\1\7\1\10\2\11\1\12"+
                  "\3\3\1\13\1\14\1\15\1\11\1\16\3\11\1\17"+
                  "\1\11\1\20\1\21\1\22\1\11\1\23\1\24\3\11"+
                  "\1\25\2\11\1\26\1\11\1\27\2\11\1\30\1\11"+
                  "\1\31\1\32\2\11\1\33\1\34\1\35\1\36\1\37"+
                  "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\11"+
                  "\1\47\1\11\1\50\1\3\1\51\1\52\1\53\11\51"+
                  "\1\54\60\51\1\55\1\51\101\0\1\5\100\0\1\56"+
                  "\1\57\56\0\1\60\76\0\1\61\20\0\1\11\1\62"+
                  "\2\11\3\0\2\11\1\0\20\11\1\63\16\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\37\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\15\11\1\64"+
                  "\21\11\11\0\5\11\17\0\2\65\1\66\74\0\2\14"+
                  "\1\66\74\0\2\67\66\0\4\11\3\0\2\11\1\0"+
                  "\2\11\1\70\1\11\1\71\32\11\11\0\5\11\10\0"+
                  "\2\11\1\72\1\11\3\0\2\11\1\0\37\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\6\11\1\73"+
                  "\1\11\1\74\26\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\5\11\1\75\31\11\11\0\5\11\10\0"+
                  "\4\11\3\0\2\11\1\0\12\11\1\76\24\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\2\11\1\77"+
                  "\1\11\1\100\32\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\2\11\1\101\14\11\1\102\17\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\3\11\1\103"+
                  "\2\11\1\104\30\11\11\0\2\11\1\105\2\11\10\0"+
                  "\4\11\3\0\2\11\1\0\15\11\1\106\21\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\2\11\1\107"+
                  "\23\11\1\110\10\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\17\11\1\111\15\11\1\112\1\11\11\0"+
                  "\1\11\1\113\3\11\10\0\3\11\1\114\3\0\2\11"+
                  "\1\0\34\11\1\115\2\11\11\0\5\11\10\0\4\11"+
                  "\3\0\2\11\1\0\4\11\1\116\32\11\11\0\5\11"+
                  "\10\0\4\11\3\0\2\11\1\0\5\11\1\117\31\11"+
                  "\11\0\5\11\66\0\1\120\1\121\75\0\1\122\1\0"+
                  "\1\123\74\0\1\124\20\0\4\11\3\0\2\11\1\0"+
                  "\30\11\1\125\6\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\33\11\1\126\3\11\11\0\5\11\10\0"+
                  "\4\11\3\0\2\11\1\0\33\11\1\127\3\11\11\0"+
                  "\5\11\2\0\1\51\2\0\11\51\1\0\60\51\1\0"+
                  "\1\51\2\0\1\53\74\0\2\130\1\0\6\130\1\131"+
                  "\2\130\1\132\11\130\1\133\1\130\1\134\4\130\1\135"+
                  "\13\130\1\136\23\130\1\137\1\140\1\56\1\4\1\5"+
                  "\74\56\5\141\1\142\71\141\6\0\2\11\1\143\1\11"+
                  "\3\0\2\11\1\0\37\11\11\0\5\11\10\0\4\11"+
                  "\3\0\2\11\1\0\32\11\1\144\4\11\11\0\5\11"+
                  "\10\0\4\11\3\0\2\11\1\0\17\11\1\145\17\11"+
                  "\11\0\5\11\10\0\4\11\3\0\2\11\1\0\2\11"+
                  "\1\146\34\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\22\11\1\147\14\11\11\0\5\11\10\0\4\11"+
                  "\3\0\2\11\1\0\16\11\1\150\20\11\11\0\5\11"+
                  "\10\0\4\11\3\0\2\11\1\0\3\11\1\151\33\11"+
                  "\11\0\5\11\10\0\1\11\1\152\2\11\3\0\2\11"+
                  "\1\0\37\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\34\11\1\153\2\11\11\0\5\11\10\0\4\11"+
                  "\3\0\2\11\1\0\10\11\1\154\5\11\1\155\20\11"+
                  "\11\0\5\11\10\0\4\11\3\0\2\11\1\0\15\11"+
                  "\1\156\21\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\6\11\1\157\30\11\11\0\5\11\10\0\2\11"+
                  "\1\160\1\11\3\0\2\11\1\0\37\11\11\0\5\11"+
                  "\10\0\4\11\3\0\2\11\1\0\21\11\1\161\15\11"+
                  "\11\0\5\11\10\0\4\11\3\0\2\11\1\0\35\11"+
                  "\1\162\1\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\2\11\1\163\34\11\11\0\5\11\10\0\4\11"+
                  "\3\0\2\11\1\0\27\11\1\164\7\11\11\0\5\11"+
                  "\10\0\4\11\3\0\2\11\1\0\24\11\1\165\12\11"+
                  "\11\0\5\11\10\0\1\166\3\11\3\0\2\11\1\0"+
                  "\37\11\11\0\5\11\10\0\4\11\3\0\2\11\1\0"+
                  "\25\11\1\167\11\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\15\11\1\170\21\11\11\0\5\11\10\0"+
                  "\1\11\1\171\2\11\3\0\2\11\1\0\37\11\11\0"+
                  "\5\11\10\0\3\11\1\172\3\0\2\11\1\0\37\11"+
                  "\11\0\5\11\10\0\2\11\1\173\1\11\3\0\2\11"+
                  "\1\0\37\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\13\11\1\174\23\11\11\0\5\11\10\0\4\11"+
                  "\3\0\2\11\1\0\20\11\1\175\16\11\11\0\5\11"+
                  "\2\0\5\141\1\176\71\141\4\0\1\5\1\142\77\0"+
                  "\3\11\1\177\3\0\2\11\1\0\37\11\11\0\5\11"+
                  "\10\0\4\11\3\0\2\11\1\0\32\11\1\200\4\11"+
                  "\11\0\5\11\10\0\4\11\3\0\2\11\1\0\4\11"+
                  "\1\201\32\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\3\11\1\202\33\11\11\0\5\11\10\0\1\11"+
                  "\1\203\2\11\3\0\2\11\1\0\37\11\11\0\5\11"+
                  "\10\0\4\11\3\0\2\11\1\0\3\11\1\204\33\11"+
                  "\11\0\5\11\10\0\2\11\1\205\1\11\3\0\2\11"+
                  "\1\0\37\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\3\11\1\206\33\11\11\0\5\11\10\0\4\11"+
                  "\3\0\2\11\1\0\6\11\1\207\30\11\11\0\5\11"+
                  "\10\0\1\11\1\210\2\11\3\0\2\11\1\0\5\11"+
                  "\1\211\31\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\3\11\1\212\33\11\11\0\5\11\10\0\4\11"+
                  "\3\0\2\11\1\0\4\11\1\213\32\11\11\0\5\11"+
                  "\10\0\4\11\3\0\2\11\1\0\16\11\1\214\20\11"+
                  "\11\0\5\11\10\0\4\11\3\0\2\11\1\0\4\11"+
                  "\1\215\32\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\37\11\11\0\1\216\4\11\10\0\4\11\3\0"+
                  "\2\11\1\0\22\11\1\217\14\11\11\0\5\11\10\0"+
                  "\4\11\3\0\2\11\1\0\4\11\1\220\32\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\31\11\1\221"+
                  "\5\11\11\0\5\11\10\0\1\222\3\11\3\0\2\11"+
                  "\1\0\37\11\11\0\5\11\10\0\1\11\1\223\2\11"+
                  "\3\0\2\11\1\0\37\11\11\0\5\11\10\0\3\11"+
                  "\1\224\3\0\2\11\1\0\37\11\11\0\5\11\10\0"+
                  "\4\11\3\0\2\11\1\0\17\11\1\225\17\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\4\11\1\226"+
                  "\32\11\11\0\5\11\10\0\4\11\3\0\2\11\1\0"+
                  "\37\11\11\0\1\227\4\11\2\0\4\141\1\5\1\176"+
                  "\71\141\6\0\4\11\1\230\2\0\2\11\1\0\37\11"+
                  "\11\0\5\11\10\0\4\11\3\0\2\11\1\0\25\11"+
                  "\1\231\11\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\4\11\1\232\32\11\11\0\5\11\10\0\4\11"+
                  "\3\0\2\11\1\0\6\11\1\233\30\11\11\0\5\11"+
                  "\10\0\4\11\3\0\2\11\1\0\17\11\1\234\17\11"+
                  "\11\0\5\11\10\0\4\11\3\0\2\11\1\0\4\11"+
                  "\1\235\32\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\4\11\1\236\32\11\11\0\5\11\10\0\4\11"+
                  "\3\0\2\11\1\0\25\11\1\237\11\11\11\0\5\11"+
                  "\10\0\4\11\3\0\2\11\1\0\6\11\1\240\30\11"+
                  "\11\0\5\11\10\0\4\11\3\0\2\11\1\0\17\11"+
                  "\1\241\17\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\5\11\1\242\31\11\11\0\5\11\10\0\4\11"+
                  "\3\0\2\11\1\0\5\11\1\243\31\11\11\0\5\11"+
                  "\10\0\3\11\1\244\3\0\2\11\1\0\37\11\11\0"+
                  "\5\11\10\0\1\245\3\11\3\0\2\11\1\0\37\11"+
                  "\11\0\5\11\10\0\4\11\3\0\2\11\1\0\15\11"+
                  "\1\246\21\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\4\11\1\247\32\11\11\0\5\11\10\0\4\11"+
                  "\3\0\2\11\1\0\6\11\1\250\30\11\11\0\5\11"+
                  "\10\0\4\11\3\0\2\11\1\0\16\11\1\251\20\11"+
                  "\11\0\5\11\10\0\4\11\3\0\2\11\1\0\15\11"+
                  "\1\252\21\11\11\0\5\11\10\0\4\11\3\0\2\11"+
                  "\1\0\25\11\1\253\11\11\11\0\5\11\10\0\4\254"+
                  "\6\0\37\254\11\0\5\254\10\0\4\11\3\0\2\11"+
                  "\1\0\37\11\11\0\4\11\1\255\10\0\4\11\3\0"+
                  "\2\11\1\0\5\11\1\256\31\11\11\0\5\11\10\0"+
                  "\4\11\3\0\2\11\1\0\21\11\1\257\15\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\2\11\1\260"+
                  "\34\11\11\0\5\11\10\0\4\11\3\0\2\11\1\0"+
                  "\4\11\1\261\32\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\3\11\1\262\33\11\11\0\5\11\10\0"+
                  "\4\11\3\0\2\11\1\0\15\11\1\263\21\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\16\11\1\264"+
                  "\20\11\11\0\5\11\10\0\1\11\1\265\2\11\3\0"+
                  "\2\11\1\0\37\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\32\11\1\266\4\11\11\0\5\11\10\0"+
                  "\4\11\3\0\2\11\1\0\5\11\1\267\31\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\15\11\1\270"+
                  "\21\11\11\0\5\11\10\0\4\11\3\0\2\11\1\0"+
                  "\22\11\1\271\14\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\12\11\1\272\24\11\11\0\5\11\10\0"+
                  "\4\11\3\0\2\11\1\0\6\11\1\273\30\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\20\11\1\274"+
                  "\16\11\11\0\5\11\10\0\4\254\1\0\1\275\1\0"+
                  "\2\254\1\0\37\254\11\0\5\254\10\0\4\11\3\0"+
                  "\2\11\1\0\37\11\11\0\1\276\4\11\10\0\4\11"+
                  "\3\0\2\11\1\0\6\11\1\277\30\11\11\0\5\11"+
                  "\10\0\4\11\3\0\2\11\1\0\4\11\1\300\32\11"+
                  "\11\0\5\11\10\0\3\11\1\301\3\0\2\11\1\0"+
                  "\37\11\11\0\5\11\10\0\4\11\3\0\2\11\1\0"+
                  "\4\11\1\302\32\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\12\11\1\303\24\11\11\0\5\11\10\0"+
                  "\4\11\3\0\2\11\1\0\2\11\1\304\34\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\24\11\1\305"+
                  "\12\11\11\0\5\11\10\0\4\11\3\0\2\11\1\0"+
                  "\33\11\1\306\3\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\30\11\1\307\6\11\11\0\5\11\10\0"+
                  "\4\11\3\0\2\11\1\0\6\11\1\310\30\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\25\11\1\311"+
                  "\11\11\11\0\5\11\10\0\4\11\3\0\2\11\1\0"+
                  "\20\11\1\312\16\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\37\11\11\0\4\11\1\313\10\0\4\11"+
                  "\3\0\2\11\1\0\37\11\11\0\2\11\1\314\2\11"+
                  "\10\0\4\11\3\0\2\11\1\0\37\11\11\0\1\315"+
                  "\4\11\10\0\4\11\3\0\2\11\1\0\35\11\1\316"+
                  "\1\11\11\0\5\11\10\0\4\11\3\0\2\11\1\0"+
                  "\30\11\1\317\6\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\37\11\11\0\1\320\4\11\10\0\4\11"+
                  "\3\0\2\11\1\0\20\11\1\321\16\11\11\0\5\11"+
                  "\10\0\1\322\3\11\3\0\2\11\1\0\37\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\37\11\11\0"+
                  "\2\11\1\323\2\11\10\0\4\11\3\0\2\11\1\0"+
                  "\32\11\1\324\4\11\11\0\5\11\10\0\4\11\3\0"+
                  "\2\11\1\0\35\11\1\325\1\11\11\0\5\11\10\0"+
                  "\4\11\3\0\2\11\1\0\37\11\11\0\1\326\4\11"+
                  "\10\0\1\327\3\11\3\0\2\11\1\0\37\11\11\0"+
                  "\5\11\10\0\4\11\3\0\2\11\1\0\32\11\1\330"+
                  "\4\11\11\0\5\11\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9765];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
          "Unkown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\2\0\1\11\1\1\1\11\26\1\6\11\6\1\1\11"+
                  "\2\1\1\11\1\1\1\11\1\1\1\0\2\11\3\1"+
                  "\2\0\31\1\5\11\3\1\11\11\2\0\33\1\1\0"+
                  "\31\1\1\0\23\1\1\0\20\1\1\11\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }

  /* This is required, as ZZAtEOF is private */
  public boolean getZZAtEOF() {
    return zzAtEOF;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
              zzBuffer, 0,
              zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }
    }

    // numRead < 0
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
           zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
          case '\u000B':
          case '\u000C':
          case '\u0085':
          case '\u2028':
          case '\u2029':
            yyline++;
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 70:
        { return symbol(Token.LESSTHAN);
        }
        case 75: break;
        case 1:
        { throw new RuntimeException("Illegal character \""+yytext()+"\" at line "+yyline+", column "+yycolumn);
        }
        case 76: break;
        case 46:
        { return symbol(Token.NOT);
        }
        case 77: break;
        case 17:
        { yybegin(STRING); string.setLength(0);
        }
        case 78: break;
        case 72:
        { return symbol(Token.GREATERTHAN);
        }
        case 79: break;
        case 26:
        { return symbol(Token.IF);
        }
        case 80: break;
        case 71:
        { return symbol(Token.FUNCTION);
        }
        case 81: break;
        case 21:
        { return symbol(Token.DIVEQ);
        }
        case 82: break;
        case 28:
        { return symbol(Token.TO);
        }
        case 83: break;
        case 5:
        { return symbol(Token.IDENTIFIER, yytext());
        }
        case 84: break;
        case 57:
        { return symbol(Token.DEFINE);
        }
        case 85: break;
        case 14:
        { return symbol(Token.PLUS);
        }
        case 86: break;
        case 36:
        { string.append( '\t' );
        }
        case 87: break;
        case 66:
        { return symbol(Token.DEFAULT);
        }
        case 88: break;
        case 45:
        { return symbol(Token.END);
        }
        case 89: break;
        case 68:
        { return symbol(Token.FOREACH);
        }
        case 90: break;
        case 65:
        { return symbol(Token.INCLUDE);
        }
        case 91: break;
        case 31:
        { return symbol(Token.MINUSEQ);
        }
        case 92: break;
        case 74:
        { return symbol(Token.GREATERTHANEQUALS);
        }
        case 93: break;
        case 6:
        { return symbol(Token.INTEGER_LITERAL, new Integer(yytext()));
        }
        case 94: break;
        case 29:
        { return symbol(Token.PLUSEQ);
        }
        case 95: break;
        case 38:
        { string.append( '\n' );
        }
        case 96: break;
        case 15:
        { return symbol(Token.MINUS);
        }
        case 97: break;
        case 60:
        { return symbol(Token.STRING);
        }
        case 98: break;
        case 11:
        { return symbol(Token.RBRACE);
        }
        case 99: break;
        case 30:
        { return symbol(Token.PLUSPLUS);
        }
        case 100: break;
        case 32:
        { return symbol(Token.MINUSMINUS);
        }
        case 101: break;
        case 51:
        { return symbol(Token.NULL_LITERAL);
        }
        case 102: break;
        case 73:
        { return symbol(Token.LESSTHANEQUALS);
        }
        case 103: break;
        case 62:
        { return symbol(Token.RETURN);
        }
        case 104: break;
        case 24:
        { return symbol(Token.AS);
        }
        case 105: break;
        case 23:
        { return symbol(Token.NUMBER_LITERAL, new Double(yytext()));
        }
        case 106: break;
        case 2:
        { /* nothing happens here, maybe */
        }
        case 107: break;
        case 35:
        { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
        }
        case 108: break;
        case 55:
        { return symbol(Token.WHILE);
        }
        case 109: break;
        case 10:
        { return symbol(Token.LBRACE);
        }
        case 110: break;
        case 40:
        { string.append( '\r' );
        }
        case 111: break;
        case 52:
        { return symbol(Token.CASE);
        }
        case 112: break;
        case 54:
        { return symbol(Token.BOOLEAN_LITERAL, false);
        }
        case 113: break;
        case 12:
        { return symbol(Token.COMMA);
        }
        case 114: break;
        case 41:
        { string.append( '\b' );
        }
        case 115: break;
        case 44:
        { return symbol(Token.FOR);
        }
        case 116: break;
        case 19:
        { throw new RuntimeException("Unterminated string at end of line");
        }
        case 117: break;
        case 50:
        { return symbol(Token.TYPE);
        }
        case 118: break;
        case 42:
        { string.append( '\"' );
        }
        case 119: break;
        case 13:
        { return symbol(Token.EQ);
        }
        case 120: break;
        case 48:
        { return symbol(Token.BOOLEAN_LITERAL, true);
        }
        case 121: break;
        case 27:
        { return symbol(Token.DO);
        }
        case 122: break;
        case 9:
        { return symbol(Token.RPAREN);
        }
        case 123: break;
        case 20:
        { yybegin(YYINITIAL); return symbol(Token.STRING_LITERAL, string.toString());
        }
        case 124: break;
        case 43:
        { string.append( '\'' );
        }
        case 125: break;
        case 37:
        { string.append( '\\' );
        }
        case 126: break;
        case 3:
        { return symbol(Token.DIV);
        }
        case 127: break;
        case 4:
        { return symbol(Token.MULT);
        }
        case 128: break;
        case 22:
        { return symbol(Token.MULTEQ);
        }
        case 129: break;
        case 16:
        { return symbol(Token.MOD);
        }
        case 130: break;
        case 69:
        { return symbol(Token.PROGRAM);
        }
        case 131: break;
        case 33:
        { return symbol(Token.MODEQ);
        }
        case 132: break;
        case 59:
        { return symbol(Token.NUMBER);
        }
        case 133: break;
        case 49:
        { return symbol(Token.ELSE);
        }
        case 134: break;
        case 58:
        { return symbol(Token.EQUALS);
        }
        case 135: break;
        case 39:
        { string.append( '\f' );
        }
        case 136: break;
        case 67:
        { return symbol(Token.DECLARE);
        }
        case 137: break;
        case 25:
        { return symbol(Token.IN);
        }
        case 138: break;
        case 53:
        { return symbol(Token.BEGIN);
        }
        case 139: break;
        case 34:
        { return symbol(Token.OR);
        }
        case 140: break;
        case 18:
        { string.append( yytext() );
        }
        case 141: break;
        case 8:
        { return symbol(Token.LPAREN);
        }
        case 142: break;
        case 64:
        { return symbol(Token.BOOLEAN);
        }
        case 143: break;
        case 7:
        { return symbol(Token.DOT);
        }
        case 144: break;
        case 56:
        { return symbol(Token.DOWNTO);
        }
        case 145: break;
        case 47:
        { return symbol(Token.AND);
        }
        case 146: break;
        case 63:
        { return symbol(Token.LIST);
        }
        case 147: break;
        case 61:
        { return symbol(Token.SWITCH);
        }
        case 148: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            {
              return symbol(Token.EOF);
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
