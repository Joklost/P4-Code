
/*
 * End of line skal repræsenteres på en eller anden måde
 */
////////////////////////////////////////////////////////////////////////////////
Start               : Includes Defines TypeDcls FunctionDcls Program FunctionDcls
Includes            : Include Includes
                    |
Include             : "Include (" HeaderId ")"    // Header-filer indeholder TypeDcls og FunctionDcls
Defines             : Define Defines
                    |
Define              : "Define " Id " " D1
D1                  : Number
                    | String
                    | Boolean
TypeDcls            : TypeDcl TypeDcls
                    |
TypeDcl             : "Type " Id MemberDcl MemberDcls FunctionDcls " End Type"
MemberDcls          : MemberDcl MemberDcls
                    |
MemberDcl           : Id " as " TypeId
FunctionDcls        : FunctionDcl FunctionDcls
                    |
FunctionDcl         : "Function " TypeId Id "(" Params ")" Stmts " End Function"
                    | "Function " TypeId Id "()" Stmts " End Function"
                    | "Function " Id "(" Params ")" Stmts " End Function"
                    | "Function " Id "()" Stmts " End Function"
Params              : MemberDcl ", " Params
                    | MemberDcl
Program             : "Begin Program " Stmts " End Program"
////////////////////////////////////////////////////////////////////////////////
Stmts               : Stmt Stmts
                    |
Stmt                : Dcl
                    | Assignment
                    | IfStmt
                    | LoopStmt
                    | SwitchStmt
                    | "Return " Arithmetic
                    | "Return " Variable
                    | "Return "
/* *** potential horizontal ambiguity: Stmts[#1]: Stmt <--> Stmts */
////////////////////////////////////////////////////////////////////////////////
IfStmt              : "If " Arithmetic " Then " Stmts V1
V1                  : " End If"
                    | " Else " Stmts " End If"
                    | " Else" IfStmt
/* *** potential horizontal ambiguity: IfStmt[#1]: "If " Arithmetic " Then " Stmts <--> V1 */
////////////////////////////////////////////////////////////////////////////////
SwitchStmt          : "Switch " Variable SwitchCases SwitchDefault " End Switch'"
SwitchCases         : SwitchCase SwitchCases
                    |
SwitchCase          : "Case " Variable Stmts
SwitchDefault       : "Default " Stmts
                    |
/* *** potential horizontal ambiguity: SwitchStmt[#1]: "Switch " Variable SwitchCases <--> S1
 * *** potential horizontal ambiguity: SwitchCases[#1]: SwitchCase <--> SwitchCases */
////////////////////////////////////////////////////////////////////////////////
Arithmetic          : "(" Arithmetic ")"
                    | Variable A
                    | LeftUnOperator Variable
A                   : BinOperator Variable
                    | UnOperator
Assignment          : Id AssignOperator RightAssign
AssignOperator      : " = "
                    | " += "
                    | " -= "
                    | " %= "
                    | " *= "
                    | " /= "
RightAssign         : Arithmetic
                    | Variable
                    | FunctionCall
FunctionCall        : Id "(" Arguments ")"
                    | Id "()"
Arguments           : Variable ", " Arguments
                    | Arithmetic ", " Arguments
                    | Variable
                    | Arithmetic
LoopStmt            : WhileStmt
                    | ForStmt
                    | ForeachStmt
WhileStmt           : "While " Arithmetic " Do " Stmts " End While"
ForeachStmt         : "Foreach " TypeId " " Id " In " FE1
FE1                 : "List<" TypeId "> " FE2
                    | TypeId FE2
FE2                 : " Do " Stmts " End Foreach"
ForStmt             : "For " Integer " To " Integer " Do " Stmts " End For"
                    | "For " Integer " DownTo " Integer " Do " Stmts " End For"
BinOperator         : " * "
                    | " + "
                    | " / "
                    | " - "
                    | " % "
                    | LogicOperator
                    | RelationelOperator
LogicOperator       : " AND "
                    | " OR "
RelationelOperator  : " EQUALS "
                    | " GREATERTHAN "
                    | " LESSTHAN "
                    | " GREATERTHANEQUALS "
                    | " LESSERTHANEQUALS "
UnOperator          : "++"
                    | "--"
LeftUnOperator      : " NOT"
                    | " -"
                    | UnOperator
Variable            : Id
                    | Number
                    | String
                    | Boolean
Dcl                 : "Declare" Id "as" TypeId    // Declare units as Unit[90]
TypeId              : Id
                    | "Number"
                    | "String"
                    | "Boolean"
                    | "List<" TypeId ">"          // List<Unit>
                    | TypeId "[" Integer "]"      // Er det nemmere at forstå uden SKULLE allokere plads
NestedId            : "." Id
Id                  : "id"
                    | "id" NestedId
                    | Id "[" Integer "]"        // Array og List<T> tilgang
HeaderId            : "hid"
Number              : "num"
String              : "str"
Boolean             : "bool"
Integer             : "int"

////////////////////////////////////////////////////////////////////////////////
/* Regular Expressions - testet på https://regex101.com/   // Nedenstående er keywords i sproget
 * Id                  : ^(?=[a-zA-Z_]+[a-zA-Z0-9_]*)(?!.*(AND|OR|NOT|EQUALS|GREATERTHAN|GREATERTHANEQUALS|LESSTHAN|LESSTHANEQUALS|If|While|Do|Foreach|Function|End|Begin|Program|For|Type|as|Number|String|Boolean|Declare|In|Return|ElseIf|Else|Wait|List|Include|Switch|Default|Case)).+$
 * HeaderId            : ^.*\.(bs)$
 * Number              : ^[+-]?[0-9]*\.?[0-9]+$
 * String              : ^.*$
 * Boolean             : ^(true|false)$
 * Integers            : ^[0-9]+$
 * RegEx'en virker ikke med https://services.brics.dk/java/grammar/demo.html
 * hvor der er testet for ambiguity.                                          */
////////////////////////////////////////////////////////////////////////////////
