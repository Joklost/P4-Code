/* The following code was generated by JFlex 1.4.3 on 3/9/16 3:16 PM */

include java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/9/16 3:16 PM from the specification file
 * <tt>battlesim.jflex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\73"+
    "\2\0\1\65\1\0\1\74\1\55\1\56\1\5\1\63\1\61\1\64"+
    "\1\11\1\4\1\7\11\10\3\0\1\62\3\0\1\66\1\13\1\54"+
    "\1\26\1\34\1\27\1\71\1\72\1\21\2\12\1\51\1\12\1\45"+
    "\1\67\1\37\1\70\1\50\1\47\1\41\1\53\1\12\1\23\3\12"+
    "\1\57\1\6\1\60\1\0\1\12\1\0\1\17\1\46\1\31\1\35"+
    "\1\16\1\22\1\36\1\24\1\25\2\12\1\15\1\40\1\20\1\14"+
    "\1\43\1\12\1\30\1\44\1\33\1\32\1\12\1\52\1\12\1\42"+
    "\1\12\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\2\5\1\6\21\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\3\7\1\21\1\22\2\23\1\1\1\24\1\2"+
    "\1\0\1\25\1\26\2\0\1\27\2\7\1\30\1\31"+
    "\1\32\2\7\1\33\22\7\1\34\1\35\1\36\1\37"+
    "\1\40\1\7\1\41\1\7\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\2\0\7\7\1\53"+
    "\3\7\1\54\5\7\1\55\6\7\1\56\1\7\1\0"+
    "\12\7\1\57\1\60\2\7\1\61\1\7\1\62\3\7"+
    "\1\63\1\7\1\64\2\7\1\65\1\7\1\66\1\67"+
    "\20\7\1\70\3\7\1\71\1\7\1\72\1\73\1\74"+
    "\1\75\2\7\1\76\1\77\1\100\1\101\1\102\1\7"+
    "\1\103\2\7\1\104\1\105\6\7\1\106\4\7\1\107"+
    "\3\7\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\172\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\172\0\172\0\172\0\172\0\172"+
    "\0\172\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\172"+
    "\0\u07a0\0\u07dd\0\172\0\u081a\0\172\0\u0857\0\u0894\0\172"+
    "\0\172\0\u016e\0\u01e8\0\u01e8\0\u08d1\0\u090e\0\u0225\0\u094b"+
    "\0\u0225\0\u0988\0\u09c5\0\u0225\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\172\0\172"+
    "\0\172\0\172\0\172\0\u0e4c\0\u0225\0\u0e89\0\172\0\172"+
    "\0\172\0\172\0\172\0\172\0\172\0\172\0\172\0\u0ec6"+
    "\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u0225\0\u11df\0\u121c\0\u1259"+
    "\0\u1296\0\u12d3\0\u0225\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404"+
    "\0\u1441\0\u0225\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af"+
    "\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u0225\0\u0225"+
    "\0\u175a\0\u1797\0\u0225\0\u17d4\0\u0225\0\u1811\0\u184e\0\u188b"+
    "\0\u0225\0\u18c8\0\u0225\0\u1905\0\u1942\0\u0225\0\u197f\0\u0225"+
    "\0\u0225\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12"+
    "\0\u1d4f\0\u0225\0\u1d8c\0\u1dc9\0\u1e06\0\u0225\0\u1e43\0\u0225"+
    "\0\u0225\0\u0225\0\u0225\0\u1e80\0\u1ebd\0\u0225\0\u0225\0\u0225"+
    "\0\u0225\0\u0225\0\u1efa\0\u0225\0\u1f37\0\u1f74\0\u0225\0\u1fb1"+
    "\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199"+
    "\0\u21d6\0\u2213\0\u2250\0\u0225\0\u228d\0\u22ca\0\u2307\0\u0225";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\13\1\14\3\13\1\15\1\13\1\16\1\17"+
    "\1\20\2\13\1\21\1\22\3\13\1\23\1\24\2\13"+
    "\1\25\1\13\1\26\3\13\1\27\1\13\1\30\1\31"+
    "\1\32\2\13\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\13\1\47"+
    "\1\13\1\50\1\3\1\51\1\52\1\53\3\51\1\54"+
    "\64\51\1\55\1\51\77\0\1\5\76\0\1\56\1\57"+
    "\54\0\1\60\74\0\1\61\21\0\2\62\1\63\72\0"+
    "\2\11\1\63\72\0\2\64\73\0\2\13\1\0\43\13"+
    "\11\0\5\13\11\0\2\13\1\0\2\13\1\65\1\13"+
    "\1\66\36\13\11\0\5\13\11\0\2\13\1\0\32\13"+
    "\1\67\10\13\11\0\5\13\11\0\2\13\1\0\6\13"+
    "\1\70\1\13\1\71\32\13\11\0\5\13\11\0\2\13"+
    "\1\0\5\13\1\72\35\13\11\0\5\13\11\0\2\13"+
    "\1\0\12\13\1\73\30\13\11\0\5\13\11\0\2\13"+
    "\1\0\2\13\1\74\1\13\1\75\36\13\11\0\5\13"+
    "\11\0\2\13\1\0\2\13\1\76\15\13\1\77\22\13"+
    "\11\0\5\13\11\0\2\13\1\0\16\13\1\100\24\13"+
    "\11\0\5\13\11\0\2\13\1\0\3\13\1\101\2\13"+
    "\1\102\34\13\11\0\2\13\1\103\2\13\11\0\2\13"+
    "\1\0\16\13\1\104\24\13\11\0\5\13\11\0\2\13"+
    "\1\0\30\13\1\105\12\13\11\0\5\13\11\0\2\13"+
    "\1\0\20\13\1\106\20\13\1\107\1\13\11\0\1\13"+
    "\1\110\3\13\11\0\2\13\1\0\21\13\1\111\16\13"+
    "\1\112\2\13\11\0\5\13\11\0\2\13\1\0\4\13"+
    "\1\113\36\13\11\0\5\13\11\0\2\13\1\0\13\13"+
    "\1\114\6\13\1\115\20\13\11\0\5\13\11\0\2\13"+
    "\1\0\5\13\1\116\35\13\11\0\5\13\64\0\1\117"+
    "\1\120\73\0\1\121\1\0\1\122\72\0\1\123\21\0"+
    "\2\13\1\0\33\13\1\124\7\13\11\0\5\13\11\0"+
    "\2\13\1\0\36\13\1\125\4\13\11\0\5\13\11\0"+
    "\2\13\1\0\36\13\1\126\4\13\11\0\5\13\2\0"+
    "\1\51\2\0\3\51\1\0\64\51\1\0\1\51\2\0"+
    "\1\53\72\0\2\127\1\0\3\127\1\130\11\127\1\131"+
    "\1\127\1\132\5\127\1\133\2\127\1\134\12\127\1\135"+
    "\24\127\1\136\1\137\1\56\1\4\1\5\72\56\5\140"+
    "\1\141\67\140\7\0\2\13\1\0\2\13\1\142\40\13"+
    "\11\0\5\13\11\0\2\13\1\0\24\13\1\143\16\13"+
    "\11\0\5\13\11\0\2\13\1\0\17\13\1\144\23\13"+
    "\11\0\5\13\11\0\2\13\1\0\3\13\1\145\37\13"+
    "\11\0\5\13\11\0\2\13\1\0\13\13\1\146\27\13"+
    "\11\0\5\13\11\0\2\13\1\0\10\13\1\147\6\13"+
    "\1\150\23\13\11\0\5\13\11\0\2\13\1\0\16\13"+
    "\1\151\24\13\11\0\5\13\11\0\2\13\1\0\6\13"+
    "\1\152\34\13\11\0\5\13\11\0\2\13\1\0\20\13"+
    "\1\153\22\13\11\0\5\13\11\0\2\13\1\0\32\13"+
    "\1\154\10\13\11\0\5\13\11\0\2\13\1\0\23\13"+
    "\1\155\17\13\11\0\5\13\11\0\2\13\1\0\41\13"+
    "\1\156\1\13\11\0\5\13\11\0\2\13\1\0\2\13"+
    "\1\157\40\13\11\0\5\13\11\0\2\13\1\0\31\13"+
    "\1\160\11\13\11\0\5\13\11\0\2\13\1\0\26\13"+
    "\1\161\14\13\11\0\5\13\11\0\2\13\1\0\37\13"+
    "\1\162\3\13\11\0\5\13\11\0\2\13\1\0\27\13"+
    "\1\163\13\13\11\0\5\13\11\0\2\13\1\0\16\13"+
    "\1\164\24\13\11\0\5\13\11\0\2\13\1\0\13\13"+
    "\1\165\27\13\11\0\5\13\11\0\2\13\1\0\21\13"+
    "\1\166\21\13\11\0\5\13\11\0\2\13\1\0\32\13"+
    "\1\167\10\13\11\0\5\13\11\0\2\13\1\0\35\13"+
    "\1\170\5\13\11\0\5\13\11\0\2\13\1\0\32\13"+
    "\1\171\10\13\11\0\5\13\11\0\2\13\1\0\14\13"+
    "\1\172\26\13\11\0\5\13\11\0\2\13\1\0\22\13"+
    "\1\173\20\13\11\0\5\13\2\0\5\140\1\174\67\140"+
    "\4\0\1\5\1\141\76\0\2\13\1\0\3\13\1\175"+
    "\37\13\11\0\5\13\11\0\2\13\1\0\13\13\1\176"+
    "\27\13\11\0\5\13\11\0\2\13\1\0\3\13\1\177"+
    "\37\13\11\0\5\13\11\0\2\13\1\0\32\13\1\200"+
    "\10\13\11\0\5\13\11\0\2\13\1\0\3\13\1\201"+
    "\37\13\11\0\5\13\11\0\2\13\1\0\5\13\1\202"+
    "\5\13\1\203\27\13\11\0\5\13\11\0\2\13\1\0"+
    "\3\13\1\204\37\13\11\0\5\13\11\0\2\13\1\0"+
    "\4\13\1\205\36\13\11\0\5\13\11\0\2\13\1\0"+
    "\17\13\1\206\23\13\11\0\5\13\11\0\2\13\1\0"+
    "\4\13\1\207\36\13\11\0\5\13\11\0\2\13\1\0"+
    "\4\13\1\210\36\13\11\0\5\13\11\0\2\13\1\0"+
    "\43\13\11\0\1\211\4\13\11\0\2\13\1\0\24\13"+
    "\1\212\16\13\11\0\5\13\11\0\2\13\1\0\4\13"+
    "\1\213\36\13\11\0\5\13\11\0\2\13\1\0\34\13"+
    "\1\214\6\13\11\0\5\13\11\0\2\13\1\0\37\13"+
    "\1\215\3\13\11\0\5\13\11\0\2\13\1\0\13\13"+
    "\1\216\27\13\11\0\5\13\11\0\2\13\1\0\21\13"+
    "\1\217\21\13\11\0\5\13\11\0\2\13\1\0\20\13"+
    "\1\220\22\13\11\0\5\13\11\0\2\13\1\0\21\13"+
    "\1\221\21\13\11\0\5\13\11\0\2\13\1\0\35\13"+
    "\1\222\5\13\11\0\5\13\11\0\2\13\1\0\4\13"+
    "\1\223\36\13\11\0\5\13\11\0\2\13\1\0\43\13"+
    "\11\0\1\224\4\13\2\0\4\140\1\5\1\174\67\140"+
    "\7\0\2\13\1\0\4\13\1\225\36\13\11\0\5\13"+
    "\11\0\2\13\1\0\6\13\1\226\34\13\11\0\5\13"+
    "\11\0\2\13\1\0\20\13\1\227\22\13\11\0\5\13"+
    "\11\0\2\13\1\0\4\13\1\230\36\13\11\0\5\13"+
    "\11\0\2\13\1\0\4\13\1\231\36\13\11\0\5\13"+
    "\11\0\2\13\1\0\20\13\1\232\22\13\11\0\5\13"+
    "\11\0\2\13\1\0\6\13\1\233\34\13\11\0\5\13"+
    "\11\0\2\13\1\0\5\13\1\234\35\13\11\0\5\13"+
    "\11\0\2\13\1\0\5\13\1\235\35\13\11\0\5\13"+
    "\11\0\2\13\1\0\21\13\1\236\21\13\11\0\5\13"+
    "\11\0\2\13\1\0\37\13\1\237\3\13\11\0\5\13"+
    "\11\0\2\13\1\0\16\13\1\240\24\13\11\0\5\13"+
    "\11\0\2\13\1\0\4\13\1\241\36\13\11\0\5\13"+
    "\11\0\2\13\1\0\6\13\1\242\34\13\11\0\5\13"+
    "\11\0\2\13\1\0\17\13\1\243\23\13\11\0\5\13"+
    "\11\0\2\13\1\0\16\13\1\244\24\13\11\0\5\13"+
    "\11\0\2\13\1\0\27\13\1\245\13\13\11\0\5\13"+
    "\11\0\2\13\1\0\27\13\1\246\13\13\11\0\5\13"+
    "\11\0\2\13\1\0\5\13\1\247\35\13\11\0\5\13"+
    "\11\0\2\13\1\0\23\13\1\250\17\13\11\0\5\13"+
    "\11\0\2\13\1\0\3\13\1\251\37\13\11\0\5\13"+
    "\11\0\2\13\1\0\4\13\1\252\36\13\11\0\5\13"+
    "\11\0\2\13\1\0\16\13\1\253\24\13\11\0\5\13"+
    "\11\0\2\13\1\0\17\13\1\254\23\13\11\0\5\13"+
    "\11\0\2\13\1\0\13\13\1\255\27\13\11\0\5\13"+
    "\11\0\2\13\1\0\35\13\1\256\5\13\11\0\5\13"+
    "\11\0\2\13\1\0\5\13\1\257\35\13\11\0\5\13"+
    "\11\0\2\13\1\0\16\13\1\260\24\13\11\0\5\13"+
    "\11\0\2\13\1\0\24\13\1\261\16\13\11\0\5\13"+
    "\11\0\2\13\1\0\12\13\1\262\30\13\11\0\5\13"+
    "\11\0\2\13\1\0\6\13\1\263\34\13\11\0\5\13"+
    "\11\0\2\13\1\0\43\13\11\0\4\13\1\264\11\0"+
    "\2\13\1\0\22\13\1\265\20\13\11\0\5\13\11\0"+
    "\2\13\1\0\6\13\1\266\34\13\11\0\5\13\11\0"+
    "\2\13\1\0\4\13\1\267\36\13\11\0\5\13\11\0"+
    "\2\13\1\0\21\13\1\270\21\13\11\0\5\13\11\0"+
    "\2\13\1\0\4\13\1\271\36\13\11\0\5\13\11\0"+
    "\2\13\1\0\12\13\1\272\30\13\11\0\5\13\11\0"+
    "\2\13\1\0\2\13\1\273\40\13\11\0\5\13\11\0"+
    "\2\13\1\0\26\13\1\274\14\13\11\0\5\13\11\0"+
    "\2\13\1\0\43\13\11\0\1\275\4\13\11\0\2\13"+
    "\1\0\36\13\1\276\4\13\11\0\5\13\11\0\2\13"+
    "\1\0\6\13\1\277\34\13\11\0\5\13\11\0\2\13"+
    "\1\0\33\13\1\300\7\13\11\0\5\13\11\0\2\13"+
    "\1\0\27\13\1\301\13\13\11\0\5\13\11\0\2\13"+
    "\1\0\22\13\1\302\20\13\11\0\5\13\11\0\2\13"+
    "\1\0\43\13\11\0\4\13\1\303\11\0\2\13\1\0"+
    "\43\13\11\0\2\13\1\304\2\13\11\0\2\13\1\0"+
    "\43\13\11\0\1\305\4\13\11\0\2\13\1\0\41\13"+
    "\1\306\1\13\11\0\5\13\11\0\2\13\1\0\33\13"+
    "\1\307\7\13\11\0\5\13\11\0\2\13\1\0\43\13"+
    "\11\0\1\310\4\13\11\0\2\13\1\0\22\13\1\311"+
    "\20\13\11\0\5\13\11\0\2\13\1\0\37\13\1\312"+
    "\3\13\11\0\5\13\11\0\2\13\1\0\43\13\11\0"+
    "\2\13\1\313\2\13\11\0\2\13\1\0\35\13\1\314"+
    "\5\13\11\0\5\13\11\0\2\13\1\0\41\13\1\315"+
    "\1\13\11\0\5\13\11\0\2\13\1\0\43\13\11\0"+
    "\1\316\4\13\11\0\2\13\1\0\37\13\1\317\3\13"+
    "\11\0\5\13\11\0\2\13\1\0\35\13\1\320\5\13"+
    "\11\0\5\13\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9028];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\26\1\6\11\6\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\0\2\11\2\0"+
    "\33\1\5\11\3\1\11\11\2\0\32\1\1\0\124\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
      StringBuffer string = new StringBuffer();

      private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
      }
      private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
      }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return symbol(sym.DIV);
          }
        case 73: break;
        case 49: 
          { return symbol(sym.TYPE);
          }
        case 74: break;
        case 1: 
          { throw new RuntimeException("Illegal character \""+yytext()+"\" at line "+yyline+", column "+yycolumn);
          }
        case 75: break;
        case 72: 
          { return symbol(sym.GREATERTHANEQUALS);
          }
        case 76: break;
        case 16: 
          { return symbol(sym.MOD);
          }
        case 77: break;
        case 17: 
          { yybegin(STRING); string.setLength(0);
          }
        case 78: break;
        case 25: 
          { return symbol(sym.IN);
          }
        case 79: break;
        case 50: 
          { return symbol(sym.NULL_LITERAL);
          }
        case 80: break;
        case 60: 
          { return symbol(sym.SWITCH);
          }
        case 81: break;
        case 4: 
          { return symbol(sym.MULT);
          }
        case 82: break;
        case 33: 
          { return symbol(sym.OR);
          }
        case 83: break;
        case 8: 
          { return symbol(sym.LPAREN);
          }
        case 84: break;
        case 15: 
          { return symbol(sym.MINUS);
          }
        case 85: break;
        case 39: 
          { string.append( '\t' );
          }
        case 86: break;
        case 48: 
          { return symbol(sym.ELSE);
          }
        case 87: break;
        case 67: 
          { return symbol(sym.PROGRAM);
          }
        case 88: break;
        case 6: 
          { return symbol(sym.DOT);
          }
        case 89: break;
        case 70: 
          { return symbol(sym.GREATERTHAN);
          }
        case 90: break;
        case 46: 
          { return symbol(sym.AND);
          }
        case 91: break;
        case 36: 
          { string.append( '\n' );
          }
        case 92: break;
        case 26: 
          { return symbol(sym.IF);
          }
        case 93: break;
        case 56: 
          { return symbol(sym.DEFINE);
          }
        case 94: break;
        case 45: 
          { return symbol(sym.NOT);
          }
        case 95: break;
        case 20: 
          { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
          }
        case 96: break;
        case 51: 
          { return symbol(sym.LIST);
          }
        case 97: break;
        case 55: 
          { return symbol(sym.WHILE);
          }
        case 98: break;
        case 65: 
          { return symbol(sym.DECLARE);
          }
        case 99: break;
        case 12: 
          { return symbol(sym.COMMA);
          }
        case 100: break;
        case 23: 
          { return symbol(sym.NUMBER_LITERAL, new Double(yytext()));
          }
        case 101: break;
        case 2: 
          { /* nothing happens here, maybe */
          }
        case 102: break;
        case 47: 
          { return symbol(sym.BOOLEAN_LITERAL, true);
          }
        case 103: break;
        case 62: 
          { return symbol(sym.BOOLEAN);
          }
        case 104: break;
        case 28: 
          { return symbol(sym.PLUSEQ);
          }
        case 105: break;
        case 59: 
          { return symbol(sym.STRING);
          }
        case 106: break;
        case 11: 
          { return symbol(sym.RBRACE);
          }
        case 107: break;
        case 44: 
          { return symbol(sym.END);
          }
        case 108: break;
        case 34: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 109: break;
        case 14: 
          { return symbol(sym.PLUS);
          }
        case 110: break;
        case 38: 
          { string.append( '\r' );
          }
        case 111: break;
        case 40: 
          { string.append( '\b' );
          }
        case 112: break;
        case 5: 
          { return symbol(sym.INTEGER_LITERAL, new Integer(yytext()));
          }
        case 113: break;
        case 53: 
          { return symbol(sym.BEGIN);
          }
        case 114: break;
        case 19: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 115: break;
        case 69: 
          { return symbol(sym.LESSTHAN);
          }
        case 116: break;
        case 41: 
          { string.append( '\"' );
          }
        case 117: break;
        case 32: 
          { return symbol(sym.MODEQ);
          }
        case 118: break;
        case 61: 
          { return symbol(sym.RETURN);
          }
        case 119: break;
        case 42: 
          { string.append( '\'' );
          }
        case 120: break;
        case 68: 
          { return symbol(sym.FUNCTION);
          }
        case 121: break;
        case 35: 
          { string.append( '\\' );
          }
        case 122: break;
        case 54: 
          { return symbol(sym.BOOLEAN_LITERAL, false);
          }
        case 123: break;
        case 24: 
          { return symbol(sym.AS);
          }
        case 124: break;
        case 66: 
          { return symbol(sym.FOREACH);
          }
        case 125: break;
        case 10: 
          { return symbol(sym.LBRACE);
          }
        case 126: break;
        case 30: 
          { return symbol(sym.MINUSEQ);
          }
        case 127: break;
        case 7: 
          { return symbol(sym.IDENTIFIER, yytext()));
          }
        case 128: break;
        case 31: 
          { return symbol(sym.MINUSMINUS);
          }
        case 129: break;
        case 64: 
          { return symbol(sym.DEFAULT);
          }
        case 130: break;
        case 37: 
          { string.append( '\f' );
          }
        case 131: break;
        case 21: 
          { return symbol(sym.DIVEQ);
          }
        case 132: break;
        case 63: 
          { return symbol(sym.INCLUDE);
          }
        case 133: break;
        case 13: 
          { return symbol(sym.EQ);
          }
        case 134: break;
        case 58: 
          { return symbol(sym.NUMBER);
          }
        case 135: break;
        case 71: 
          { return symbol(sym.LESSTHANEQUALS);
          }
        case 136: break;
        case 9: 
          { return symbol(sym.RPAREN);
          }
        case 137: break;
        case 18: 
          { string.append( yytext() );
          }
        case 138: break;
        case 27: 
          { return symbol(sym.DO);
          }
        case 139: break;
        case 43: 
          { return symbol(sym.FOR);
          }
        case 140: break;
        case 22: 
          { return symbol(sym.MULTEQ);
          }
        case 141: break;
        case 52: 
          { return symbol(sym.CASE);
          }
        case 142: break;
        case 29: 
          { return symbol(sym.PLUSPLUS);
          }
        case 143: break;
        case 57: 
          { return symbol(sym.EQUALS);
          }
        case 144: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
